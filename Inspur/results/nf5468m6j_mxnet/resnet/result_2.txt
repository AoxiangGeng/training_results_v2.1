+ echo 'Beginning trial 2 of 5'
Beginning trial 2 of 5
+ docker exec -it image_classification python -c '
import mlperf_log_utils
from mlperf_logging.mllog import constants

mlperf_log_utils.mlperf_submission_log(constants.RESNET)'
:::MLLOG {"namespace": "", "time_ms": 1665659489604, "event_type": "POINT_IN_TIME", "key": "submission_benchmark", "value": "resnet", "metadata": {"file": "/workspace/image_classification/mlperf_log_utils.py", "lineno": 84}}
:::MLLOG {"namespace": "", "time_ms": 1665659489615, "event_type": "POINT_IN_TIME", "key": "submission_org", "value": "Inspur", "metadata": {"file": "/workspace/image_classification/mlperf_log_utils.py", "lineno": 89}}
:::MLLOG {"namespace": "", "time_ms": 1665659489615, "event_type": "POINT_IN_TIME", "key": "submission_division", "value": "closed", "metadata": {"file": "/workspace/image_classification/mlperf_log_utils.py", "lineno": 93}}
:::MLLOG {"namespace": "", "time_ms": 1665659489615, "event_type": "POINT_IN_TIME", "key": "submission_status", "value": "research", "metadata": {"file": "/workspace/image_classification/mlperf_log_utils.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1665659489615, "event_type": "POINT_IN_TIME", "key": "submission_platform", "value": "1xNF5468M6J", "metadata": {"file": "/workspace/image_classification/mlperf_log_utils.py", "lineno": 101}}
+ '[' 1 -eq 1 ']'
+ sync
+ sudo /sbin/sysctl vm.drop_caches=3
vm.drop_caches = 3
+ docker exec -it image_classification python -c '
import mlperf_log_utils
from mlperf_logging.mllog import constants

mlperf_log_utils.mx_resnet_print_event(key=constants.CACHE_CLEAR, val=True)'
:::MLLOG {"namespace": "", "time_ms": 1665659503678, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "<string>", "lineno": 5}}
+ export SEED=22365
+ SEED=22365
+ docker exec -it --env=BATCHSIZE --env=DALI_CACHE_SIZE --env=DALI_CROP_BUFFER_HINT --env=DALI_DECODER_BUFFER_HINT --env=DALI_DONT_USE_MMAP --env=DALI_EVAL_HW_DECODER_LOAD --env=DALI_EVAL_PREFETCH_QUEUE --env=DALI_EVAL_THREADS --env=DALI_HW_DECODER_LOAD --env=DALI_NORMALIZE_BUFFER_HINT --env=DALI_NVJPEG_MEMPADDING --env=DALI_PREALLOCATE_HEIGHT --env=DALI_PREALLOCATE_WIDTH --env=DALI_PREFETCH_QUEUE --env=DALI_ROI_DECODE --env=DALI_THREADS --env=DALI_TMP_BUFFER_HINT --env=DGXHT --env=DGXNGPU --env=DGXNNODES --env=DGXNSOCKET --env=DGXSOCKETCORES --env=DGXSYSTEM --env=EVAL_OFFSET --env=EVAL_PERIOD --env=HOROVOD_CYCLE_TIME --env=HOROVOD_FUSION_THRESHOLD --env=HOROVOD_NUM_NCCL_STREAMS --env=KVSTORE --env=LABELSMOOTHING --env=LARSETA --env=LR --env=LRSCHED --env=MOM --env=MXNET_CUDNN_NHWC_BN_ADD_HEURISTIC_BWD --env=MXNET_CUDNN_NHWC_BN_ADD_HEURISTIC_FWD --env=MXNET_CUDNN_NHWC_BN_HEURISTIC_BWD --env=MXNET_CUDNN_NHWC_BN_HEURISTIC_FWD --env=MXNET_CUDNN_WARN_ON_IGNORED_FLAGS --env=MXNET_ENABLE_CUDA_GRAPHS --env=MXNET_EXEC_BULK_EXEC_MAX_NODE_TRAIN_BWD --env=MXNET_EXEC_BULK_EXEC_MAX_NODE_TRAIN_FWD --env=MXNET_EXTENDED_NORMCONV_SUPPORT --env=MXNET_HOROVOD_NUM_GROUPS --env=MXNET_OPTIMIZER_AGGREGATION_SIZE --env=NCCL_SOCKET_IFNAME --env=NETWORK --env=NUMEPOCHS --env=OMPI_MCA_btl --env=OPTIMIZER --env=RUN_NCCL_BW_TEST --env=WALLTIME --env=WARMUP_EPOCHS --env=WD --env=MLPERF_HOST_OS --env=SEED image_classification mpirun --allow-run-as-root --bind-to none --np 24 ./run_and_time.sh
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
running benchmark
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
running benchmark
running benchmark
running benchmark
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
running benchmark
running benchmark
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
running benchmark
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
running benchmark
running benchmark
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
running benchmark
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
running benchmark
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
running benchmark
running benchmark
running benchmark
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
running benchmark
running benchmark
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
running benchmark
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
running benchmark
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
running benchmark
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
running benchmark
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
running benchmark
running benchmark
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
STARTING TIMING RUN AT 2022-10-13 11:11:45 AM
running benchmark
running benchmark
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665659519553, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
:::MLLOG {"namespace": "", "time_ms": 1665659534142, "event_type": "POINT_IN_TIME", "key": "seed", "value": 22365, "metadata": {"file": "train_imagenet.py", "lineno": 173}}
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[11:12:14] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU[11:12:14] ../src/storage/storage.cc:
199: Using Pooled (Naive) StorageManager for GPU
NCCL version 2.12.10+cuda11.6
:::MLLOG {"namespace": "", "time_ms": 1665659546845, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 136, "metadata": {"file": "/workspace/image_classification/common/dali.py", "lineno": 327}}
[11:12:37] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
:::MLLOG {"namespace": "", "time_ms": 1665659557641, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "bn0_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557642, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "bn0_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557642, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "conv0_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557642, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 78, "tensor": "fc1_bias"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557642, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 69, "tensor": "fc1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557643, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit1_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557643, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit1_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557643, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit1_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557643, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit1_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557644, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit1_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557644, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit1_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557644, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit1_bnsc_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557644, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit1_bnsc_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557644, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit1_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557645, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit1_conv1sc_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557645, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit1_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557645, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit1_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557645, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit2_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557646, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit2_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557646, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit2_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557646, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit2_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557646, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit2_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557646, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit2_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557647, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit2_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557647, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit2_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557647, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit2_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557647, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit3_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557647, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit3_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557648, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit3_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557648, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit3_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557648, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit3_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557648, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit3_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557648, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit3_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557649, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit3_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557649, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit3_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557649, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit1_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557649, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit1_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557650, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit1_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557650, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit1_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557650, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit1_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557650, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit1_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557651, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit1_bnsc_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557651, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit1_bnsc_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557651, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit1_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557652, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit1_conv1sc_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557652, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit1_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557652, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit1_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557652, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit2_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557653, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit2_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557653, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit2_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557653, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit2_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557653, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit2_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557654, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit2_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557654, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit2_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557654, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit2_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557654, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit2_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557654, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit3_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557655, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit3_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557655, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit3_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557655, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit3_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557655, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit3_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557655, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit3_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557656, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit3_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557656, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit3_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557656, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit3_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557656, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit4_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557656, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit4_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557657, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit4_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557657, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit4_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557657, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit4_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557657, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit4_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557657, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit4_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557658, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit4_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557658, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit4_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557658, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit1_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557658, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit1_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557658, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit1_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557659, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit1_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557659, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit1_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557659, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit1_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557659, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit1_bnsc_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557660, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit1_bnsc_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557660, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit1_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557660, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit1_conv1sc_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557660, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit1_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557660, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit1_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557660, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit2_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557661, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit2_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557661, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit2_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557661, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit2_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557661, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit2_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557662, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit2_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557662, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit2_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557662, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit2_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557662, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit2_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557662, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit3_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557663, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit3_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557663, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit3_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557663, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit3_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557663, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit3_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557663, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit3_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557664, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit3_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557664, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit3_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557664, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit3_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557664, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit4_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557664, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit4_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557665, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit4_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557665, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit4_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557665, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit4_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557665, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit4_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557665, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit4_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557666, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit4_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557666, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit4_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557666, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit5_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557666, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit5_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557666, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit5_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557667, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit5_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557667, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit5_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557667, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit5_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557667, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit5_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557667, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit5_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557668, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit5_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557668, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit6_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557668, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit6_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557668, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit6_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557668, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit6_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557669, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit6_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557669, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit6_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557669, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit6_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557669, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit6_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557669, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit6_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557670, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit1_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557670, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit1_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557670, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit1_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557670, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit1_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557670, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit1_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557671, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit1_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557671, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit1_bnsc_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557671, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit1_bnsc_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557671, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit1_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557671, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit1_conv1sc_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557672, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit1_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557672, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit1_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557672, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit2_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557672, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit2_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557672, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit2_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557673, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit2_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557673, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit2_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557673, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit2_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557673, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit2_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557673, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit2_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557674, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit2_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557674, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit3_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557674, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit3_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557674, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit3_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557674, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit3_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557675, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit3_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557675, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit3_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557675, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit3_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557675, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit3_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665659557675, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit3_conv3_weight"}}
[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU

[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for [11:12:44] ../src/storage/storage.cc:199CPU
[11:12:44] ../src/storage/storage.cc:: Using Pooled (Naive) StorageManager for CPU
199: Using Pooled (Naive) StorageManager for CPU
[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[11:12:44] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
:::MLLOG {"namespace": "", "time_ms": 1665659566207, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 230}}
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,207 Node[5] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='5', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=5, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=24196, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,207 Node[10] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='10', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=10, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=15497, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,208 Node[0] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='0', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=0, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=16642, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,208 Node[4] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='4', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=4, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=55206, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
:::MLLOG {"namespace": "", "time_ms": 1665659566208, "event_type": "POINT_IN_TIME", "key": "sgd_opt_learning_rate_decay_poly_power", "value": 2, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 710}}
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,208 Node[12] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='12', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=12, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=33478, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
:::MLLOG {"namespace": "", "time_ms": 1665659566209, "event_type": "POINT_IN_TIME", "key": "sgd_opt_end_learning_rate", "value": 0.0001, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 711}}
:::MLLOG {"namespace": "", "time_ms": 1665659566209, "event_type": "POINT_IN_TIME", "key": "lars_opt_learning_rate_decay_poly_power", "value": 2, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 712}}
:::MLLOG {"namespace": "", "time_ms": 1665659566209, "event_type": "POINT_IN_TIME", "key": "lars_opt_end_learning_rate", "value": 0.0001, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 713}}
:::MLLOG {"namespace": "", "time_ms": 1665659566209, "event_type": "POINT_IN_TIME", "key": "d_batch_size", "value": 136, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1176}}
:::MLLOG {"namespace": "", "time_ms": 1665659566209, "event_type": "POINT_IN_TIME", "key": "s_optimizer", "value": "sgdwfastlars", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1177}}
:::MLLOG {"namespace": "", "time_ms": 1665659566209, "event_type": "POINT_IN_TIME", "key": "s_network", "value": "resnet-v1b-stats-fl", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1178}}
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,209 Node[19] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='19', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=19, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=40812, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
:::MLLOG {"namespace": "", "time_ms": 1665659566209, "event_type": "POINT_IN_TIME", "key": "s_process", "value": "horovod", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1179}}
:::MLLOG {"namespace": "", "time_ms": 1665659566209, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 3264, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1180}}
:::MLLOG {"namespace": "", "time_ms": 1665659566209, "event_type": "POINT_IN_TIME", "key": "s_optimizer", "value": "sgdwfastlars", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1181}}
:::MLLOG {"namespace": "", "time_ms": 1665659566209, "event_type": "POINT_IN_TIME", "key": "s_network", "value": "resnet-v1b-stats-fl", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1182}}
:::MLLOG {"namespace": "", "time_ms": 1665659566209, "event_type": "POINT_IN_TIME", "key": "s_process", "value": "horovod", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1183}}
:::MLLOG {"namespace": "", "time_ms": 1665659566209, "event_type": "POINT_IN_TIME", "key": "gradient_accumulation_steps", "value": 1, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1184}}
:::MLLOG {"namespace": "", "time_ms": 1665659566209, "event_type": "POINT_IN_TIME", "key": "opt_name", "value": "lars", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1190}}
:::MLLOG {"namespace": "", "time_ms": 1665659566209, "event_type": "POINT_IN_TIME", "key": "lars_epsilon", "value": 0, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1192}}
:::MLLOG {"namespace": "", "time_ms": 1665659566209, "event_type": "POINT_IN_TIME", "key": "lars_opt_weight_decay", "value": 5e-05, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1194}}
:::MLLOG {"namespace": "", "time_ms": 1665659566209, "event_type": "POINT_IN_TIME", "key": "lars_opt_momentum", "value": 0.9, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1196}}
:::MLLOG {"namespace": "", "time_ms": 1665659566210, "event_type": "POINT_IN_TIME", "key": "lars_opt_base_learning_rate", "value": 10.5, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1197}}
:::MLLOG {"namespace": "", "time_ms": 1665659566210, "event_type": "POINT_IN_TIME", "key": "lars_opt_learning_rate_warmup_epochs", "value": 2, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1198}}
:::MLLOG {"namespace": "", "time_ms": 1665659566210, "event_type": "POINT_IN_TIME", "key": "lars_opt_learning_rate_decay_steps", "value": 37, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1199}}
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,210 Node[8] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='8', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=8, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=10236, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,210 Node[7] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='7', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=7, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=63758, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,210 Node[22] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='22', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=22, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=10967, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,211 Node[16] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='16', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=16, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=27332, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,211 Node[6] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='6', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=6, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=34214, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,211 Node[13] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='13', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=13, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=9691, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,211 Node[17] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='17', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=17, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=8669, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,211 Node[21] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='21', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=21, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=12658, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,211 Node[11] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='11', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=11, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=14600, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,211 Node[23] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='23', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=23, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=65086, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,211 Node[20] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='20', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=20, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=4961, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,211 Node[15] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='15', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=15, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=1131, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,212 Node[18] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='18', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=18, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=5381, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,212 Node[1] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='1', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=1, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=45622, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,213 Node[9] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='9', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=9, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=63512, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,214 Node[14] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='14', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=14, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=41527, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,216 Node[2] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='2', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=2, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=44560, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 11:12:46,216 Node[3] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='3', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=3, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=47946, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
:::MLLOG {"namespace": "", "time_ms": 1665659583441, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1348}}
:::MLLOG {"namespace": "", "time_ms": 1665659583441, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 1281167, "metadata": {"file": "/workspace/image_classification/common/dali.py", "lineno": 504}}
:::MLLOG {"namespace": "", "time_ms": 1665659583671, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 50000, "metadata": {"file": "/workspace/image_classification/common/dali.py", "lineno": 526}}
:::MLLOG {"namespace": "", "time_ms": 1665659583671, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 902, "first_epoch_num": 1, "epoch_count": 3}}
:::MLLOG {"namespace": "", "time_ms": 1665659583671, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 1}}
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:13:07,940 Node[0] Epoch[0] Batch [0-20]	Speed: 28898.66 samples/sec	accuracy=nan
2022-10-13 11:13:10,142 Node[0] Epoch[0] Batch [20-40]	Speed: 29640.97 samples/sec	accuracy=nan
2022-10-13 11:13:12,353 Node[0] Epoch[0] Batch [40-60]	Speed: 29534.03 samples/sec	accuracy=nan
2022-10-13 11:13:14,556 Node[0] Epoch[0] Batch [60-80]	Speed: 29632.54 samples/sec	accuracy=nan
2022-10-13 11:13:16,758 Node[0] Epoch[0] Batch [80-100]	Speed: 29645.88 samples/sec	accuracy=nan
2022-10-13 11:13:18,958 Node[0] Epoch[0] Batch [100-120]	Speed: 29667.90 samples/sec	accuracy=nan
2022-10-13 11:13:21,151 Node[0] Epoch[0] Batch [120-140]	Speed: 29771.61 samples/sec	accuracy=nan
2022-10-13 11:13:23,353 Node[0] Epoch[0] Batch [140-160]	Speed: 29635.81 samples/sec	accuracy=nan
2022-10-13 11:13:25,551 Node[0] Epoch[0] Batch [160-180]	Speed: 29710.67 samples/sec	accuracy=nan
2022-10-13 11:13:27,742 Node[0] Epoch[0] Batch [180-200]	Speed: 29786.45 samples/sec	accuracy=nan
2022-10-13 11:13:29,935 Node[0] Epoch[0] Batch [200-220]	Speed: 29767.48 samples/sec	accuracy=nan
2022-10-13 11:13:32,136 Node[0] Epoch[0] Batch [220-240]	Speed: 29659.50 samples/sec	accuracy=nan
2022-10-13 11:13:34,345 Node[0] Epoch[0] Batch [240-260]	Speed: 29560.25 samples/sec	accuracy=nan
2022-10-13 11:13:36,441 Node[0] Epoch[0] Batch [260-280]	Speed: 31141.60 samples/sec	accuracy=nan
2022-10-13 11:13:38,745 Node[0] Epoch[0] Batch [280-300]	Speed: 28332.90 samples/sec	accuracy=nan
2022-10-13 11:13:40,937 Node[0] Epoch[0] Batch [300-320]	Speed: 29778.46 samples/sec	accuracy=nan
2022-10-13 11:13:43,134 Node[0] Epoch[0] Batch [320-340]	Speed: 29716.01 samples/sec	accuracy=nan
2022-10-13 11:13:45,332 Node[0] Epoch[0] Batch [340-360]	Speed: 29697.51 samples/sec	accuracy=nan
2022-10-13 11:13:47,515 Node[0] Epoch[0] Batch [360-380]	Speed: 29901.68 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665659628791, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 1}}
2022-10-13 11:13:48,791 Node[0] Epoch[0] Time cost=45.120
:::MLLOG {"namespace": "", "time_ms": 1665659628791, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 28394.85291332006}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 1}}
:::MLLOG {"namespace": "", "time_ms": 1665659628791, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 28394.85291332006, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665659628791, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 2}}
2022-10-13 11:13:51,038 Node[0] Epoch[1] Batch [0-20]	Speed: 30617.77 samples/sec	accuracy=nan
2022-10-13 11:13:53,172 Node[0] Epoch[1] Batch [20-40]	Speed: 30583.08 samples/sec	accuracy=nan
2022-10-13 11:13:55,304 Node[0] Epoch[1] Batch [40-60]	Speed: 30625.80 samples/sec	accuracy=nan
2022-10-13 11:13:57,435 Node[0] Epoch[1] Batch [60-80]	Speed: 30635.85 samples/sec	accuracy=nan
2022-10-13 11:13:59,564 Node[0] Epoch[1] Batch [80-100]	Speed: 30651.73 samples/sec	accuracy=nan
2022-10-13 11:14:01,693 Node[0] Epoch[1] Batch [100-120]	Speed: 30667.04 samples/sec	accuracy=nan
2022-10-13 11:14:03,818 Node[0] Epoch[1] Batch [120-140]	Speed: 30716.80 samples/sec	accuracy=nan
2022-10-13 11:14:05,948 Node[0] Epoch[1] Batch [140-160]	Speed: 30654.94 samples/sec	accuracy=nan
2022-10-13 11:14:08,079 Node[0] Epoch[1] Batch [160-180]	Speed: 30635.59 samples/sec	accuracy=nan
2022-10-13 11:14:10,204 Node[0] Epoch[1] Batch [180-200]	Speed: 30712.43 samples/sec	accuracy=nan
2022-10-13 11:14:12,333 Node[0] Epoch[1] Batch [200-220]	Speed: 30668.35 samples/sec	accuracy=nan
2022-10-13 11:14:14,465 Node[0] Epoch[1] Batch [220-240]	Speed: 30610.95 samples/sec	accuracy=nan
2022-10-13 11:14:16,591 Node[0] Epoch[1] Batch [240-260]	Speed: 30707.76 samples/sec	accuracy=nan
2022-10-13 11:14:18,723 Node[0] Epoch[1] Batch [260-280]	Speed: 30626.25 samples/sec	accuracy=nan
2022-10-13 11:14:20,855 Node[0] Epoch[1] Batch [280-300]	Speed: 30615.20 samples/sec	accuracy=nan
2022-10-13 11:14:22,985 Node[0] Epoch[1] Batch [300-320]	Speed: 30642.13 samples/sec	accuracy=nan
2022-10-13 11:14:25,115 Node[0] Epoch[1] Batch [320-340]	Speed: 30649.96 samples/sec	accuracy=nan
2022-10-13 11:14:27,247 Node[0] Epoch[1] Batch [340-360]	Speed: 30624.99 samples/sec	accuracy=nan
2022-10-13 11:14:29,374 Node[0] Epoch[1] Batch [360-380]	Speed: 30688.39 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665659670649, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 2}}
2022-10-13 11:14:30,649 Node[0] Epoch[1] Time cost=41.857
:::MLLOG {"namespace": "", "time_ms": 1665659670649, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30607.966721048513}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 2}}
:::MLLOG {"namespace": "", "time_ms": 1665659670649, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30607.966721048513, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665659670649, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 3}}
2022-10-13 11:14:32,892 Node[0] Epoch[2] Batch [0-20]	Speed: 30643.93 samples/sec	accuracy=nan
2022-10-13 11:14:35,023 Node[0] Epoch[2] Batch [20-40]	Speed: 30633.89 samples/sec	accuracy=nan
2022-10-13 11:14:37,149 Node[0] Epoch[2] Batch [40-60]	Speed: 30703.88 samples/sec	accuracy=nan
2022-10-13 11:14:39,274 Node[0] Epoch[2] Batch [60-80]	Speed: 30712.13 samples/sec	accuracy=nan
2022-10-13 11:14:41,402 Node[0] Epoch[2] Batch [80-100]	Speed: 30678.10 samples/sec	accuracy=nan
2022-10-13 11:14:43,533 Node[0] Epoch[2] Batch [100-120]	Speed: 30631.88 samples/sec	accuracy=nan
2022-10-13 11:14:45,664 Node[0] Epoch[2] Batch [120-140]	Speed: 30632.96 samples/sec	accuracy=nan
2022-10-13 11:14:47,796 Node[0] Epoch[2] Batch [140-160]	Speed: 30628.82 samples/sec	accuracy=nan
2022-10-13 11:14:49,928 Node[0] Epoch[2] Batch [160-180]	Speed: 30617.70 samples/sec	accuracy=nan
2022-10-13 11:14:52,055 Node[0] Epoch[2] Batch [180-200]	Speed: 30693.31 samples/sec	accuracy=nan
2022-10-13 11:14:54,188 Node[0] Epoch[2] Batch [200-220]	Speed: 30602.67 samples/sec	accuracy=nan
2022-10-13 11:14:56,318 Node[0] Epoch[2] Batch [220-240]	Speed: 30636.14 samples/sec	accuracy=nan
2022-10-13 11:14:58,446 Node[0] Epoch[2] Batch [240-260]	Speed: 30681.63 samples/sec	accuracy=nan
2022-10-13 11:15:00,575 Node[0] Epoch[2] Batch [260-280]	Speed: 30667.70 samples/sec	accuracy=nan
2022-10-13 11:15:02,707 Node[0] Epoch[2] Batch [280-300]	Speed: 30620.45 samples/sec	accuracy=nan
2022-10-13 11:15:04,836 Node[0] Epoch[2] Batch [300-320]	Speed: 30656.65 samples/sec	accuracy=nan
2022-10-13 11:15:06,974 Node[0] Epoch[2] Batch [320-340]	Speed: 30529.44 samples/sec	accuracy=nan
2022-10-13 11:15:09,102 Node[0] Epoch[2] Batch [340-360]	Speed: 30685.99 samples/sec	accuracy=nan
2022-10-13 11:15:11,232 Node[0] Epoch[2] Batch [360-380]	Speed: 30637.34 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665659712510, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 3}}
2022-10-13 11:15:12,510 Node[0] Epoch[2] Time cost=41.861
:::MLLOG {"namespace": "", "time_ms": 1665659712510, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30605.172265646597}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 3}}
:::MLLOG {"namespace": "", "time_ms": 1665659712511, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30605.172265646597, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,610 Node[5] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,610 Node[4] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,610 Node[7] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,610 Node[3] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,610 Node[6] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,610 Node[22] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,610 Node[2] DALI iterator does not support resetting while epoch is not finished. Ignoring...
:::MLLOG {"namespace": "", "time_ms": 1665659712610, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 3}}
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,610 Node[8] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,610 Node[21] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,610 Node[23] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,610 Node[16] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,610 Node[17] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,610 Node[20] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,610 Node[1] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,610 Node[9] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,610 Node[15] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,610 Node[10] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,610 Node[19] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,610 Node[14] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,611 Node[18] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,611 Node[13] DALI iterator does not support resetting while epoch is not finished. Ignoring...
2022-10-13 11:15:12,611 Node[0] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,611 Node[12] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 11:15:12,611 Node[11] DALI iterator does not support resetting while epoch is not finished. Ignoring...
2022-10-13 11:15:14,430 Node[0] Epoch[2] Validation-accuracy=0.288046
2022-10-13 11:15:14,430 Node[0] Epoch[2] Validation-correct-count=600.000000
2022-10-13 11:15:14,430 Node[0] Epoch[2] Validation-total-count=2083.000000
:::MLLOG {"namespace": "", "time_ms": 1665659714459, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1665659714460, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.29622, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1665659714460, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1665659714460, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 4, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665659714460, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 4}}
2022-10-13 11:15:16,760 Node[0] Epoch[3] Batch [0-20]	Speed: 28705.26 samples/sec	accuracy=nan
2022-10-13 11:15:18,893 Node[0] Epoch[3] Batch [20-40]	Speed: 30601.92 samples/sec	accuracy=nan
2022-10-13 11:15:21,021 Node[0] Epoch[3] Batch [40-60]	Speed: 30677.89 samples/sec	accuracy=nan
2022-10-13 11:15:23,154 Node[0] Epoch[3] Batch [60-80]	Speed: 30614.09 samples/sec	accuracy=nan
2022-10-13 11:15:25,285 Node[0] Epoch[3] Batch [80-100]	Speed: 30620.46 samples/sec	accuracy=nan
2022-10-13 11:15:27,316 Node[0] Epoch[3] Batch [100-120]	Speed: 32143.68 samples/sec	accuracy=nan
2022-10-13 11:15:29,545 Node[0] Epoch[3] Batch [120-140]	Speed: 29296.44 samples/sec	accuracy=nan
2022-10-13 11:15:31,677 Node[0] Epoch[3] Batch [140-160]	Speed: 30619.56 samples/sec	accuracy=nan
2022-10-13 11:15:33,806 Node[0] Epoch[3] Batch [160-180]	Speed: 30661.06 samples/sec	accuracy=nan
2022-10-13 11:15:35,933 Node[0] Epoch[3] Batch [180-200]	Speed: 30680.62 samples/sec	accuracy=nan
2022-10-13 11:15:38,064 Node[0] Epoch[3] Batch [200-220]	Speed: 30644.61 samples/sec	accuracy=nan
2022-10-13 11:15:40,190 Node[0] Epoch[3] Batch [220-240]	Speed: 30703.63 samples/sec	accuracy=nan
2022-10-13 11:15:42,323 Node[0] Epoch[3] Batch [240-260]	Speed: 30603.00 samples/sec	accuracy=nan
2022-10-13 11:15:44,450 Node[0] Epoch[3] Batch [260-280]	Speed: 30685.86 samples/sec	accuracy=nan
2022-10-13 11:15:46,582 Node[0] Epoch[3] Batch [280-300]	Speed: 30625.03 samples/sec	accuracy=nan
2022-10-13 11:15:48,616 Node[0] Epoch[3] Batch [300-320]	Speed: 32090.93 samples/sec	accuracy=nan
2022-10-13 11:15:50,848 Node[0] Epoch[3] Batch [320-340]	Speed: 29253.16 samples/sec	accuracy=nan
2022-10-13 11:15:52,977 Node[0] Epoch[3] Batch [340-360]	Speed: 30650.53 samples/sec	accuracy=nan
2022-10-13 11:15:55,015 Node[0] Epoch[3] Batch [360-380]	Speed: 32041.45 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665659756398, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 4}}
2022-10-13 11:15:56,399 Node[0] Epoch[3] Time cost=41.936
:::MLLOG {"namespace": "", "time_ms": 1665659756399, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30550.23715711987}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665659756400, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30550.23715711987, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665659756400, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 5}}
2022-10-13 11:15:58,647 Node[0] Epoch[4] Batch [0-20]	Speed: 30559.41 samples/sec	accuracy=nan
2022-10-13 11:16:00,775 Node[0] Epoch[4] Batch [20-40]	Speed: 30684.38 samples/sec	accuracy=nan
2022-10-13 11:16:02,908 Node[0] Epoch[4] Batch [40-60]	Speed: 30604.61 samples/sec	accuracy=nan
2022-10-13 11:16:05,042 Node[0] Epoch[4] Batch [60-80]	Speed: 30589.13 samples/sec	accuracy=nan
2022-10-13 11:16:07,177 Node[0] Epoch[4] Batch [80-100]	Speed: 30570.78 samples/sec	accuracy=nan
2022-10-13 11:16:09,309 Node[0] Epoch[4] Batch [100-120]	Speed: 30620.89 samples/sec	accuracy=nan
2022-10-13 11:16:11,448 Node[0] Epoch[4] Batch [120-140]	Speed: 30523.36 samples/sec	accuracy=nan
2022-10-13 11:16:13,574 Node[0] Epoch[4] Batch [140-160]	Speed: 30697.86 samples/sec	accuracy=nan
2022-10-13 11:16:15,705 Node[0] Epoch[4] Batch [160-180]	Speed: 30637.49 samples/sec	accuracy=nan
2022-10-13 11:16:17,829 Node[0] Epoch[4] Batch [180-200]	Speed: 30732.15 samples/sec	accuracy=nan
2022-10-13 11:16:19,955 Node[0] Epoch[4] Batch [200-220]	Speed: 30706.85 samples/sec	accuracy=nan
2022-10-13 11:16:22,081 Node[0] Epoch[4] Batch [220-240]	Speed: 30700.42 samples/sec	accuracy=nan
2022-10-13 11:16:24,213 Node[0] Epoch[4] Batch [240-260]	Speed: 30620.93 samples/sec	accuracy=nan
2022-10-13 11:16:26,348 Node[0] Epoch[4] Batch [260-280]	Speed: 30580.37 samples/sec	accuracy=nan
2022-10-13 11:16:28,477 Node[0] Epoch[4] Batch [280-300]	Speed: 30669.43 samples/sec	accuracy=nan
2022-10-13 11:16:30,607 Node[0] Epoch[4] Batch [300-320]	Speed: 30642.78 samples/sec	accuracy=nan
2022-10-13 11:16:32,740 Node[0] Epoch[4] Batch [320-340]	Speed: 30605.52 samples/sec	accuracy=nan
2022-10-13 11:16:34,775 Node[0] Epoch[4] Batch [340-360]	Speed: 32081.42 samples/sec	accuracy=nan
2022-10-13 11:16:37,007 Node[0] Epoch[4] Batch [360-380]	Speed: 29242.34 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665659798282, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 5}}
2022-10-13 11:16:38,282 Node[0] Epoch[4] Time cost=41.882
:::MLLOG {"namespace": "", "time_ms": 1665659798282, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30589.67431059018}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 5}}
:::MLLOG {"namespace": "", "time_ms": 1665659798282, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30589.67431059018, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665659798282, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 6}}
2022-10-13 11:16:40,525 Node[0] Epoch[5] Batch [0-20]	Speed: 30673.62 samples/sec	accuracy=nan
2022-10-13 11:16:42,652 Node[0] Epoch[5] Batch [20-40]	Speed: 30683.00 samples/sec	accuracy=nan
2022-10-13 11:16:44,777 Node[0] Epoch[5] Batch [40-60]	Speed: 30728.16 samples/sec	accuracy=nan
2022-10-13 11:16:46,910 Node[0] Epoch[5] Batch [60-80]	Speed: 30592.48 samples/sec	accuracy=nan
2022-10-13 11:16:49,045 Node[0] Epoch[5] Batch [80-100]	Speed: 30584.13 samples/sec	accuracy=nan
2022-10-13 11:16:51,176 Node[0] Epoch[5] Batch [100-120]	Speed: 30638.01 samples/sec	accuracy=nan
2022-10-13 11:16:53,310 Node[0] Epoch[5] Batch [120-140]	Speed: 30586.37 samples/sec	accuracy=nan
2022-10-13 11:16:55,443 Node[0] Epoch[5] Batch [140-160]	Speed: 30600.07 samples/sec	accuracy=nan
2022-10-13 11:16:57,576 Node[0] Epoch[5] Batch [160-180]	Speed: 30607.44 samples/sec	accuracy=nan
2022-10-13 11:16:59,704 Node[0] Epoch[5] Batch [180-200]	Speed: 30674.25 samples/sec	accuracy=nan
2022-10-13 11:17:01,831 Node[0] Epoch[5] Batch [200-220]	Speed: 30689.42 samples/sec	accuracy=nan
2022-10-13 11:17:03,961 Node[0] Epoch[5] Batch [220-240]	Speed: 30656.44 samples/sec	accuracy=nan
2022-10-13 11:17:06,091 Node[0] Epoch[5] Batch [240-260]	Speed: 30647.88 samples/sec	accuracy=nan
2022-10-13 11:17:08,217 Node[0] Epoch[5] Batch [260-280]	Speed: 30705.58 samples/sec	accuracy=nan
2022-10-13 11:17:10,348 Node[0] Epoch[5] Batch [280-300]	Speed: 30629.87 samples/sec	accuracy=nan
2022-10-13 11:17:12,479 Node[0] Epoch[5] Batch [300-320]	Speed: 30628.96 samples/sec	accuracy=nan
2022-10-13 11:17:14,514 Node[0] Epoch[5] Batch [320-340]	Speed: 32078.08 samples/sec	accuracy=nan
2022-10-13 11:17:16,745 Node[0] Epoch[5] Batch [340-360]	Speed: 29258.41 samples/sec	accuracy=nan
2022-10-13 11:17:18,873 Node[0] Epoch[5] Batch [360-380]	Speed: 30688.85 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665659840152, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 6}}
2022-10-13 11:17:20,152 Node[0] Epoch[5] Time cost=41.870
:::MLLOG {"namespace": "", "time_ms": 1665659840152, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30598.858640891423}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 6}}
:::MLLOG {"namespace": "", "time_ms": 1665659840152, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30598.858640891423, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665659840153, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 7}}
2022-10-13 11:17:22,395 Node[0] Epoch[6] Batch [0-20]	Speed: 30669.49 samples/sec	accuracy=nan
2022-10-13 11:17:24,525 Node[0] Epoch[6] Batch [20-40]	Speed: 30657.89 samples/sec	accuracy=nan
2022-10-13 11:17:26,652 Node[0] Epoch[6] Batch [40-60]	Speed: 30679.15 samples/sec	accuracy=nan
2022-10-13 11:17:28,784 Node[0] Epoch[6] Batch [60-80]	Speed: 30632.26 samples/sec	accuracy=nan
2022-10-13 11:17:30,912 Node[0] Epoch[6] Batch [80-100]	Speed: 30663.40 samples/sec	accuracy=nan
2022-10-13 11:17:33,041 Node[0] Epoch[6] Batch [100-120]	Speed: 30664.41 samples/sec	accuracy=nan
2022-10-13 11:17:35,170 Node[0] Epoch[6] Batch [120-140]	Speed: 30672.11 samples/sec	accuracy=nan
2022-10-13 11:17:37,300 Node[0] Epoch[6] Batch [140-160]	Speed: 30642.85 samples/sec	accuracy=nan
2022-10-13 11:17:39,432 Node[0] Epoch[6] Batch [160-180]	Speed: 30622.72 samples/sec	accuracy=nan
2022-10-13 11:17:41,556 Node[0] Epoch[6] Batch [180-200]	Speed: 30731.93 samples/sec	accuracy=nan
2022-10-13 11:17:43,689 Node[0] Epoch[6] Batch [200-220]	Speed: 30599.48 samples/sec	accuracy=nan
2022-10-13 11:17:45,820 Node[0] Epoch[6] Batch [220-240]	Speed: 30643.27 samples/sec	accuracy=nan
2022-10-13 11:17:47,949 Node[0] Epoch[6] Batch [240-260]	Speed: 30651.37 samples/sec	accuracy=nan
2022-10-13 11:17:50,079 Node[0] Epoch[6] Batch [260-280]	Speed: 30649.61 samples/sec	accuracy=nan
2022-10-13 11:17:52,206 Node[0] Epoch[6] Batch [280-300]	Speed: 30701.29 samples/sec	accuracy=nan
2022-10-13 11:17:54,337 Node[0] Epoch[6] Batch [300-320]	Speed: 30620.62 samples/sec	accuracy=nan
2022-10-13 11:17:56,470 Node[0] Epoch[6] Batch [320-340]	Speed: 30606.37 samples/sec	accuracy=nan
2022-10-13 11:17:58,600 Node[0] Epoch[6] Batch [340-360]	Speed: 30651.44 samples/sec	accuracy=nan
2022-10-13 11:18:00,727 Node[0] Epoch[6] Batch [360-380]	Speed: 30688.50 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665659882000, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 7}}
2022-10-13 11:18:02,001 Node[0] Epoch[6] Time cost=41.848
:::MLLOG {"namespace": "", "time_ms": 1665659882001, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30614.716485021057}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 7}}
:::MLLOG {"namespace": "", "time_ms": 1665659882001, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30614.716485021057, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665659882102, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 7}}
2022-10-13 11:18:02,869 Node[0] Epoch[6] Validation-accuracy=0.419107
2022-10-13 11:18:02,869 Node[0] Epoch[6] Validation-correct-count=873.000000
2022-10-13 11:18:02,869 Node[0] Epoch[6] Validation-total-count=2083.000000
:::MLLOG {"namespace": "", "time_ms": 1665659882911, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1665659882912, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.4145, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1665659882912, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665659882912, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 8, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665659882912, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 8}}
2022-10-13 11:18:05,190 Node[0] Epoch[7] Batch [0-20]	Speed: 29056.38 samples/sec	accuracy=nan
2022-10-13 11:18:07,316 Node[0] Epoch[7] Batch [20-40]	Speed: 30709.90 samples/sec	accuracy=nan
2022-10-13 11:18:09,446 Node[0] Epoch[7] Batch [40-60]	Speed: 30643.64 samples/sec	accuracy=nan
2022-10-13 11:18:11,577 Node[0] Epoch[7] Batch [60-80]	Speed: 30638.27 samples/sec	accuracy=nan
2022-10-13 11:18:13,707 Node[0] Epoch[7] Batch [80-100]	Speed: 30645.12 samples/sec	accuracy=nan
2022-10-13 11:18:15,741 Node[0] Epoch[7] Batch [100-120]	Speed: 32086.59 samples/sec	accuracy=nan
2022-10-13 11:18:17,971 Node[0] Epoch[7] Batch [120-140]	Speed: 29276.17 samples/sec	accuracy=nan
2022-10-13 11:18:20,102 Node[0] Epoch[7] Batch [140-160]	Speed: 30634.64 samples/sec	accuracy=nan
2022-10-13 11:18:22,229 Node[0] Epoch[7] Batch [160-180]	Speed: 30692.99 samples/sec	accuracy=nan
2022-10-13 11:18:24,354 Node[0] Epoch[7] Batch [180-200]	Speed: 30714.51 samples/sec	accuracy=nan
2022-10-13 11:18:26,485 Node[0] Epoch[7] Batch [200-220]	Speed: 30641.55 samples/sec	accuracy=nan
2022-10-13 11:18:28,614 Node[0] Epoch[7] Batch [220-240]	Speed: 30666.53 samples/sec	accuracy=nan
2022-10-13 11:18:30,744 Node[0] Epoch[7] Batch [240-260]	Speed: 30647.91 samples/sec	accuracy=nan
2022-10-13 11:18:32,877 Node[0] Epoch[7] Batch [260-280]	Speed: 30606.58 samples/sec	accuracy=nan
2022-10-13 11:18:35,006 Node[0] Epoch[7] Batch [280-300]	Speed: 30650.90 samples/sec	accuracy=nan
2022-10-13 11:18:37,140 Node[0] Epoch[7] Batch [300-320]	Speed: 30600.21 samples/sec	accuracy=nan
2022-10-13 11:18:39,268 Node[0] Epoch[7] Batch [320-340]	Speed: 30670.76 samples/sec	accuracy=nan
2022-10-13 11:18:41,398 Node[0] Epoch[7] Batch [340-360]	Speed: 30651.76 samples/sec	accuracy=nan
2022-10-13 11:18:43,439 Node[0] Epoch[7] Batch [360-380]	Speed: 31981.27 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665659924811, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 8}}
2022-10-13 11:18:44,811 Node[0] Epoch[7] Time cost=41.896
:::MLLOG {"namespace": "", "time_ms": 1665659924812, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30579.923119046565}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 8}}
:::MLLOG {"namespace": "", "time_ms": 1665659924812, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30579.923119046565, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665659924812, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 9}}
2022-10-13 11:18:47,057 Node[0] Epoch[8] Batch [0-20]	Speed: 30623.26 samples/sec	accuracy=nan
2022-10-13 11:18:49,182 Node[0] Epoch[8] Batch [20-40]	Speed: 30718.69 samples/sec	accuracy=nan
2022-10-13 11:18:51,316 Node[0] Epoch[8] Batch [40-60]	Speed: 30591.73 samples/sec	accuracy=nan
2022-10-13 11:18:53,451 Node[0] Epoch[8] Batch [60-80]	Speed: 30578.42 samples/sec	accuracy=nan
2022-10-13 11:18:55,588 Node[0] Epoch[8] Batch [80-100]	Speed: 30547.87 samples/sec	accuracy=nan
2022-10-13 11:18:57,714 Node[0] Epoch[8] Batch [100-120]	Speed: 30701.11 samples/sec	accuracy=nan
2022-10-13 11:18:59,843 Node[0] Epoch[8] Batch [120-140]	Speed: 30664.81 samples/sec	accuracy=nan
2022-10-13 11:19:01,976 Node[0] Epoch[8] Batch [140-160]	Speed: 30594.59 samples/sec	accuracy=nan
2022-10-13 11:19:04,116 Node[0] Epoch[8] Batch [160-180]	Speed: 30508.02 samples/sec	accuracy=nan
2022-10-13 11:19:06,242 Node[0] Epoch[8] Batch [180-200]	Speed: 30714.60 samples/sec	accuracy=nan
2022-10-13 11:19:08,369 Node[0] Epoch[8] Batch [200-220]	Speed: 30685.24 samples/sec	accuracy=nan
2022-10-13 11:19:10,499 Node[0] Epoch[8] Batch [220-240]	Speed: 30644.62 samples/sec	accuracy=nan
2022-10-13 11:19:12,625 Node[0] Epoch[8] Batch [240-260]	Speed: 30713.46 samples/sec	accuracy=nan
2022-10-13 11:19:14,758 Node[0] Epoch[8] Batch [260-280]	Speed: 30597.28 samples/sec	accuracy=nan
2022-10-13 11:19:16,888 Node[0] Epoch[8] Batch [280-300]	Speed: 30645.92 samples/sec	accuracy=nan
2022-10-13 11:19:19,019 Node[0] Epoch[8] Batch [300-320]	Speed: 30643.73 samples/sec	accuracy=nan
2022-10-13 11:19:21,143 Node[0] Epoch[8] Batch [320-340]	Speed: 30724.33 samples/sec	accuracy=nan
2022-10-13 11:19:23,275 Node[0] Epoch[8] Batch [340-360]	Speed: 30627.21 samples/sec	accuracy=nan
2022-10-13 11:19:25,411 Node[0] Epoch[8] Batch [360-380]	Speed: 30554.06 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665659966692, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 9}}
2022-10-13 11:19:26,693 Node[0] Epoch[8] Time cost=41.881
:::MLLOG {"namespace": "", "time_ms": 1665659966693, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30590.39088958063}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 9}}
:::MLLOG {"namespace": "", "time_ms": 1665659966693, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30590.39088958063, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665659966694, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 10}}
2022-10-13 11:19:28,933 Node[0] Epoch[9] Batch [0-20]	Speed: 30689.31 samples/sec	accuracy=nan
2022-10-13 11:19:31,066 Node[0] Epoch[9] Batch [20-40]	Speed: 30596.10 samples/sec	accuracy=nan
2022-10-13 11:19:33,195 Node[0] Epoch[9] Batch [40-60]	Speed: 30661.24 samples/sec	accuracy=nan
2022-10-13 11:19:35,322 Node[0] Epoch[9] Batch [60-80]	Speed: 30692.40 samples/sec	accuracy=nan
2022-10-13 11:19:37,452 Node[0] Epoch[9] Batch [80-100]	Speed: 30648.40 samples/sec	accuracy=nan
2022-10-13 11:19:39,578 Node[0] Epoch[9] Batch [100-120]	Speed: 30711.21 samples/sec	accuracy=nan
2022-10-13 11:19:41,710 Node[0] Epoch[9] Batch [120-140]	Speed: 30617.13 samples/sec	accuracy=nan
2022-10-13 11:19:43,842 Node[0] Epoch[9] Batch [140-160]	Speed: 30614.58 samples/sec	accuracy=nan
2022-10-13 11:19:45,971 Node[0] Epoch[9] Batch [160-180]	Speed: 30662.97 samples/sec	accuracy=nan
2022-10-13 11:19:48,101 Node[0] Epoch[9] Batch [180-200]	Speed: 30645.95 samples/sec	accuracy=nan
2022-10-13 11:19:50,230 Node[0] Epoch[9] Batch [200-220]	Speed: 30664.21 samples/sec	accuracy=nan
2022-10-13 11:19:52,356 Node[0] Epoch[9] Batch [220-240]	Speed: 30702.44 samples/sec	accuracy=nan
2022-10-13 11:19:54,486 Node[0] Epoch[9] Batch [240-260]	Speed: 30652.37 samples/sec	accuracy=nan
2022-10-13 11:19:56,615 Node[0] Epoch[9] Batch [260-280]	Speed: 30668.39 samples/sec	accuracy=nan
2022-10-13 11:19:58,745 Node[0] Epoch[9] Batch [280-300]	Speed: 30647.02 samples/sec	accuracy=nan
2022-10-13 11:20:00,873 Node[0] Epoch[9] Batch [300-320]	Speed: 30669.30 samples/sec	accuracy=nan
2022-10-13 11:20:03,006 Node[0] Epoch[9] Batch [320-340]	Speed: 30606.25 samples/sec	accuracy=nan
2022-10-13 11:20:05,136 Node[0] Epoch[9] Batch [340-360]	Speed: 30651.49 samples/sec	accuracy=nan
2022-10-13 11:20:07,264 Node[0] Epoch[9] Batch [360-380]	Speed: 30678.49 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660008540, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 10}}
2022-10-13 11:20:08,540 Node[0] Epoch[9] Time cost=41.846
:::MLLOG {"namespace": "", "time_ms": 1665660008540, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30615.889674989514}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 10}}
:::MLLOG {"namespace": "", "time_ms": 1665660008540, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30615.889674989514, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660008541, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 11}}
2022-10-13 11:20:10,790 Node[0] Epoch[10] Batch [0-20]	Speed: 30662.32 samples/sec	accuracy=nan
2022-10-13 11:20:12,918 Node[0] Epoch[10] Batch [20-40]	Speed: 30666.06 samples/sec	accuracy=nan
2022-10-13 11:20:15,053 Node[0] Epoch[10] Batch [40-60]	Speed: 30586.19 samples/sec	accuracy=nan
2022-10-13 11:20:17,178 Node[0] Epoch[10] Batch [60-80]	Speed: 30717.36 samples/sec	accuracy=nan
2022-10-13 11:20:19,313 Node[0] Epoch[10] Batch [80-100]	Speed: 30573.53 samples/sec	accuracy=nan
2022-10-13 11:20:21,447 Node[0] Epoch[10] Batch [100-120]	Speed: 30587.77 samples/sec	accuracy=nan
2022-10-13 11:20:23,579 Node[0] Epoch[10] Batch [120-140]	Speed: 30623.76 samples/sec	accuracy=nan
2022-10-13 11:20:25,711 Node[0] Epoch[10] Batch [140-160]	Speed: 30617.81 samples/sec	accuracy=nan
2022-10-13 11:20:27,845 Node[0] Epoch[10] Batch [160-180]	Speed: 30595.58 samples/sec	accuracy=nan
2022-10-13 11:20:29,975 Node[0] Epoch[10] Batch [180-200]	Speed: 30639.13 samples/sec	accuracy=nan
2022-10-13 11:20:32,106 Node[0] Epoch[10] Batch [200-220]	Speed: 30639.66 samples/sec	accuracy=nan
2022-10-13 11:20:34,233 Node[0] Epoch[10] Batch [220-240]	Speed: 30684.87 samples/sec	accuracy=nan
2022-10-13 11:20:36,366 Node[0] Epoch[10] Batch [240-260]	Speed: 30608.71 samples/sec	accuracy=nan
2022-10-13 11:20:38,498 Node[0] Epoch[10] Batch [260-280]	Speed: 30616.73 samples/sec	accuracy=nan
2022-10-13 11:20:40,625 Node[0] Epoch[10] Batch [280-300]	Speed: 30695.71 samples/sec	accuracy=nan
2022-10-13 11:20:42,750 Node[0] Epoch[10] Batch [300-320]	Speed: 30723.73 samples/sec	accuracy=nan
2022-10-13 11:20:44,873 Node[0] Epoch[10] Batch [320-340]	Speed: 30745.22 samples/sec	accuracy=nan
2022-10-13 11:20:47,006 Node[0] Epoch[10] Batch [340-360]	Speed: 30599.23 samples/sec	accuracy=nan
2022-10-13 11:20:49,133 Node[0] Epoch[10] Batch [360-380]	Speed: 30691.00 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660050409, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 11}}
2022-10-13 11:20:50,409 Node[0] Epoch[10] Time cost=41.868
:::MLLOG {"namespace": "", "time_ms": 1665660050409, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30600.019986395255}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 11}}
:::MLLOG {"namespace": "", "time_ms": 1665660050409, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30600.019986395255, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660050509, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 11}}
2022-10-13 11:20:51,292 Node[0] Epoch[10] Validation-accuracy=0.523033
2022-10-13 11:20:51,292 Node[0] Epoch[10] Validation-correct-count=1090.000000
2022-10-13 11:20:51,292 Node[0] Epoch[10] Validation-total-count=2084.000000
:::MLLOG {"namespace": "", "time_ms": 1665660051326, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1665660051327, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.51232, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1665660051327, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 8}}
:::MLLOG {"namespace": "", "time_ms": 1665660051327, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 12, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665660051327, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 12}}
2022-10-13 11:20:53,595 Node[0] Epoch[11] Batch [0-20]	Speed: 29071.80 samples/sec	accuracy=nan
2022-10-13 11:20:55,725 Node[0] Epoch[11] Batch [20-40]	Speed: 30657.31 samples/sec	accuracy=nan
2022-10-13 11:20:57,858 Node[0] Epoch[11] Batch [40-60]	Speed: 30603.36 samples/sec	accuracy=nan
2022-10-13 11:20:59,990 Node[0] Epoch[11] Batch [60-80]	Speed: 30611.58 samples/sec	accuracy=nan
2022-10-13 11:21:02,118 Node[0] Epoch[11] Batch [80-100]	Speed: 30685.78 samples/sec	accuracy=nan
2022-10-13 11:21:04,248 Node[0] Epoch[11] Batch [100-120]	Speed: 30644.04 samples/sec	accuracy=nan
2022-10-13 11:21:06,377 Node[0] Epoch[11] Batch [120-140]	Speed: 30653.96 samples/sec	accuracy=nan
2022-10-13 11:21:08,508 Node[0] Epoch[11] Batch [140-160]	Speed: 30646.05 samples/sec	accuracy=nan
2022-10-13 11:21:10,644 Node[0] Epoch[11] Batch [160-180]	Speed: 30559.66 samples/sec	accuracy=nan
2022-10-13 11:21:12,771 Node[0] Epoch[11] Batch [180-200]	Speed: 30681.58 samples/sec	accuracy=nan
2022-10-13 11:21:14,900 Node[0] Epoch[11] Batch [200-220]	Speed: 30669.55 samples/sec	accuracy=nan
2022-10-13 11:21:17,029 Node[0] Epoch[11] Batch [220-240]	Speed: 30662.35 samples/sec	accuracy=nan
2022-10-13 11:21:19,169 Node[0] Epoch[11] Batch [240-260]	Speed: 30506.87 samples/sec	accuracy=nan
2022-10-13 11:21:21,304 Node[0] Epoch[11] Batch [260-280]	Speed: 30566.76 samples/sec	accuracy=nan
2022-10-13 11:21:23,429 Node[0] Epoch[11] Batch [280-300]	Speed: 30728.06 samples/sec	accuracy=nan
2022-10-13 11:21:25,554 Node[0] Epoch[11] Batch [300-320]	Speed: 30712.40 samples/sec	accuracy=nan
2022-10-13 11:21:27,681 Node[0] Epoch[11] Batch [320-340]	Speed: 30700.10 samples/sec	accuracy=nan
2022-10-13 11:21:29,811 Node[0] Epoch[11] Batch [340-360]	Speed: 30645.11 samples/sec	accuracy=nan
2022-10-13 11:21:31,935 Node[0] Epoch[11] Batch [360-380]	Speed: 30732.94 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660093216, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 12}}
2022-10-13 11:21:33,216 Node[0] Epoch[11] Time cost=41.888
:::MLLOG {"namespace": "", "time_ms": 1665660093216, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30585.192056796393}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 12}}
:::MLLOG {"namespace": "", "time_ms": 1665660093216, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30585.192056796393, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660093216, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 13}}
2022-10-13 11:21:35,463 Node[0] Epoch[12] Batch [0-20]	Speed: 30638.13 samples/sec	accuracy=nan
2022-10-13 11:21:37,592 Node[0] Epoch[12] Batch [20-40]	Speed: 30667.99 samples/sec	accuracy=nan
2022-10-13 11:21:39,721 Node[0] Epoch[12] Batch [40-60]	Speed: 30649.52 samples/sec	accuracy=nan
2022-10-13 11:21:41,857 Node[0] Epoch[12] Batch [60-80]	Speed: 30566.01 samples/sec	accuracy=nan
2022-10-13 11:21:43,990 Node[0] Epoch[12] Batch [80-100]	Speed: 30609.85 samples/sec	accuracy=nan
2022-10-13 11:21:46,122 Node[0] Epoch[12] Batch [100-120]	Speed: 30618.61 samples/sec	accuracy=nan
2022-10-13 11:21:48,250 Node[0] Epoch[12] Batch [120-140]	Speed: 30673.22 samples/sec	accuracy=nan
2022-10-13 11:21:50,377 Node[0] Epoch[12] Batch [140-160]	Speed: 30689.18 samples/sec	accuracy=nan
2022-10-13 11:21:52,513 Node[0] Epoch[12] Batch [160-180]	Speed: 30565.14 samples/sec	accuracy=nan
2022-10-13 11:21:54,641 Node[0] Epoch[12] Batch [180-200]	Speed: 30674.48 samples/sec	accuracy=nan
2022-10-13 11:21:56,773 Node[0] Epoch[12] Batch [200-220]	Speed: 30615.55 samples/sec	accuracy=nan
2022-10-13 11:21:58,907 Node[0] Epoch[12] Batch [220-240]	Speed: 30592.38 samples/sec	accuracy=nan
2022-10-13 11:22:01,036 Node[0] Epoch[12] Batch [240-260]	Speed: 30668.06 samples/sec	accuracy=nan
2022-10-13 11:22:03,169 Node[0] Epoch[12] Batch [260-280]	Speed: 30606.63 samples/sec	accuracy=nan
2022-10-13 11:22:05,295 Node[0] Epoch[12] Batch [280-300]	Speed: 30702.21 samples/sec	accuracy=nan
2022-10-13 11:22:07,428 Node[0] Epoch[12] Batch [300-320]	Speed: 30609.52 samples/sec	accuracy=nan
2022-10-13 11:22:09,559 Node[0] Epoch[12] Batch [320-340]	Speed: 30626.08 samples/sec	accuracy=nan
2022-10-13 11:22:11,690 Node[0] Epoch[12] Batch [340-360]	Speed: 30639.10 samples/sec	accuracy=nan
2022-10-13 11:22:13,824 Node[0] Epoch[12] Batch [360-380]	Speed: 30592.57 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660135101, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 13}}
2022-10-13 11:22:15,102 Node[0] Epoch[12] Time cost=41.886
:::MLLOG {"namespace": "", "time_ms": 1665660135102, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30587.023521362014}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 13}}
:::MLLOG {"namespace": "", "time_ms": 1665660135103, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30587.023521362014, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660135103, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 14}}
2022-10-13 11:22:17,347 Node[0] Epoch[13] Batch [0-20]	Speed: 30623.31 samples/sec	accuracy=nan
2022-10-13 11:22:19,475 Node[0] Epoch[13] Batch [20-40]	Speed: 30674.97 samples/sec	accuracy=nan
2022-10-13 11:22:21,601 Node[0] Epoch[13] Batch [40-60]	Speed: 30695.95 samples/sec	accuracy=nan
2022-10-13 11:22:23,730 Node[0] Epoch[13] Batch [60-80]	Speed: 30666.20 samples/sec	accuracy=nan
2022-10-13 11:22:25,858 Node[0] Epoch[13] Batch [80-100]	Speed: 30673.92 samples/sec	accuracy=nan
2022-10-13 11:22:27,990 Node[0] Epoch[13] Batch [100-120]	Speed: 30626.10 samples/sec	accuracy=nan
2022-10-13 11:22:30,115 Node[0] Epoch[13] Batch [120-140]	Speed: 30722.52 samples/sec	accuracy=nan
2022-10-13 11:22:32,249 Node[0] Epoch[13] Batch [140-160]	Speed: 30592.76 samples/sec	accuracy=nan
2022-10-13 11:22:34,377 Node[0] Epoch[13] Batch [160-180]	Speed: 30668.43 samples/sec	accuracy=nan
2022-10-13 11:22:36,508 Node[0] Epoch[13] Batch [180-200]	Speed: 30631.26 samples/sec	accuracy=nan
2022-10-13 11:22:38,639 Node[0] Epoch[13] Batch [200-220]	Speed: 30637.05 samples/sec	accuracy=nan
2022-10-13 11:22:40,767 Node[0] Epoch[13] Batch [220-240]	Speed: 30683.10 samples/sec	accuracy=nan
2022-10-13 11:22:42,892 Node[0] Epoch[13] Batch [240-260]	Speed: 30710.29 samples/sec	accuracy=nan
2022-10-13 11:22:45,024 Node[0] Epoch[13] Batch [260-280]	Speed: 30620.96 samples/sec	accuracy=nan
2022-10-13 11:22:47,153 Node[0] Epoch[13] Batch [280-300]	Speed: 30660.20 samples/sec	accuracy=nan
2022-10-13 11:22:49,286 Node[0] Epoch[13] Batch [300-320]	Speed: 30604.46 samples/sec	accuracy=nan
2022-10-13 11:22:51,419 Node[0] Epoch[13] Batch [320-340]	Speed: 30615.43 samples/sec	accuracy=nan
2022-10-13 11:22:53,548 Node[0] Epoch[13] Batch [340-360]	Speed: 30662.67 samples/sec	accuracy=nan
2022-10-13 11:22:55,683 Node[0] Epoch[13] Batch [360-380]	Speed: 30574.64 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660176966, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 14}}
2022-10-13 11:22:56,967 Node[0] Epoch[13] Time cost=41.864
:::MLLOG {"namespace": "", "time_ms": 1665660176967, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30603.252876769762}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 14}}
:::MLLOG {"namespace": "", "time_ms": 1665660176967, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30603.252876769762, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660176967, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 15}}
2022-10-13 11:22:59,205 Node[0] Epoch[14] Batch [0-20]	Speed: 29309.14 samples/sec	accuracy=nan
2022-10-13 11:23:01,336 Node[0] Epoch[14] Batch [20-40]	Speed: 30628.95 samples/sec	accuracy=nan
2022-10-13 11:23:03,471 Node[0] Epoch[14] Batch [40-60]	Speed: 30572.90 samples/sec	accuracy=nan
2022-10-13 11:23:05,600 Node[0] Epoch[14] Batch [60-80]	Speed: 30666.77 samples/sec	accuracy=nan
2022-10-13 11:23:07,732 Node[0] Epoch[14] Batch [80-100]	Speed: 30627.87 samples/sec	accuracy=nan
2022-10-13 11:23:09,864 Node[0] Epoch[14] Batch [100-120]	Speed: 30612.14 samples/sec	accuracy=nan
2022-10-13 11:23:11,992 Node[0] Epoch[14] Batch [120-140]	Speed: 30673.65 samples/sec	accuracy=nan
2022-10-13 11:23:14,123 Node[0] Epoch[14] Batch [140-160]	Speed: 30643.52 samples/sec	accuracy=nan
2022-10-13 11:23:16,258 Node[0] Epoch[14] Batch [160-180]	Speed: 30562.42 samples/sec	accuracy=nan
2022-10-13 11:23:18,388 Node[0] Epoch[14] Batch [180-200]	Speed: 30647.75 samples/sec	accuracy=nan
2022-10-13 11:23:20,519 Node[0] Epoch[14] Batch [200-220]	Speed: 30637.65 samples/sec	accuracy=nan
2022-10-13 11:23:22,648 Node[0] Epoch[14] Batch [220-240]	Speed: 30660.19 samples/sec	accuracy=nan
2022-10-13 11:23:24,775 Node[0] Epoch[14] Batch [240-260]	Speed: 30694.06 samples/sec	accuracy=nan
2022-10-13 11:23:26,906 Node[0] Epoch[14] Batch [260-280]	Speed: 30638.94 samples/sec	accuracy=nan
2022-10-13 11:23:29,041 Node[0] Epoch[14] Batch [280-300]	Speed: 30565.79 samples/sec	accuracy=nan
2022-10-13 11:23:31,173 Node[0] Epoch[14] Batch [300-320]	Speed: 30625.80 samples/sec	accuracy=nan
2022-10-13 11:23:33,306 Node[0] Epoch[14] Batch [320-340]	Speed: 30599.94 samples/sec	accuracy=nan
2022-10-13 11:23:35,433 Node[0] Epoch[14] Batch [340-360]	Speed: 30696.20 samples/sec	accuracy=nan
2022-10-13 11:23:37,563 Node[0] Epoch[14] Batch [360-380]	Speed: 30650.96 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660218837, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 15}}
2022-10-13 11:23:38,837 Node[0] Epoch[14] Time cost=41.870
:::MLLOG {"namespace": "", "time_ms": 1665660218837, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30598.67603974609}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 15}}
:::MLLOG {"namespace": "", "time_ms": 1665660218837, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30598.67603974609, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660218938, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 15}}
2022-10-13 11:23:39,773 Node[0] Epoch[14] Validation-accuracy=0.603457
2022-10-13 11:23:39,773 Node[0] Epoch[14] Validation-correct-count=1257.000000
2022-10-13 11:23:39,773 Node[0] Epoch[14] Validation-total-count=2083.000000
:::MLLOG {"namespace": "", "time_ms": 1665660219773, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 15}}
:::MLLOG {"namespace": "", "time_ms": 1665660219773, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.59506, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 15}}
:::MLLOG {"namespace": "", "time_ms": 1665660219773, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 12}}
:::MLLOG {"namespace": "", "time_ms": 1665660219774, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 16, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665660219774, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 16}}
2022-10-13 11:23:42,056 Node[0] Epoch[15] Batch [0-20]	Speed: 28881.41 samples/sec	accuracy=nan
2022-10-13 11:23:44,183 Node[0] Epoch[15] Batch [20-40]	Speed: 30695.15 samples/sec	accuracy=nan
2022-10-13 11:23:46,314 Node[0] Epoch[15] Batch [40-60]	Speed: 30636.47 samples/sec	accuracy=nan
2022-10-13 11:23:48,444 Node[0] Epoch[15] Batch [60-80]	Speed: 30640.69 samples/sec	accuracy=nan
2022-10-13 11:23:50,574 Node[0] Epoch[15] Batch [80-100]	Speed: 30650.24 samples/sec	accuracy=nan
2022-10-13 11:23:52,702 Node[0] Epoch[15] Batch [100-120]	Speed: 30678.49 samples/sec	accuracy=nan
2022-10-13 11:23:54,834 Node[0] Epoch[15] Batch [120-140]	Speed: 30619.35 samples/sec	accuracy=nan
2022-10-13 11:23:56,966 Node[0] Epoch[15] Batch [140-160]	Speed: 30620.62 samples/sec	accuracy=nan
2022-10-13 11:23:59,097 Node[0] Epoch[15] Batch [160-180]	Speed: 30633.76 samples/sec	accuracy=nan
2022-10-13 11:24:01,223 Node[0] Epoch[15] Batch [180-200]	Speed: 30703.24 samples/sec	accuracy=nan
2022-10-13 11:24:03,350 Node[0] Epoch[15] Batch [200-220]	Speed: 30688.17 samples/sec	accuracy=nan
2022-10-13 11:24:05,477 Node[0] Epoch[15] Batch [220-240]	Speed: 30693.66 samples/sec	accuracy=nan
2022-10-13 11:24:07,602 Node[0] Epoch[15] Batch [240-260]	Speed: 30723.04 samples/sec	accuracy=nan
2022-10-13 11:24:09,731 Node[0] Epoch[15] Batch [260-280]	Speed: 30669.27 samples/sec	accuracy=nan
2022-10-13 11:24:11,855 Node[0] Epoch[15] Batch [280-300]	Speed: 30723.37 samples/sec	accuracy=nan
2022-10-13 11:24:13,984 Node[0] Epoch[15] Batch [300-320]	Speed: 30667.85 samples/sec	accuracy=nan
2022-10-13 11:24:16,114 Node[0] Epoch[15] Batch [320-340]	Speed: 30652.75 samples/sec	accuracy=nan
2022-10-13 11:24:18,243 Node[0] Epoch[15] Batch [340-360]	Speed: 30663.33 samples/sec	accuracy=nan
2022-10-13 11:24:20,371 Node[0] Epoch[15] Batch [360-380]	Speed: 30668.84 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660261646, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 16}}
2022-10-13 11:24:21,646 Node[0] Epoch[15] Time cost=41.872
:::MLLOG {"namespace": "", "time_ms": 1665660261646, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30597.221755180664}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 16}}
:::MLLOG {"namespace": "", "time_ms": 1665660261646, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30597.221755180664, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660261647, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 17}}
2022-10-13 11:24:23,893 Node[0] Epoch[16] Batch [0-20]	Speed: 30612.32 samples/sec	accuracy=nan
2022-10-13 11:24:26,022 Node[0] Epoch[16] Batch [20-40]	Speed: 30664.35 samples/sec	accuracy=nan
2022-10-13 11:24:28,150 Node[0] Epoch[16] Batch [40-60]	Speed: 30678.07 samples/sec	accuracy=nan
2022-10-13 11:24:30,279 Node[0] Epoch[16] Batch [60-80]	Speed: 30651.44 samples/sec	accuracy=nan
2022-10-13 11:24:32,404 Node[0] Epoch[16] Batch [80-100]	Speed: 30720.75 samples/sec	accuracy=nan
2022-10-13 11:24:34,537 Node[0] Epoch[16] Batch [100-120]	Speed: 30610.83 samples/sec	accuracy=nan
2022-10-13 11:24:36,664 Node[0] Epoch[16] Batch [120-140]	Speed: 30688.93 samples/sec	accuracy=nan
2022-10-13 11:24:38,796 Node[0] Epoch[16] Batch [140-160]	Speed: 30622.60 samples/sec	accuracy=nan
2022-10-13 11:24:40,929 Node[0] Epoch[16] Batch [160-180]	Speed: 30607.19 samples/sec	accuracy=nan
2022-10-13 11:24:43,058 Node[0] Epoch[16] Batch [180-200]	Speed: 30659.07 samples/sec	accuracy=nan
2022-10-13 11:24:45,197 Node[0] Epoch[16] Batch [200-220]	Speed: 30514.93 samples/sec	accuracy=nan
2022-10-13 11:24:47,225 Node[0] Epoch[16] Batch [220-240]	Speed: 32185.09 samples/sec	accuracy=nan
2022-10-13 11:24:49,457 Node[0] Epoch[16] Batch [240-260]	Speed: 29254.24 samples/sec	accuracy=nan
2022-10-13 11:24:51,590 Node[0] Epoch[16] Batch [260-280]	Speed: 30597.92 samples/sec	accuracy=nan
2022-10-13 11:24:53,719 Node[0] Epoch[16] Batch [280-300]	Speed: 30669.45 samples/sec	accuracy=nan
2022-10-13 11:24:55,853 Node[0] Epoch[16] Batch [300-320]	Speed: 30591.31 samples/sec	accuracy=nan
2022-10-13 11:24:57,988 Node[0] Epoch[16] Batch [320-340]	Speed: 30576.67 samples/sec	accuracy=nan
2022-10-13 11:25:00,115 Node[0] Epoch[16] Batch [340-360]	Speed: 30681.79 samples/sec	accuracy=nan
2022-10-13 11:25:02,247 Node[0] Epoch[16] Batch [360-380]	Speed: 30625.26 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660303524, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 17}}
2022-10-13 11:25:03,524 Node[0] Epoch[16] Time cost=41.877
:::MLLOG {"namespace": "", "time_ms": 1665660303524, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30593.50661356372}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 17}}
:::MLLOG {"namespace": "", "time_ms": 1665660303524, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30593.50661356372, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660303525, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 18}}
2022-10-13 11:25:05,775 Node[0] Epoch[17] Batch [0-20]	Speed: 30557.03 samples/sec	accuracy=nan
2022-10-13 11:25:07,905 Node[0] Epoch[17] Batch [20-40]	Speed: 30639.68 samples/sec	accuracy=nan
2022-10-13 11:25:10,040 Node[0] Epoch[17] Batch [40-60]	Speed: 30577.17 samples/sec	accuracy=nan
2022-10-13 11:25:12,173 Node[0] Epoch[17] Batch [60-80]	Speed: 30604.61 samples/sec	accuracy=nan
2022-10-13 11:25:14,302 Node[0] Epoch[17] Batch [80-100]	Speed: 30665.53 samples/sec	accuracy=nan
2022-10-13 11:25:16,435 Node[0] Epoch[17] Batch [100-120]	Speed: 30603.56 samples/sec	accuracy=nan
2022-10-13 11:25:18,563 Node[0] Epoch[17] Batch [120-140]	Speed: 30680.04 samples/sec	accuracy=nan
2022-10-13 11:25:20,695 Node[0] Epoch[17] Batch [140-160]	Speed: 30616.96 samples/sec	accuracy=nan
2022-10-13 11:25:22,820 Node[0] Epoch[17] Batch [160-180]	Speed: 30726.58 samples/sec	accuracy=nan
2022-10-13 11:25:24,947 Node[0] Epoch[17] Batch [180-200]	Speed: 30685.85 samples/sec	accuracy=nan
2022-10-13 11:25:27,082 Node[0] Epoch[17] Batch [200-220]	Speed: 30570.98 samples/sec	accuracy=nan
2022-10-13 11:25:29,205 Node[0] Epoch[17] Batch [220-240]	Speed: 30760.11 samples/sec	accuracy=nan
2022-10-13 11:25:31,338 Node[0] Epoch[17] Batch [240-260]	Speed: 30600.47 samples/sec	accuracy=nan
2022-10-13 11:25:33,462 Node[0] Epoch[17] Batch [260-280]	Speed: 30739.35 samples/sec	accuracy=nan
2022-10-13 11:25:35,591 Node[0] Epoch[17] Batch [280-300]	Speed: 30651.57 samples/sec	accuracy=nan
2022-10-13 11:25:37,722 Node[0] Epoch[17] Batch [300-320]	Speed: 30630.39 samples/sec	accuracy=nan
2022-10-13 11:25:39,854 Node[0] Epoch[17] Batch [320-340]	Speed: 30632.18 samples/sec	accuracy=nan
2022-10-13 11:25:41,982 Node[0] Epoch[17] Batch [340-360]	Speed: 30668.45 samples/sec	accuracy=nan
2022-10-13 11:25:44,117 Node[0] Epoch[17] Batch [360-380]	Speed: 30579.32 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660345392, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 18}}
2022-10-13 11:25:45,392 Node[0] Epoch[17] Time cost=41.867
:::MLLOG {"namespace": "", "time_ms": 1665660345392, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30600.93204854841}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 18}}
:::MLLOG {"namespace": "", "time_ms": 1665660345392, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30600.93204854841, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660345392, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 19}}
2022-10-13 11:25:47,638 Node[0] Epoch[18] Batch [0-20]	Speed: 30636.24 samples/sec	accuracy=nan
2022-10-13 11:25:49,766 Node[0] Epoch[18] Batch [20-40]	Speed: 30672.70 samples/sec	accuracy=nan
2022-10-13 11:25:51,897 Node[0] Epoch[18] Batch [40-60]	Speed: 30633.49 samples/sec	accuracy=nan
2022-10-13 11:25:54,031 Node[0] Epoch[18] Batch [60-80]	Speed: 30591.54 samples/sec	accuracy=nan
2022-10-13 11:25:56,158 Node[0] Epoch[18] Batch [80-100]	Speed: 30684.34 samples/sec	accuracy=nan
2022-10-13 11:25:58,292 Node[0] Epoch[18] Batch [100-120]	Speed: 30599.43 samples/sec	accuracy=nan
2022-10-13 11:26:00,427 Node[0] Epoch[18] Batch [120-140]	Speed: 30575.08 samples/sec	accuracy=nan
2022-10-13 11:26:02,559 Node[0] Epoch[18] Batch [140-160]	Speed: 30610.12 samples/sec	accuracy=nan
2022-10-13 11:26:04,690 Node[0] Epoch[18] Batch [160-180]	Speed: 30641.85 samples/sec	accuracy=nan
2022-10-13 11:26:06,819 Node[0] Epoch[18] Batch [180-200]	Speed: 30663.63 samples/sec	accuracy=nan
2022-10-13 11:26:08,752 Node[0] Epoch[18] Batch [200-220]	Speed: 33756.22 samples/sec	accuracy=nan
2022-10-13 11:26:11,076 Node[0] Epoch[18] Batch [220-240]	Speed: 28091.99 samples/sec	accuracy=nan
2022-10-13 11:26:13,212 Node[0] Epoch[18] Batch [240-260]	Speed: 30567.89 samples/sec	accuracy=nan
2022-10-13 11:26:15,339 Node[0] Epoch[18] Batch [260-280]	Speed: 30696.21 samples/sec	accuracy=nan
2022-10-13 11:26:17,464 Node[0] Epoch[18] Batch [280-300]	Speed: 30709.67 samples/sec	accuracy=nan
2022-10-13 11:26:19,591 Node[0] Epoch[18] Batch [300-320]	Speed: 30697.06 samples/sec	accuracy=nan
2022-10-13 11:26:21,718 Node[0] Epoch[18] Batch [320-340]	Speed: 30686.89 samples/sec	accuracy=nan
2022-10-13 11:26:23,848 Node[0] Epoch[18] Batch [340-360]	Speed: 30651.24 samples/sec	accuracy=nan
2022-10-13 11:26:25,972 Node[0] Epoch[18] Batch [360-380]	Speed: 30725.36 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660387247, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 19}}
2022-10-13 11:26:27,247 Node[0] Epoch[18] Time cost=41.855
:::MLLOG {"namespace": "", "time_ms": 1665660387247, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30609.845028246957}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 19}}
:::MLLOG {"namespace": "", "time_ms": 1665660387247, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30609.845028246957, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660387348, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 19}}
2022-10-13 11:26:28,135 Node[0] Epoch[18] Validation-accuracy=0.646663
2022-10-13 11:26:28,135 Node[0] Epoch[18] Validation-correct-count=1347.000000
2022-10-13 11:26:28,135 Node[0] Epoch[18] Validation-total-count=2083.000000
:::MLLOG {"namespace": "", "time_ms": 1665660388162, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 19}}
:::MLLOG {"namespace": "", "time_ms": 1665660388162, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.64648, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 19}}
:::MLLOG {"namespace": "", "time_ms": 1665660388162, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 16}}
:::MLLOG {"namespace": "", "time_ms": 1665660388163, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 20, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665660388163, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 20}}
2022-10-13 11:26:30,440 Node[0] Epoch[19] Batch [0-20]	Speed: 28876.31 samples/sec	accuracy=nan
2022-10-13 11:26:32,571 Node[0] Epoch[19] Batch [20-40]	Speed: 30625.72 samples/sec	accuracy=nan
2022-10-13 11:26:34,702 Node[0] Epoch[19] Batch [40-60]	Speed: 30634.84 samples/sec	accuracy=nan
2022-10-13 11:26:36,831 Node[0] Epoch[19] Batch [60-80]	Speed: 30668.36 samples/sec	accuracy=nan
2022-10-13 11:26:38,961 Node[0] Epoch[19] Batch [80-100]	Speed: 30640.15 samples/sec	accuracy=nan
2022-10-13 11:26:41,094 Node[0] Epoch[19] Batch [100-120]	Speed: 30602.18 samples/sec	accuracy=nan
2022-10-13 11:26:43,224 Node[0] Epoch[19] Batch [120-140]	Speed: 30652.26 samples/sec	accuracy=nan
2022-10-13 11:26:45,357 Node[0] Epoch[19] Batch [140-160]	Speed: 30602.12 samples/sec	accuracy=nan
2022-10-13 11:26:47,490 Node[0] Epoch[19] Batch [160-180]	Speed: 30606.15 samples/sec	accuracy=nan
2022-10-13 11:26:49,617 Node[0] Epoch[19] Batch [180-200]	Speed: 30697.70 samples/sec	accuracy=nan
2022-10-13 11:26:51,749 Node[0] Epoch[19] Batch [200-220]	Speed: 30613.41 samples/sec	accuracy=nan
2022-10-13 11:26:53,877 Node[0] Epoch[19] Batch [220-240]	Speed: 30681.62 samples/sec	accuracy=nan
2022-10-13 11:26:56,009 Node[0] Epoch[19] Batch [240-260]	Speed: 30621.28 samples/sec	accuracy=nan
2022-10-13 11:26:58,138 Node[0] Epoch[19] Batch [260-280]	Speed: 30654.42 samples/sec	accuracy=nan
2022-10-13 11:27:00,264 Node[0] Epoch[19] Batch [280-300]	Speed: 30699.98 samples/sec	accuracy=nan
2022-10-13 11:27:02,397 Node[0] Epoch[19] Batch [300-320]	Speed: 30618.10 samples/sec	accuracy=nan
2022-10-13 11:27:04,535 Node[0] Epoch[19] Batch [320-340]	Speed: 30525.33 samples/sec	accuracy=nan
2022-10-13 11:27:06,669 Node[0] Epoch[19] Batch [340-360]	Speed: 30586.22 samples/sec	accuracy=nan
2022-10-13 11:27:08,806 Node[0] Epoch[19] Batch [360-380]	Speed: 30550.99 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660430085, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 20}}
2022-10-13 11:27:10,085 Node[0] Epoch[19] Time cost=41.922
:::MLLOG {"namespace": "", "time_ms": 1665660430085, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30560.646547433407}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 20}}
:::MLLOG {"namespace": "", "time_ms": 1665660430085, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30560.646547433407, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660430085, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 21}}
2022-10-13 11:27:12,331 Node[0] Epoch[20] Batch [0-20]	Speed: 30626.63 samples/sec	accuracy=nan
2022-10-13 11:27:14,466 Node[0] Epoch[20] Batch [20-40]	Speed: 30579.07 samples/sec	accuracy=nan
2022-10-13 11:27:16,600 Node[0] Epoch[20] Batch [40-60]	Speed: 30590.91 samples/sec	accuracy=nan
2022-10-13 11:27:18,733 Node[0] Epoch[20] Batch [60-80]	Speed: 30593.46 samples/sec	accuracy=nan
2022-10-13 11:27:20,861 Node[0] Epoch[20] Batch [80-100]	Speed: 30682.16 samples/sec	accuracy=nan
2022-10-13 11:27:22,996 Node[0] Epoch[20] Batch [100-120]	Speed: 30582.72 samples/sec	accuracy=nan
2022-10-13 11:27:25,125 Node[0] Epoch[20] Batch [120-140]	Speed: 30661.38 samples/sec	accuracy=nan
2022-10-13 11:27:27,255 Node[0] Epoch[20] Batch [140-160]	Speed: 30643.83 samples/sec	accuracy=nan
2022-10-13 11:27:29,383 Node[0] Epoch[20] Batch [160-180]	Speed: 30677.84 samples/sec	accuracy=nan
2022-10-13 11:27:31,517 Node[0] Epoch[20] Batch [180-200]	Speed: 30592.41 samples/sec	accuracy=nan
2022-10-13 11:27:33,642 Node[0] Epoch[20] Batch [200-220]	Speed: 30718.84 samples/sec	accuracy=nan
2022-10-13 11:27:35,767 Node[0] Epoch[20] Batch [220-240]	Speed: 30716.45 samples/sec	accuracy=nan
2022-10-13 11:27:37,896 Node[0] Epoch[20] Batch [240-260]	Speed: 30657.84 samples/sec	accuracy=nan
2022-10-13 11:27:40,031 Node[0] Epoch[20] Batch [260-280]	Speed: 30582.35 samples/sec	accuracy=nan
2022-10-13 11:27:42,159 Node[0] Epoch[20] Batch [280-300]	Speed: 30672.98 samples/sec	accuracy=nan
2022-10-13 11:27:44,297 Node[0] Epoch[20] Batch [300-320]	Speed: 30541.72 samples/sec	accuracy=nan
2022-10-13 11:27:46,425 Node[0] Epoch[20] Batch [320-340]	Speed: 30664.11 samples/sec	accuracy=nan
2022-10-13 11:27:48,552 Node[0] Epoch[20] Batch [340-360]	Speed: 30701.34 samples/sec	accuracy=nan
2022-10-13 11:27:50,681 Node[0] Epoch[20] Batch [360-380]	Speed: 30664.45 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660471962, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 21}}
2022-10-13 11:27:51,962 Node[0] Epoch[20] Time cost=41.877
:::MLLOG {"namespace": "", "time_ms": 1665660471962, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30593.469165376704}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 21}}
:::MLLOG {"namespace": "", "time_ms": 1665660471963, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30593.469165376704, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660471963, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 22}}
2022-10-13 11:27:54,207 Node[0] Epoch[21] Batch [0-20]	Speed: 30595.01 samples/sec	accuracy=nan
2022-10-13 11:27:56,333 Node[0] Epoch[21] Batch [20-40]	Speed: 30698.01 samples/sec	accuracy=nan
2022-10-13 11:27:58,464 Node[0] Epoch[21] Batch [40-60]	Speed: 30644.58 samples/sec	accuracy=nan
2022-10-13 11:28:00,594 Node[0] Epoch[21] Batch [60-80]	Speed: 30639.75 samples/sec	accuracy=nan
2022-10-13 11:28:02,727 Node[0] Epoch[21] Batch [80-100]	Speed: 30611.02 samples/sec	accuracy=nan
2022-10-13 11:28:04,860 Node[0] Epoch[21] Batch [100-120]	Speed: 30597.79 samples/sec	accuracy=nan
2022-10-13 11:28:06,995 Node[0] Epoch[21] Batch [120-140]	Speed: 30578.06 samples/sec	accuracy=nan
2022-10-13 11:28:09,124 Node[0] Epoch[21] Batch [140-160]	Speed: 30659.27 samples/sec	accuracy=nan
2022-10-13 11:28:11,252 Node[0] Epoch[21] Batch [160-180]	Speed: 30676.19 samples/sec	accuracy=nan
2022-10-13 11:28:13,384 Node[0] Epoch[21] Batch [180-200]	Speed: 30625.26 samples/sec	accuracy=nan
2022-10-13 11:28:15,513 Node[0] Epoch[21] Batch [200-220]	Speed: 30664.06 samples/sec	accuracy=nan
2022-10-13 11:28:17,640 Node[0] Epoch[21] Batch [220-240]	Speed: 30689.47 samples/sec	accuracy=nan
2022-10-13 11:28:19,770 Node[0] Epoch[21] Batch [240-260]	Speed: 30649.96 samples/sec	accuracy=nan
2022-10-13 11:28:21,895 Node[0] Epoch[21] Batch [260-280]	Speed: 30713.61 samples/sec	accuracy=nan
2022-10-13 11:28:24,024 Node[0] Epoch[21] Batch [280-300]	Speed: 30667.07 samples/sec	accuracy=nan
2022-10-13 11:28:26,156 Node[0] Epoch[21] Batch [300-320]	Speed: 30617.03 samples/sec	accuracy=nan
2022-10-13 11:28:28,284 Node[0] Epoch[21] Batch [320-340]	Speed: 30682.14 samples/sec	accuracy=nan
2022-10-13 11:28:30,419 Node[0] Epoch[21] Batch [340-360]	Speed: 30566.78 samples/sec	accuracy=nan
2022-10-13 11:28:32,546 Node[0] Epoch[21] Batch [360-380]	Speed: 30692.91 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660513823, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 22}}
2022-10-13 11:28:33,823 Node[0] Epoch[21] Time cost=41.860
:::MLLOG {"namespace": "", "time_ms": 1665660513823, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30605.767025260106}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 22}}
:::MLLOG {"namespace": "", "time_ms": 1665660513823, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30605.767025260106, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660513824, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 23}}
2022-10-13 11:28:36,067 Node[0] Epoch[22] Batch [0-20]	Speed: 30671.79 samples/sec	accuracy=nan
2022-10-13 11:28:38,200 Node[0] Epoch[22] Batch [20-40]	Speed: 30593.79 samples/sec	accuracy=nan
2022-10-13 11:28:40,326 Node[0] Epoch[22] Batch [40-60]	Speed: 30709.45 samples/sec	accuracy=nan
2022-10-13 11:28:42,458 Node[0] Epoch[22] Batch [60-80]	Speed: 30627.10 samples/sec	accuracy=nan
2022-10-13 11:28:44,592 Node[0] Epoch[22] Batch [80-100]	Speed: 30585.86 samples/sec	accuracy=nan
2022-10-13 11:28:46,726 Node[0] Epoch[22] Batch [100-120]	Speed: 30588.32 samples/sec	accuracy=nan
2022-10-13 11:28:48,859 Node[0] Epoch[22] Batch [120-140]	Speed: 30600.84 samples/sec	accuracy=nan
2022-10-13 11:28:50,991 Node[0] Epoch[22] Batch [140-160]	Speed: 30617.67 samples/sec	accuracy=nan
2022-10-13 11:28:53,126 Node[0] Epoch[22] Batch [160-180]	Speed: 30581.29 samples/sec	accuracy=nan
2022-10-13 11:28:55,255 Node[0] Epoch[22] Batch [180-200]	Speed: 30660.86 samples/sec	accuracy=nan
2022-10-13 11:28:57,393 Node[0] Epoch[22] Batch [200-220]	Speed: 30536.15 samples/sec	accuracy=nan
2022-10-13 11:28:59,531 Node[0] Epoch[22] Batch [220-240]	Speed: 30536.59 samples/sec	accuracy=nan
2022-10-13 11:29:01,664 Node[0] Epoch[22] Batch [240-260]	Speed: 30605.86 samples/sec	accuracy=nan
2022-10-13 11:29:03,791 Node[0] Epoch[22] Batch [260-280]	Speed: 30687.19 samples/sec	accuracy=nan
2022-10-13 11:29:05,921 Node[0] Epoch[22] Batch [280-300]	Speed: 30652.54 samples/sec	accuracy=nan
2022-10-13 11:29:08,049 Node[0] Epoch[22] Batch [300-320]	Speed: 30673.41 samples/sec	accuracy=nan
2022-10-13 11:29:10,082 Node[0] Epoch[22] Batch [320-340]	Speed: 32100.64 samples/sec	accuracy=nan
2022-10-13 11:29:12,311 Node[0] Epoch[22] Batch [340-360]	Speed: 29286.51 samples/sec	accuracy=nan
2022-10-13 11:29:14,445 Node[0] Epoch[22] Batch [360-380]	Speed: 30601.90 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660555726, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 23}}
2022-10-13 11:29:15,726 Node[0] Epoch[22] Time cost=41.902
:::MLLOG {"namespace": "", "time_ms": 1665660555726, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30575.300369808036}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 23}}
:::MLLOG {"namespace": "", "time_ms": 1665660555726, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30575.300369808036, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660555826, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 23}}
2022-10-13 11:29:16,632 Node[0] Epoch[22] Validation-accuracy=0.688580
2022-10-13 11:29:16,633 Node[0] Epoch[22] Validation-correct-count=1435.000000
2022-10-13 11:29:16,633 Node[0] Epoch[22] Validation-total-count=2084.000000
:::MLLOG {"namespace": "", "time_ms": 1665660556651, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 23}}
:::MLLOG {"namespace": "", "time_ms": 1665660556652, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.69416, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 23}}
:::MLLOG {"namespace": "", "time_ms": 1665660556652, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 20}}
:::MLLOG {"namespace": "", "time_ms": 1665660556653, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 24, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665660556654, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 24}}
2022-10-13 11:29:18,893 Node[0] Epoch[23] Batch [0-20]	Speed: 29325.44 samples/sec	accuracy=nan
2022-10-13 11:29:20,926 Node[0] Epoch[23] Batch [20-40]	Speed: 32113.75 samples/sec	accuracy=nan
2022-10-13 11:29:23,148 Node[0] Epoch[23] Batch [40-60]	Speed: 29379.85 samples/sec	accuracy=nan
2022-10-13 11:29:25,279 Node[0] Epoch[23] Batch [60-80]	Speed: 30623.46 samples/sec	accuracy=nan
2022-10-13 11:29:27,409 Node[0] Epoch[23] Batch [80-100]	Speed: 30648.30 samples/sec	accuracy=nan
2022-10-13 11:29:29,538 Node[0] Epoch[23] Batch [100-120]	Speed: 30671.45 samples/sec	accuracy=nan
2022-10-13 11:29:31,673 Node[0] Epoch[23] Batch [120-140]	Speed: 30567.76 samples/sec	accuracy=nan
2022-10-13 11:29:33,808 Node[0] Epoch[23] Batch [140-160]	Speed: 30585.61 samples/sec	accuracy=nan
2022-10-13 11:29:35,940 Node[0] Epoch[23] Batch [160-180]	Speed: 30613.93 samples/sec	accuracy=nan
2022-10-13 11:29:38,075 Node[0] Epoch[23] Batch [180-200]	Speed: 30579.10 samples/sec	accuracy=nan
2022-10-13 11:29:40,204 Node[0] Epoch[23] Batch [200-220]	Speed: 30651.18 samples/sec	accuracy=nan
2022-10-13 11:29:42,334 Node[0] Epoch[23] Batch [220-240]	Speed: 30647.27 samples/sec	accuracy=nan
2022-10-13 11:29:44,466 Node[0] Epoch[23] Batch [240-260]	Speed: 30629.83 samples/sec	accuracy=nan
2022-10-13 11:29:46,597 Node[0] Epoch[23] Batch [260-280]	Speed: 30629.74 samples/sec	accuracy=nan
2022-10-13 11:29:48,726 Node[0] Epoch[23] Batch [280-300]	Speed: 30666.44 samples/sec	accuracy=nan
2022-10-13 11:29:50,859 Node[0] Epoch[23] Batch [300-320]	Speed: 30596.22 samples/sec	accuracy=nan
2022-10-13 11:29:52,997 Node[0] Epoch[23] Batch [320-340]	Speed: 30534.34 samples/sec	accuracy=nan
2022-10-13 11:29:55,130 Node[0] Epoch[23] Batch [340-360]	Speed: 30608.45 samples/sec	accuracy=nan
2022-10-13 11:29:57,258 Node[0] Epoch[23] Batch [360-380]	Speed: 30674.15 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660598534, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 24}}
2022-10-13 11:29:58,534 Node[0] Epoch[23] Time cost=41.880
:::MLLOG {"namespace": "", "time_ms": 1665660598534, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30591.70101859941}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 24}}
:::MLLOG {"namespace": "", "time_ms": 1665660598534, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30591.70101859941, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660598534, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 25}}
2022-10-13 11:30:00,787 Node[0] Epoch[24] Batch [0-20]	Speed: 30537.25 samples/sec	accuracy=nan
2022-10-13 11:30:02,915 Node[0] Epoch[24] Batch [20-40]	Speed: 30676.11 samples/sec	accuracy=nan
2022-10-13 11:30:05,046 Node[0] Epoch[24] Batch [40-60]	Speed: 30635.21 samples/sec	accuracy=nan
2022-10-13 11:30:07,079 Node[0] Epoch[24] Batch [60-80]	Speed: 32103.13 samples/sec	accuracy=nan
2022-10-13 11:30:09,311 Node[0] Epoch[24] Batch [80-100]	Speed: 29250.29 samples/sec	accuracy=nan
2022-10-13 11:30:11,449 Node[0] Epoch[24] Batch [100-120]	Speed: 30531.77 samples/sec	accuracy=nan
2022-10-13 11:30:13,579 Node[0] Epoch[24] Batch [120-140]	Speed: 30652.83 samples/sec	accuracy=nan
2022-10-13 11:30:15,717 Node[0] Epoch[24] Batch [140-160]	Speed: 30530.26 samples/sec	accuracy=nan
2022-10-13 11:30:17,845 Node[0] Epoch[24] Batch [160-180]	Speed: 30678.18 samples/sec	accuracy=nan
2022-10-13 11:30:19,974 Node[0] Epoch[24] Batch [180-200]	Speed: 30651.84 samples/sec	accuracy=nan
2022-10-13 11:30:22,106 Node[0] Epoch[24] Batch [200-220]	Speed: 30626.07 samples/sec	accuracy=nan
2022-10-13 11:30:24,236 Node[0] Epoch[24] Batch [220-240]	Speed: 30645.64 samples/sec	accuracy=nan
2022-10-13 11:30:26,370 Node[0] Epoch[24] Batch [240-260]	Speed: 30585.27 samples/sec	accuracy=nan
2022-10-13 11:30:28,499 Node[0] Epoch[24] Batch [260-280]	Speed: 30668.97 samples/sec	accuracy=nan
2022-10-13 11:30:30,629 Node[0] Epoch[24] Batch [280-300]	Speed: 30645.21 samples/sec	accuracy=nan
2022-10-13 11:30:32,765 Node[0] Epoch[24] Batch [300-320]	Speed: 30559.16 samples/sec	accuracy=nan
2022-10-13 11:30:34,895 Node[0] Epoch[24] Batch [320-340]	Speed: 30648.52 samples/sec	accuracy=nan
2022-10-13 11:30:37,024 Node[0] Epoch[24] Batch [340-360]	Speed: 30670.99 samples/sec	accuracy=nan
2022-10-13 11:30:39,160 Node[0] Epoch[24] Batch [360-380]	Speed: 30553.86 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660640437, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 25}}
2022-10-13 11:30:40,437 Node[0] Epoch[24] Time cost=41.903
:::MLLOG {"namespace": "", "time_ms": 1665660640437, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30574.552314608183}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 25}}
:::MLLOG {"namespace": "", "time_ms": 1665660640438, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30574.552314608183, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660640438, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 26}}
2022-10-13 11:30:42,685 Node[0] Epoch[25] Batch [0-20]	Speed: 30588.18 samples/sec	accuracy=nan
2022-10-13 11:30:44,816 Node[0] Epoch[25] Batch [20-40]	Speed: 30619.54 samples/sec	accuracy=nan
2022-10-13 11:30:46,946 Node[0] Epoch[25] Batch [40-60]	Speed: 30649.07 samples/sec	accuracy=nan
2022-10-13 11:30:49,074 Node[0] Epoch[25] Batch [60-80]	Speed: 30683.93 samples/sec	accuracy=nan
2022-10-13 11:30:51,203 Node[0] Epoch[25] Batch [80-100]	Speed: 30667.48 samples/sec	accuracy=nan
2022-10-13 11:30:53,335 Node[0] Epoch[25] Batch [100-120]	Speed: 30608.90 samples/sec	accuracy=nan
2022-10-13 11:30:55,463 Node[0] Epoch[25] Batch [120-140]	Speed: 30679.67 samples/sec	accuracy=nan
2022-10-13 11:30:57,599 Node[0] Epoch[25] Batch [140-160]	Speed: 30562.58 samples/sec	accuracy=nan
2022-10-13 11:30:59,729 Node[0] Epoch[25] Batch [160-180]	Speed: 30650.84 samples/sec	accuracy=nan
2022-10-13 11:31:01,861 Node[0] Epoch[25] Batch [180-200]	Speed: 30613.93 samples/sec	accuracy=nan
2022-10-13 11:31:03,990 Node[0] Epoch[25] Batch [200-220]	Speed: 30660.51 samples/sec	accuracy=nan
2022-10-13 11:31:06,117 Node[0] Epoch[25] Batch [220-240]	Speed: 30700.42 samples/sec	accuracy=nan
2022-10-13 11:31:08,252 Node[0] Epoch[25] Batch [240-260]	Speed: 30573.92 samples/sec	accuracy=nan
2022-10-13 11:31:10,384 Node[0] Epoch[25] Batch [260-280]	Speed: 30618.43 samples/sec	accuracy=nan
2022-10-13 11:31:12,517 Node[0] Epoch[25] Batch [280-300]	Speed: 30602.02 samples/sec	accuracy=nan
2022-10-13 11:31:14,650 Node[0] Epoch[25] Batch [300-320]	Speed: 30608.46 samples/sec	accuracy=nan
2022-10-13 11:31:16,781 Node[0] Epoch[25] Batch [320-340]	Speed: 30629.71 samples/sec	accuracy=nan
2022-10-13 11:31:18,913 Node[0] Epoch[25] Batch [340-360]	Speed: 30613.33 samples/sec	accuracy=nan
2022-10-13 11:31:21,048 Node[0] Epoch[25] Batch [360-380]	Speed: 30588.96 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660682327, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 26}}
2022-10-13 11:31:22,327 Node[0] Epoch[25] Time cost=41.888
:::MLLOG {"namespace": "", "time_ms": 1665660682327, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30585.221825046694}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 26}}
:::MLLOG {"namespace": "", "time_ms": 1665660682327, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30585.221825046694, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660682327, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 27}}
2022-10-13 11:31:24,570 Node[0] Epoch[26] Batch [0-20]	Speed: 30675.87 samples/sec	accuracy=nan
2022-10-13 11:31:26,701 Node[0] Epoch[26] Batch [20-40]	Speed: 30633.76 samples/sec	accuracy=nan
2022-10-13 11:31:28,839 Node[0] Epoch[26] Batch [40-60]	Speed: 30529.22 samples/sec	accuracy=nan
2022-10-13 11:31:30,964 Node[0] Epoch[26] Batch [60-80]	Speed: 30722.01 samples/sec	accuracy=nan
2022-10-13 11:31:33,096 Node[0] Epoch[26] Batch [80-100]	Speed: 30624.50 samples/sec	accuracy=nan
2022-10-13 11:31:35,229 Node[0] Epoch[26] Batch [100-120]	Speed: 30600.58 samples/sec	accuracy=nan
2022-10-13 11:31:37,362 Node[0] Epoch[26] Batch [120-140]	Speed: 30606.87 samples/sec	accuracy=nan
2022-10-13 11:31:39,489 Node[0] Epoch[26] Batch [140-160]	Speed: 30688.59 samples/sec	accuracy=nan
2022-10-13 11:31:41,624 Node[0] Epoch[26] Batch [160-180]	Speed: 30573.95 samples/sec	accuracy=nan
2022-10-13 11:31:43,758 Node[0] Epoch[26] Batch [180-200]	Speed: 30589.88 samples/sec	accuracy=nan
2022-10-13 11:31:45,889 Node[0] Epoch[26] Batch [200-220]	Speed: 30632.60 samples/sec	accuracy=nan
2022-10-13 11:31:48,019 Node[0] Epoch[26] Batch [220-240]	Speed: 30647.31 samples/sec	accuracy=nan
2022-10-13 11:31:50,152 Node[0] Epoch[26] Batch [240-260]	Speed: 30613.81 samples/sec	accuracy=nan
2022-10-13 11:31:52,275 Node[0] Epoch[26] Batch [260-280]	Speed: 30740.62 samples/sec	accuracy=nan
2022-10-13 11:31:54,405 Node[0] Epoch[26] Batch [280-300]	Speed: 30645.63 samples/sec	accuracy=nan
2022-10-13 11:31:56,535 Node[0] Epoch[26] Batch [300-320]	Speed: 30655.36 samples/sec	accuracy=nan
2022-10-13 11:31:58,664 Node[0] Epoch[26] Batch [320-340]	Speed: 30657.95 samples/sec	accuracy=nan
2022-10-13 11:32:00,797 Node[0] Epoch[26] Batch [340-360]	Speed: 30602.18 samples/sec	accuracy=nan
2022-10-13 11:32:02,931 Node[0] Epoch[26] Batch [360-380]	Speed: 30591.60 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660724208, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 27}}
2022-10-13 11:32:04,208 Node[0] Epoch[26] Time cost=41.881
:::MLLOG {"namespace": "", "time_ms": 1665660724208, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30590.741268005124}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 27}}
:::MLLOG {"namespace": "", "time_ms": 1665660724208, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30590.741268005124, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660724309, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 27}}
2022-10-13 11:32:05,064 Node[0] Epoch[26] Validation-accuracy=0.732117
2022-10-13 11:32:05,064 Node[0] Epoch[26] Validation-correct-count=1525.000000
2022-10-13 11:32:05,064 Node[0] Epoch[26] Validation-total-count=2083.000000
:::MLLOG {"namespace": "", "time_ms": 1665660725141, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 27}}
:::MLLOG {"namespace": "", "time_ms": 1665660725142, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.73172, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 27}}
:::MLLOG {"namespace": "", "time_ms": 1665660725142, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 24}}
:::MLLOG {"namespace": "", "time_ms": 1665660725142, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 28, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665660725142, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 28}}
2022-10-13 11:32:07,428 Node[0] Epoch[27] Batch [0-20]	Speed: 29024.81 samples/sec	accuracy=nan
2022-10-13 11:32:09,562 Node[0] Epoch[27] Batch [20-40]	Speed: 30592.47 samples/sec	accuracy=nan
2022-10-13 11:32:11,696 Node[0] Epoch[27] Batch [40-60]	Speed: 30586.63 samples/sec	accuracy=nan
2022-10-13 11:32:13,629 Node[0] Epoch[27] Batch [60-80]	Speed: 33775.09 samples/sec	accuracy=nan
2022-10-13 11:32:15,955 Node[0] Epoch[27] Batch [80-100]	Speed: 28066.41 samples/sec	accuracy=nan
2022-10-13 11:32:18,089 Node[0] Epoch[27] Batch [100-120]	Speed: 30583.68 samples/sec	accuracy=nan
2022-10-13 11:32:20,222 Node[0] Epoch[27] Batch [120-140]	Speed: 30601.45 samples/sec	accuracy=nan
2022-10-13 11:32:22,357 Node[0] Epoch[27] Batch [140-160]	Speed: 30585.53 samples/sec	accuracy=nan
2022-10-13 11:32:24,487 Node[0] Epoch[27] Batch [160-180]	Speed: 30641.64 samples/sec	accuracy=nan
2022-10-13 11:32:26,619 Node[0] Epoch[27] Batch [180-200]	Speed: 30620.98 samples/sec	accuracy=nan
2022-10-13 11:32:28,752 Node[0] Epoch[27] Batch [200-220]	Speed: 30606.71 samples/sec	accuracy=nan
2022-10-13 11:32:30,883 Node[0] Epoch[27] Batch [220-240]	Speed: 30638.97 samples/sec	accuracy=nan
2022-10-13 11:32:33,016 Node[0] Epoch[27] Batch [240-260]	Speed: 30594.20 samples/sec	accuracy=nan
2022-10-13 11:32:35,145 Node[0] Epoch[27] Batch [260-280]	Speed: 30667.65 samples/sec	accuracy=nan
2022-10-13 11:32:37,282 Node[0] Epoch[27] Batch [280-300]	Speed: 30545.26 samples/sec	accuracy=nan
2022-10-13 11:32:39,413 Node[0] Epoch[27] Batch [300-320]	Speed: 30630.58 samples/sec	accuracy=nan
2022-10-13 11:32:41,547 Node[0] Epoch[27] Batch [320-340]	Speed: 30597.07 samples/sec	accuracy=nan
2022-10-13 11:32:43,679 Node[0] Epoch[27] Batch [340-360]	Speed: 30609.94 samples/sec	accuracy=nan
2022-10-13 11:32:45,809 Node[0] Epoch[27] Batch [360-380]	Speed: 30654.22 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660767084, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 28}}
2022-10-13 11:32:47,084 Node[0] Epoch[27] Time cost=41.942
:::MLLOG {"namespace": "", "time_ms": 1665660767084, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30546.120497514406}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 28}}
:::MLLOG {"namespace": "", "time_ms": 1665660767084, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30546.120497514406, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660767085, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 29}}
2022-10-13 11:32:49,337 Node[0] Epoch[28] Batch [0-20]	Speed: 30532.60 samples/sec	accuracy=nan
2022-10-13 11:32:51,373 Node[0] Epoch[28] Batch [20-40]	Speed: 32069.03 samples/sec	accuracy=nan
2022-10-13 11:32:53,602 Node[0] Epoch[28] Batch [40-60]	Speed: 29282.72 samples/sec	accuracy=nan
2022-10-13 11:32:55,732 Node[0] Epoch[28] Batch [60-80]	Speed: 30645.57 samples/sec	accuracy=nan
2022-10-13 11:32:57,860 Node[0] Epoch[28] Batch [80-100]	Speed: 30690.16 samples/sec	accuracy=nan
2022-10-13 11:32:59,994 Node[0] Epoch[28] Batch [100-120]	Speed: 30577.11 samples/sec	accuracy=nan
2022-10-13 11:33:02,129 Node[0] Epoch[28] Batch [120-140]	Speed: 30580.24 samples/sec	accuracy=nan
2022-10-13 11:33:04,263 Node[0] Epoch[28] Batch [140-160]	Speed: 30590.09 samples/sec	accuracy=nan
2022-10-13 11:33:06,394 Node[0] Epoch[28] Batch [160-180]	Speed: 30640.65 samples/sec	accuracy=nan
2022-10-13 11:33:08,524 Node[0] Epoch[28] Batch [180-200]	Speed: 30645.61 samples/sec	accuracy=nan
2022-10-13 11:33:10,653 Node[0] Epoch[28] Batch [200-220]	Speed: 30665.15 samples/sec	accuracy=nan
2022-10-13 11:33:12,688 Node[0] Epoch[28] Batch [220-240]	Speed: 32077.04 samples/sec	accuracy=nan
2022-10-13 11:33:14,915 Node[0] Epoch[28] Batch [240-260]	Speed: 29314.67 samples/sec	accuracy=nan
2022-10-13 11:33:17,041 Node[0] Epoch[28] Batch [260-280]	Speed: 30696.60 samples/sec	accuracy=nan
2022-10-13 11:33:19,172 Node[0] Epoch[28] Batch [280-300]	Speed: 30632.60 samples/sec	accuracy=nan
2022-10-13 11:33:21,310 Node[0] Epoch[28] Batch [300-320]	Speed: 30533.74 samples/sec	accuracy=nan
2022-10-13 11:33:23,440 Node[0] Epoch[28] Batch [320-340]	Speed: 30652.27 samples/sec	accuracy=nan
2022-10-13 11:33:25,568 Node[0] Epoch[28] Batch [340-360]	Speed: 30680.87 samples/sec	accuracy=nan
2022-10-13 11:33:27,698 Node[0] Epoch[28] Batch [360-380]	Speed: 30650.03 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660808967, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 29}}
2022-10-13 11:33:28,967 Node[0] Epoch[28] Time cost=41.883
:::MLLOG {"namespace": "", "time_ms": 1665660808968, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30589.345722897455}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 29}}
:::MLLOG {"namespace": "", "time_ms": 1665660808968, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30589.345722897455, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660808968, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 30}}
2022-10-13 11:33:31,220 Node[0] Epoch[29] Batch [0-20]	Speed: 30492.14 samples/sec	accuracy=nan
2022-10-13 11:33:33,348 Node[0] Epoch[29] Batch [20-40]	Speed: 30677.76 samples/sec	accuracy=nan
2022-10-13 11:33:35,482 Node[0] Epoch[29] Batch [40-60]	Speed: 30590.78 samples/sec	accuracy=nan
2022-10-13 11:33:37,616 Node[0] Epoch[29] Batch [60-80]	Speed: 30601.36 samples/sec	accuracy=nan
2022-10-13 11:33:39,745 Node[0] Epoch[29] Batch [80-100]	Speed: 30658.82 samples/sec	accuracy=nan
2022-10-13 11:33:41,876 Node[0] Epoch[29] Batch [100-120]	Speed: 30637.17 samples/sec	accuracy=nan
2022-10-13 11:33:44,022 Node[0] Epoch[29] Batch [120-140]	Speed: 30409.43 samples/sec	accuracy=nan
2022-10-13 11:33:46,151 Node[0] Epoch[29] Batch [140-160]	Speed: 30670.57 samples/sec	accuracy=nan
2022-10-13 11:33:48,185 Node[0] Epoch[29] Batch [160-180]	Speed: 32088.61 samples/sec	accuracy=nan
2022-10-13 11:33:50,410 Node[0] Epoch[29] Batch [180-200]	Speed: 29337.86 samples/sec	accuracy=nan
2022-10-13 11:33:52,540 Node[0] Epoch[29] Batch [200-220]	Speed: 30652.21 samples/sec	accuracy=nan
2022-10-13 11:33:54,666 Node[0] Epoch[29] Batch [220-240]	Speed: 30701.78 samples/sec	accuracy=nan
2022-10-13 11:33:56,795 Node[0] Epoch[29] Batch [240-260]	Speed: 30660.11 samples/sec	accuracy=nan
2022-10-13 11:33:58,925 Node[0] Epoch[29] Batch [260-280]	Speed: 30658.00 samples/sec	accuracy=nan
2022-10-13 11:34:01,060 Node[0] Epoch[29] Batch [280-300]	Speed: 30572.47 samples/sec	accuracy=nan
2022-10-13 11:34:03,192 Node[0] Epoch[29] Batch [300-320]	Speed: 30622.94 samples/sec	accuracy=nan
2022-10-13 11:34:05,332 Node[0] Epoch[29] Batch [320-340]	Speed: 30501.89 samples/sec	accuracy=nan
2022-10-13 11:34:07,466 Node[0] Epoch[29] Batch [340-360]	Speed: 30586.77 samples/sec	accuracy=nan
2022-10-13 11:34:09,593 Node[0] Epoch[29] Batch [360-380]	Speed: 30683.86 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660850867, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 30}}
2022-10-13 11:34:10,867 Node[0] Epoch[29] Time cost=41.899
:::MLLOG {"namespace": "", "time_ms": 1665660850867, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30577.373195836844}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 30}}
:::MLLOG {"namespace": "", "time_ms": 1665660850867, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30577.373195836844, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660850867, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 31}}
2022-10-13 11:34:13,113 Node[0] Epoch[30] Batch [0-20]	Speed: 30636.92 samples/sec	accuracy=nan
2022-10-13 11:34:15,248 Node[0] Epoch[30] Batch [20-40]	Speed: 30571.02 samples/sec	accuracy=nan
2022-10-13 11:34:17,374 Node[0] Epoch[30] Batch [40-60]	Speed: 30706.74 samples/sec	accuracy=nan
2022-10-13 11:34:19,506 Node[0] Epoch[30] Batch [60-80]	Speed: 30624.19 samples/sec	accuracy=nan
2022-10-13 11:34:21,638 Node[0] Epoch[30] Batch [80-100]	Speed: 30613.59 samples/sec	accuracy=nan
2022-10-13 11:34:23,771 Node[0] Epoch[30] Batch [100-120]	Speed: 30611.88 samples/sec	accuracy=nan
2022-10-13 11:34:25,904 Node[0] Epoch[30] Batch [120-140]	Speed: 30606.12 samples/sec	accuracy=nan
2022-10-13 11:34:28,036 Node[0] Epoch[30] Batch [140-160]	Speed: 30621.51 samples/sec	accuracy=nan
2022-10-13 11:34:30,166 Node[0] Epoch[30] Batch [160-180]	Speed: 30634.84 samples/sec	accuracy=nan
2022-10-13 11:34:32,297 Node[0] Epoch[30] Batch [180-200]	Speed: 30639.38 samples/sec	accuracy=nan
2022-10-13 11:34:34,431 Node[0] Epoch[30] Batch [200-220]	Speed: 30593.85 samples/sec	accuracy=nan
2022-10-13 11:34:36,562 Node[0] Epoch[30] Batch [220-240]	Speed: 30631.56 samples/sec	accuracy=nan
2022-10-13 11:34:38,594 Node[0] Epoch[30] Batch [240-260]	Speed: 32126.91 samples/sec	accuracy=nan
2022-10-13 11:34:40,818 Node[0] Epoch[30] Batch [260-280]	Speed: 29346.00 samples/sec	accuracy=nan
2022-10-13 11:34:42,955 Node[0] Epoch[30] Batch [280-300]	Speed: 30556.84 samples/sec	accuracy=nan
2022-10-13 11:34:45,085 Node[0] Epoch[30] Batch [300-320]	Speed: 30641.01 samples/sec	accuracy=nan
2022-10-13 11:34:47,214 Node[0] Epoch[30] Batch [320-340]	Speed: 30663.96 samples/sec	accuracy=nan
2022-10-13 11:34:49,347 Node[0] Epoch[30] Batch [340-360]	Speed: 30602.42 samples/sec	accuracy=nan
2022-10-13 11:34:51,485 Node[0] Epoch[30] Batch [360-380]	Speed: 30540.75 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660892758, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 31}}
2022-10-13 11:34:52,758 Node[0] Epoch[30] Time cost=41.891
:::MLLOG {"namespace": "", "time_ms": 1665660892759, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30583.2896202202}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 31}}
:::MLLOG {"namespace": "", "time_ms": 1665660892759, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30583.2896202202, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660892859, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 31}}
2022-10-13 11:34:53,655 Node[0] Epoch[30] Validation-accuracy=0.748440
2022-10-13 11:34:53,655 Node[0] Epoch[30] Validation-correct-count=1559.000000
2022-10-13 11:34:53,656 Node[0] Epoch[30] Validation-total-count=2083.000000
:::MLLOG {"namespace": "", "time_ms": 1665660893682, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 31}}
:::MLLOG {"namespace": "", "time_ms": 1665660893683, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.75402, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 31}}
:::MLLOG {"namespace": "", "time_ms": 1665660893683, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 28}}
:::MLLOG {"namespace": "", "time_ms": 1665660893683, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 32, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665660893683, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 32}}
2022-10-13 11:34:55,962 Node[0] Epoch[31] Batch [0-20]	Speed: 29061.98 samples/sec	accuracy=nan
2022-10-13 11:34:58,086 Node[0] Epoch[31] Batch [20-40]	Speed: 30732.79 samples/sec	accuracy=nan
2022-10-13 11:35:00,219 Node[0] Epoch[31] Batch [40-60]	Speed: 30616.84 samples/sec	accuracy=nan
2022-10-13 11:35:02,348 Node[0] Epoch[31] Batch [60-80]	Speed: 30651.16 samples/sec	accuracy=nan
2022-10-13 11:35:04,474 Node[0] Epoch[31] Batch [80-100]	Speed: 30706.36 samples/sec	accuracy=nan
2022-10-13 11:35:06,606 Node[0] Epoch[31] Batch [100-120]	Speed: 30616.25 samples/sec	accuracy=nan
2022-10-13 11:35:08,742 Node[0] Epoch[31] Batch [120-140]	Speed: 30563.14 samples/sec	accuracy=nan
2022-10-13 11:35:10,879 Node[0] Epoch[31] Batch [140-160]	Speed: 30553.05 samples/sec	accuracy=nan
2022-10-13 11:35:13,009 Node[0] Epoch[31] Batch [160-180]	Speed: 30641.85 samples/sec	accuracy=nan
2022-10-13 11:35:15,138 Node[0] Epoch[31] Batch [180-200]	Speed: 30669.30 samples/sec	accuracy=nan
2022-10-13 11:35:17,269 Node[0] Epoch[31] Batch [200-220]	Speed: 30638.14 samples/sec	accuracy=nan
2022-10-13 11:35:19,404 Node[0] Epoch[31] Batch [220-240]	Speed: 30575.90 samples/sec	accuracy=nan
2022-10-13 11:35:21,536 Node[0] Epoch[31] Batch [240-260]	Speed: 30615.90 samples/sec	accuracy=nan
2022-10-13 11:35:23,675 Node[0] Epoch[31] Batch [260-280]	Speed: 30512.45 samples/sec	accuracy=nan
2022-10-13 11:35:25,805 Node[0] Epoch[31] Batch [280-300]	Speed: 30646.61 samples/sec	accuracy=nan
2022-10-13 11:35:27,940 Node[0] Epoch[31] Batch [300-320]	Speed: 30579.89 samples/sec	accuracy=nan
2022-10-13 11:35:30,075 Node[0] Epoch[31] Batch [320-340]	Speed: 30583.91 samples/sec	accuracy=nan
2022-10-13 11:35:32,205 Node[0] Epoch[31] Batch [340-360]	Speed: 30638.38 samples/sec	accuracy=nan
2022-10-13 11:35:34,340 Node[0] Epoch[31] Batch [360-380]	Speed: 30578.46 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660935613, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 32}}
2022-10-13 11:35:35,613 Node[0] Epoch[31] Time cost=41.928
:::MLLOG {"namespace": "", "time_ms": 1665660935613, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30556.492330835456}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 32}}
:::MLLOG {"namespace": "", "time_ms": 1665660935613, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30556.492330835456, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660935614, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 33}}
2022-10-13 11:35:37,853 Node[0] Epoch[32] Batch [0-20]	Speed: 30695.17 samples/sec	accuracy=nan
2022-10-13 11:35:39,984 Node[0] Epoch[32] Batch [20-40]	Speed: 30634.37 samples/sec	accuracy=nan
2022-10-13 11:35:42,114 Node[0] Epoch[32] Batch [40-60]	Speed: 30645.22 samples/sec	accuracy=nan
2022-10-13 11:35:44,245 Node[0] Epoch[32] Batch [60-80]	Speed: 30637.54 samples/sec	accuracy=nan
2022-10-13 11:35:46,290 Node[0] Epoch[32] Batch [80-100]	Speed: 31917.68 samples/sec	accuracy=nan
2022-10-13 11:35:48,507 Node[0] Epoch[32] Batch [100-120]	Speed: 29446.21 samples/sec	accuracy=nan
2022-10-13 11:35:50,646 Node[0] Epoch[32] Batch [120-140]	Speed: 30523.17 samples/sec	accuracy=nan
2022-10-13 11:35:52,781 Node[0] Epoch[32] Batch [140-160]	Speed: 30568.36 samples/sec	accuracy=nan
2022-10-13 11:35:54,911 Node[0] Epoch[32] Batch [160-180]	Speed: 30650.27 samples/sec	accuracy=nan
2022-10-13 11:35:57,040 Node[0] Epoch[32] Batch [180-200]	Speed: 30668.25 samples/sec	accuracy=nan
2022-10-13 11:35:59,166 Node[0] Epoch[32] Batch [200-220]	Speed: 30706.49 samples/sec	accuracy=nan
2022-10-13 11:36:01,295 Node[0] Epoch[32] Batch [220-240]	Speed: 30662.24 samples/sec	accuracy=nan
2022-10-13 11:36:03,429 Node[0] Epoch[32] Batch [240-260]	Speed: 30587.67 samples/sec	accuracy=nan
2022-10-13 11:36:05,558 Node[0] Epoch[32] Batch [260-280]	Speed: 30660.13 samples/sec	accuracy=nan
2022-10-13 11:36:07,692 Node[0] Epoch[32] Batch [280-300]	Speed: 30584.90 samples/sec	accuracy=nan
2022-10-13 11:36:09,826 Node[0] Epoch[32] Batch [300-320]	Speed: 30601.47 samples/sec	accuracy=nan
2022-10-13 11:36:11,965 Node[0] Epoch[32] Batch [320-340]	Speed: 30518.16 samples/sec	accuracy=nan
2022-10-13 11:36:14,096 Node[0] Epoch[32] Batch [340-360]	Speed: 30634.55 samples/sec	accuracy=nan
2022-10-13 11:36:16,229 Node[0] Epoch[32] Batch [360-380]	Speed: 30600.34 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665660977506, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 33}}
2022-10-13 11:36:17,506 Node[0] Epoch[32] Time cost=41.893
:::MLLOG {"namespace": "", "time_ms": 1665660977507, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30582.159654648127}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 33}}
:::MLLOG {"namespace": "", "time_ms": 1665660977507, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30582.159654648127, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665660977507, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 34}}
2022-10-13 11:36:19,754 Node[0] Epoch[33] Batch [0-20]	Speed: 30571.54 samples/sec	accuracy=nan
2022-10-13 11:36:21,884 Node[0] Epoch[33] Batch [20-40]	Speed: 30647.96 samples/sec	accuracy=nan
2022-10-13 11:36:24,015 Node[0] Epoch[33] Batch [40-60]	Speed: 30626.36 samples/sec	accuracy=nan
2022-10-13 11:36:26,149 Node[0] Epoch[33] Batch [60-80]	Speed: 30598.69 samples/sec	accuracy=nan
2022-10-13 11:36:28,283 Node[0] Epoch[33] Batch [80-100]	Speed: 30591.94 samples/sec	accuracy=nan
2022-10-13 11:36:30,415 Node[0] Epoch[33] Batch [100-120]	Speed: 30608.63 samples/sec	accuracy=nan
2022-10-13 11:36:32,547 Node[0] Epoch[33] Batch [120-140]	Speed: 30632.70 samples/sec	accuracy=nan
2022-10-13 11:36:34,686 Node[0] Epoch[33] Batch [140-160]	Speed: 30508.29 samples/sec	accuracy=nan
2022-10-13 11:36:36,821 Node[0] Epoch[33] Batch [160-180]	Speed: 30576.44 samples/sec	accuracy=nan
2022-10-13 11:36:38,951 Node[0] Epoch[33] Batch [180-200]	Speed: 30646.54 samples/sec	accuracy=nan
2022-10-13 11:36:40,981 Node[0] Epoch[33] Batch [200-220]	Speed: 32165.46 samples/sec	accuracy=nan
2022-10-13 11:36:43,116 Node[0] Epoch[33] Batch [220-240]	Speed: 30573.47 samples/sec	accuracy=nan
2022-10-13 11:36:45,340 Node[0] Epoch[33] Batch [240-260]	Speed: 29356.92 samples/sec	accuracy=nan
2022-10-13 11:36:47,471 Node[0] Epoch[33] Batch [260-280]	Speed: 30627.16 samples/sec	accuracy=nan
2022-10-13 11:36:49,604 Node[0] Epoch[33] Batch [280-300]	Speed: 30609.12 samples/sec	accuracy=nan
2022-10-13 11:36:51,743 Node[0] Epoch[33] Batch [300-320]	Speed: 30520.60 samples/sec	accuracy=nan
2022-10-13 11:36:53,875 Node[0] Epoch[33] Batch [320-340]	Speed: 30622.24 samples/sec	accuracy=nan
2022-10-13 11:36:56,004 Node[0] Epoch[33] Batch [340-360]	Speed: 30652.21 samples/sec	accuracy=nan
2022-10-13 11:36:58,141 Node[0] Epoch[33] Batch [360-380]	Speed: 30553.33 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665661019416, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 34}}
2022-10-13 11:36:59,416 Node[0] Epoch[33] Time cost=41.909
:::MLLOG {"namespace": "", "time_ms": 1665661019416, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30569.93831919778}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 34}}
:::MLLOG {"namespace": "", "time_ms": 1665661019416, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30569.93831919778, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665661019417, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 35}}
2022-10-13 11:37:01,661 Node[0] Epoch[34] Batch [0-20]	Speed: 30635.26 samples/sec	accuracy=nan
2022-10-13 11:37:03,796 Node[0] Epoch[34] Batch [20-40]	Speed: 30570.28 samples/sec	accuracy=nan
2022-10-13 11:37:05,923 Node[0] Epoch[34] Batch [40-60]	Speed: 30688.91 samples/sec	accuracy=nan
2022-10-13 11:37:08,054 Node[0] Epoch[34] Batch [60-80]	Speed: 30645.01 samples/sec	accuracy=nan
2022-10-13 11:37:10,183 Node[0] Epoch[34] Batch [80-100]	Speed: 30653.57 samples/sec	accuracy=nan
2022-10-13 11:37:12,313 Node[0] Epoch[34] Batch [100-120]	Speed: 30643.65 samples/sec	accuracy=nan
2022-10-13 11:37:14,447 Node[0] Epoch[34] Batch [120-140]	Speed: 30599.92 samples/sec	accuracy=nan
2022-10-13 11:37:16,575 Node[0] Epoch[34] Batch [140-160]	Speed: 30670.25 samples/sec	accuracy=nan
2022-10-13 11:37:18,710 Node[0] Epoch[34] Batch [160-180]	Speed: 30579.72 samples/sec	accuracy=nan
2022-10-13 11:37:20,841 Node[0] Epoch[34] Batch [180-200]	Speed: 30636.94 samples/sec	accuracy=nan
2022-10-13 11:37:22,972 Node[0] Epoch[34] Batch [200-220]	Speed: 30632.31 samples/sec	accuracy=nan
2022-10-13 11:37:25,103 Node[0] Epoch[34] Batch [220-240]	Speed: 30632.97 samples/sec	accuracy=nan
2022-10-13 11:37:27,236 Node[0] Epoch[34] Batch [240-260]	Speed: 30598.24 samples/sec	accuracy=nan
2022-10-13 11:37:29,364 Node[0] Epoch[34] Batch [260-280]	Speed: 30676.66 samples/sec	accuracy=nan
2022-10-13 11:37:31,501 Node[0] Epoch[34] Batch [280-300]	Speed: 30554.68 samples/sec	accuracy=nan
2022-10-13 11:37:33,634 Node[0] Epoch[34] Batch [300-320]	Speed: 30608.45 samples/sec	accuracy=nan
2022-10-13 11:37:35,767 Node[0] Epoch[34] Batch [320-340]	Speed: 30592.78 samples/sec	accuracy=nan
2022-10-13 11:37:37,896 Node[0] Epoch[34] Batch [340-360]	Speed: 30672.98 samples/sec	accuracy=nan
2022-10-13 11:37:40,026 Node[0] Epoch[34] Batch [360-380]	Speed: 30640.91 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665661061304, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 35}}
2022-10-13 11:37:41,304 Node[0] Epoch[34] Time cost=41.888
:::MLLOG {"namespace": "", "time_ms": 1665661061304, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30585.876567123054}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 35}}
:::MLLOG {"namespace": "", "time_ms": 1665661061304, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30585.876567123054, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665661061405, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 35}}
2022-10-13 11:37:42,182 Node[0] Epoch[34] Validation-accuracy=0.758637
2022-10-13 11:37:42,182 Node[0] Epoch[34] Validation-correct-count=1581.000000
2022-10-13 11:37:42,182 Node[0] Epoch[34] Validation-total-count=2084.000000
:::MLLOG {"namespace": "", "time_ms": 1665661062233, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 35}}
:::MLLOG {"namespace": "", "time_ms": 1665661062233, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.76188, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 35}}
:::MLLOG {"namespace": "", "time_ms": 1665661062233, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 32}}
:::MLLOG {"namespace": "", "time_ms": 1665661062234, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1063, "status": "success"}}
ENDING TIMING RUN AT 2022-10-13 11:38:27 AM
RESULT,IMAGE_CLASSIFICATION,,1602,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:27 AM
RESULT,IMAGE_CLASSIFICATION,,1602,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:27 AM
RESULT,IMAGE_CLASSIFICATION,,1602,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:28 AM
RESULT,IMAGE_CLASSIFICATION,,1603,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:28 AM
RESULT,IMAGE_CLASSIFICATION,,1603,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:28 AM
RESULT,IMAGE_CLASSIFICATION,,1603,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:29 AM
RESULT,IMAGE_CLASSIFICATION,,1604,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:29 AM
RESULT,IMAGE_CLASSIFICATION,,1604,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:29 AM
RESULT,IMAGE_CLASSIFICATION,,1604,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:29 AM
RESULT,IMAGE_CLASSIFICATION,,1604,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:30 AM
RESULT,IMAGE_CLASSIFICATION,,1605,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:30 AM
RESULT,IMAGE_CLASSIFICATION,,1605,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:30 AM
RESULT,IMAGE_CLASSIFICATION,,1605,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:30 AM
RESULT,IMAGE_CLASSIFICATION,,1605,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:31 AM
RESULT,IMAGE_CLASSIFICATION,,1606,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:31 AM
RESULT,IMAGE_CLASSIFICATION,,1606,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:32 AM
RESULT,IMAGE_CLASSIFICATION,,1607,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:33 AM
RESULT,IMAGE_CLASSIFICATION,,1608,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:33 AM
RESULT,IMAGE_CLASSIFICATION,,1608,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:33 AM
RESULT,IMAGE_CLASSIFICATION,,1608,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:33 AM
RESULT,IMAGE_CLASSIFICATION,,1608,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:33 AM
RESULT,IMAGE_CLASSIFICATION,,1608,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:33 AM
RESULT,IMAGE_CLASSIFICATION,,1608,,2022-10-13 11:11:45 AM
ENDING TIMING RUN AT 2022-10-13 11:38:34 AM
RESULT,IMAGE_CLASSIFICATION,,1609,,2022-10-13 11:11:45 AM
