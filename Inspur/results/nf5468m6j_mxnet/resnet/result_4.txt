+ echo 'Beginning trial 4 of 5'
Beginning trial 4 of 5
+ docker exec -it image_classification python -c '
import mlperf_log_utils
from mlperf_logging.mllog import constants

mlperf_log_utils.mlperf_submission_log(constants.RESNET)'
:::MLLOG {"namespace": "", "time_ms": 1665662747624, "event_type": "POINT_IN_TIME", "key": "submission_benchmark", "value": "resnet", "metadata": {"file": "/workspace/image_classification/mlperf_log_utils.py", "lineno": 84}}
:::MLLOG {"namespace": "", "time_ms": 1665662747635, "event_type": "POINT_IN_TIME", "key": "submission_org", "value": "Inspur", "metadata": {"file": "/workspace/image_classification/mlperf_log_utils.py", "lineno": 89}}
:::MLLOG {"namespace": "", "time_ms": 1665662747635, "event_type": "POINT_IN_TIME", "key": "submission_division", "value": "closed", "metadata": {"file": "/workspace/image_classification/mlperf_log_utils.py", "lineno": 93}}
:::MLLOG {"namespace": "", "time_ms": 1665662747635, "event_type": "POINT_IN_TIME", "key": "submission_status", "value": "research", "metadata": {"file": "/workspace/image_classification/mlperf_log_utils.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1665662747635, "event_type": "POINT_IN_TIME", "key": "submission_platform", "value": "1xNF5468M6J", "metadata": {"file": "/workspace/image_classification/mlperf_log_utils.py", "lineno": 101}}
+ '[' 1 -eq 1 ']'
+ sync
+ sudo /sbin/sysctl vm.drop_caches=3
vm.drop_caches = 3
+ docker exec -it image_classification python -c '
import mlperf_log_utils
from mlperf_logging.mllog import constants

mlperf_log_utils.mx_resnet_print_event(key=constants.CACHE_CLEAR, val=True)'
:::MLLOG {"namespace": "", "time_ms": 1665662761120, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "<string>", "lineno": 5}}
+ export SEED=17218
+ SEED=17218
+ docker exec -it --env=BATCHSIZE --env=DALI_CACHE_SIZE --env=DALI_CROP_BUFFER_HINT --env=DALI_DECODER_BUFFER_HINT --env=DALI_DONT_USE_MMAP --env=DALI_EVAL_HW_DECODER_LOAD --env=DALI_EVAL_PREFETCH_QUEUE --env=DALI_EVAL_THREADS --env=DALI_HW_DECODER_LOAD --env=DALI_NORMALIZE_BUFFER_HINT --env=DALI_NVJPEG_MEMPADDING --env=DALI_PREALLOCATE_HEIGHT --env=DALI_PREALLOCATE_WIDTH --env=DALI_PREFETCH_QUEUE --env=DALI_ROI_DECODE --env=DALI_THREADS --env=DALI_TMP_BUFFER_HINT --env=DGXHT --env=DGXNGPU --env=DGXNNODES --env=DGXNSOCKET --env=DGXSOCKETCORES --env=DGXSYSTEM --env=EVAL_OFFSET --env=EVAL_PERIOD --env=HOROVOD_CYCLE_TIME --env=HOROVOD_FUSION_THRESHOLD --env=HOROVOD_NUM_NCCL_STREAMS --env=KVSTORE --env=LABELSMOOTHING --env=LARSETA --env=LR --env=LRSCHED --env=MOM --env=MXNET_CUDNN_NHWC_BN_ADD_HEURISTIC_BWD --env=MXNET_CUDNN_NHWC_BN_ADD_HEURISTIC_FWD --env=MXNET_CUDNN_NHWC_BN_HEURISTIC_BWD --env=MXNET_CUDNN_NHWC_BN_HEURISTIC_FWD --env=MXNET_CUDNN_WARN_ON_IGNORED_FLAGS --env=MXNET_ENABLE_CUDA_GRAPHS --env=MXNET_EXEC_BULK_EXEC_MAX_NODE_TRAIN_BWD --env=MXNET_EXEC_BULK_EXEC_MAX_NODE_TRAIN_FWD --env=MXNET_EXTENDED_NORMCONV_SUPPORT --env=MXNET_HOROVOD_NUM_GROUPS --env=MXNET_OPTIMIZER_AGGREGATION_SIZE --env=NCCL_SOCKET_IFNAME --env=NETWORK --env=NUMEPOCHS --env=OMPI_MCA_btl --env=OPTIMIZER --env=RUN_NCCL_BW_TEST --env=WALLTIME --env=WARMUP_EPOCHS --env=WD --env=MLPERF_HOST_OS --env=SEED image_classification mpirun --allow-run-as-root --bind-to none --np 24 ./run_and_time.sh
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
running benchmark
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
running benchmark
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
running benchmark
running benchmark
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
running benchmark
running benchmark
running benchmark
running benchmark
running benchmark
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
running benchmark
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
running benchmark
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:06:02 PM
running benchmark
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665662776750, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
:::MLLOG {"namespace": "", "time_ms": 1665662791283, "event_type": "POINT_IN_TIME", "key": "seed", "value": 17218, "metadata": {"file": "train_imagenet.py", "lineno": 173}}
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:[199: Using Pooled (Naive) StorageManager for GPU
12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:06:31] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
NCCL version 2.12.10+cuda11.6
:::MLLOG {"namespace": "", "time_ms": 1665662803949, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 136, "metadata": {"file": "/workspace/image_classification/common/dali.py", "lineno": 327}}
[12:06:54] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:06:54] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:06:54] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:06:54] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
:::MLLOG {"namespace": "", "time_ms": 1665662814998, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "bn0_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662814998, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "bn0_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662814998, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "conv0_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662814999, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 78, "tensor": "fc1_bias"}}
:::MLLOG {"namespace": "", "time_ms": 1665662814999, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 69, "tensor": "fc1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662814999, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit1_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662814999, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit1_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662814999, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit1_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815000, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit1_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815000, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit1_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815000, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit1_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815000, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit1_bnsc_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815001, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit1_bnsc_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815001, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit1_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815001, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit1_conv1sc_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815001, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit1_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815001, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit1_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815002, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit2_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815002, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit2_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815002, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit2_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815002, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit2_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815002, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit2_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815003, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit2_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815003, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit2_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815003, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit2_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815003, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit2_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815003, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit3_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815004, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit3_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815004, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit3_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815004, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit3_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815004, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit3_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815004, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit3_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815005, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit3_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815005, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit3_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815005, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit3_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815005, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit1_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815006, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit1_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815006, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit1_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815006, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit1_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815006, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit1_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815007, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit1_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815007, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit1_bnsc_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815007, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit1_bnsc_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815007, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit1_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815007, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit1_conv1sc_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815008, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit1_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815008, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit1_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815008, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit2_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815008, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit2_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815008, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit2_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815009, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit2_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815009, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit2_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815009, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit2_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815009, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit2_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815009, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit2_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815010, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit2_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815010, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit3_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815010, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit3_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815010, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit3_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815010, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit3_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815011, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit3_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815011, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit3_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815011, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit3_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815011, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit3_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815011, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit3_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815012, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit4_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815012, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit4_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815012, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit4_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815012, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit4_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815012, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit4_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815013, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit4_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815013, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit4_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815013, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit4_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815013, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit4_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815013, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit1_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815014, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit1_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815014, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit1_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815014, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit1_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815014, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit1_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815014, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit1_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815015, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit1_bnsc_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815015, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit1_bnsc_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815015, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit1_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815015, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit1_conv1sc_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815015, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit1_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815016, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit1_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815016, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit2_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815016, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit2_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815016, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit2_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815016, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit2_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815017, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit2_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815017, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit2_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815017, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit2_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815017, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit2_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815017, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit2_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815018, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit3_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815018, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit3_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815018, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit3_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815018, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit3_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815018, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit3_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815019, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit3_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815019, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit3_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815019, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit3_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815019, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit3_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815019, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit4_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815020, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit4_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815020, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit4_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815020, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit4_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815020, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit4_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815020, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit4_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815021, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit4_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815021, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit4_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815021, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit4_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815021, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit5_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815021, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit5_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815022, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit5_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815022, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit5_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815022, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit5_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815022, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit5_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815022, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit5_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815023, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit5_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815023, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit5_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815023, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit6_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815023, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit6_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815023, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit6_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815024, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit6_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815024, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit6_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815024, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit6_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815024, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit6_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815024, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit6_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815025, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit6_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815025, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit1_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815025, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit1_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815025, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit1_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815025, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit1_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815026, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit1_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815026, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit1_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815026, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit1_bnsc_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815026, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit1_bnsc_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815026, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit1_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815027, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit1_conv1sc_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815027, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit1_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815027, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit1_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815027, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit2_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815027, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit2_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815028, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit2_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815028, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit2_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815028, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit2_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815028, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit2_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815028, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit2_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815029, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit2_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815029, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit2_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815029, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit3_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815029, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit3_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815029, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit3_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815030, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit3_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815030, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit3_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815030, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit3_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815030, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit3_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815030, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit3_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665662815031, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit3_conv3_weight"}}
[12:07:01] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:07:01] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:07:01] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:07:01] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:07:01] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:07:01] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:07:01] ../src/storage/storage.cc:199: Using Pooled (Naive)[12:07:01] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
 StorageManager for CPU
[12:07:01] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:07:01] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:07:01] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[[12:07:01] ../src/storage/storage.cc:199: 12:07:01] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
Using Pooled (Naive) StorageManager for CPU
[12:07:01] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:07:01] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[[12:07:01] ../src/storage/storage.cc:199: 12:07:01] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
Using Pooled (Naive) StorageManager for CPU
[12:07:01] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:07:01] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:07:01] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,854 Node[5] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='5', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=5, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=24899, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,854 Node[19] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='19', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=19, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=28977, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,854 Node[6] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='6', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=6, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=63626, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,854 Node[1] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='1', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=1, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=10081, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,855 Node[13] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='13', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=13, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=21335, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,855 Node[11] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='11', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=11, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=12993, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,856 Node[9] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='9', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=9, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=2054, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,856 Node[4] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='4', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=4, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=30682, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,856 Node[10] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='10', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=10, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=63244, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,856 Node[21] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='21', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=21, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=15027, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,856 Node[8] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='8', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=8, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=42395, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,857 Node[20] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='20', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=20, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=50601, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,857 Node[22] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='22', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=22, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=1765, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,857 Node[15] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='15', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=15, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=60149, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,857 Node[14] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='14', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=14, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=55302, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,858 Node[12] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='12', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=12, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=21004, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,858 Node[23] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='23', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=23, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=3914, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,858 Node[7] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='7', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=7, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=36840, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,859 Node[17] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='17', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=17, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=61866, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,859 Node[2] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='2', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=2, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=41614, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,859 Node[16] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='16', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=16, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=26636, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,859 Node[18] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='18', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=18, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=26605, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
:::MLLOG {"namespace": "", "time_ms": 1665662822859, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 230}}
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,860 Node[0] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='0', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=0, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=25776, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
:::MLLOG {"namespace": "", "time_ms": 1665662822860, "event_type": "POINT_IN_TIME", "key": "sgd_opt_learning_rate_decay_poly_power", "value": 2, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 710}}
:::MLLOG {"namespace": "", "time_ms": 1665662822860, "event_type": "POINT_IN_TIME", "key": "sgd_opt_end_learning_rate", "value": 0.0001, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 711}}
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:07:02,860 Node[3] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='3', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=3, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=5170, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
:::MLLOG {"namespace": "", "time_ms": 1665662822861, "event_type": "POINT_IN_TIME", "key": "lars_opt_learning_rate_decay_poly_power", "value": 2, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 712}}
:::MLLOG {"namespace": "", "time_ms": 1665662822861, "event_type": "POINT_IN_TIME", "key": "lars_opt_end_learning_rate", "value": 0.0001, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 713}}
:::MLLOG {"namespace": "", "time_ms": 1665662822861, "event_type": "POINT_IN_TIME", "key": "d_batch_size", "value": 136, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1176}}
:::MLLOG {"namespace": "", "time_ms": 1665662822861, "event_type": "POINT_IN_TIME", "key": "s_optimizer", "value": "sgdwfastlars", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1177}}
:::MLLOG {"namespace": "", "time_ms": 1665662822861, "event_type": "POINT_IN_TIME", "key": "s_network", "value": "resnet-v1b-stats-fl", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1178}}
:::MLLOG {"namespace": "", "time_ms": 1665662822861, "event_type": "POINT_IN_TIME", "key": "s_process", "value": "horovod", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1179}}
:::MLLOG {"namespace": "", "time_ms": 1665662822861, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 3264, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1180}}
:::MLLOG {"namespace": "", "time_ms": 1665662822861, "event_type": "POINT_IN_TIME", "key": "s_optimizer", "value": "sgdwfastlars", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1181}}
:::MLLOG {"namespace": "", "time_ms": 1665662822861, "event_type": "POINT_IN_TIME", "key": "s_network", "value": "resnet-v1b-stats-fl", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1182}}
:::MLLOG {"namespace": "", "time_ms": 1665662822861, "event_type": "POINT_IN_TIME", "key": "s_process", "value": "horovod", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1183}}
:::MLLOG {"namespace": "", "time_ms": 1665662822861, "event_type": "POINT_IN_TIME", "key": "gradient_accumulation_steps", "value": 1, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1184}}
:::MLLOG {"namespace": "", "time_ms": 1665662822861, "event_type": "POINT_IN_TIME", "key": "opt_name", "value": "lars", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1190}}
:::MLLOG {"namespace": "", "time_ms": 1665662822861, "event_type": "POINT_IN_TIME", "key": "lars_epsilon", "value": 0, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1192}}
:::MLLOG {"namespace": "", "time_ms": 1665662822861, "event_type": "POINT_IN_TIME", "key": "lars_opt_weight_decay", "value": 5e-05, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1194}}
:::MLLOG {"namespace": "", "time_ms": 1665662822861, "event_type": "POINT_IN_TIME", "key": "lars_opt_momentum", "value": 0.9, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1196}}
:::MLLOG {"namespace": "", "time_ms": 1665662822861, "event_type": "POINT_IN_TIME", "key": "lars_opt_base_learning_rate", "value": 10.5, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1197}}
:::MLLOG {"namespace": "", "time_ms": 1665662822861, "event_type": "POINT_IN_TIME", "key": "lars_opt_learning_rate_warmup_epochs", "value": 2, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1198}}
:::MLLOG {"namespace": "", "time_ms": 1665662822861, "event_type": "POINT_IN_TIME", "key": "lars_opt_learning_rate_decay_steps", "value": 37, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1199}}
:::MLLOG {"namespace": "", "time_ms": 1665662840074, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1348}}
:::MLLOG {"namespace": "", "time_ms": 1665662840075, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 1281167, "metadata": {"file": "/workspace/image_classification/common/dali.py", "lineno": 504}}
:::MLLOG {"namespace": "", "time_ms": 1665662840306, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 50000, "metadata": {"file": "/workspace/image_classification/common/dali.py", "lineno": 526}}
:::MLLOG {"namespace": "", "time_ms": 1665662840306, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 902, "first_epoch_num": 1, "epoch_count": 3}}
:::MLLOG {"namespace": "", "time_ms": 1665662840306, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 1}}
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:07:24,547 Node[0] Epoch[0] Batch [0-20]	Speed: 29464.56 samples/sec	accuracy=nan
2022-10-13 12:07:26,747 Node[0] Epoch[0] Batch [20-40]	Speed: 29682.32 samples/sec	accuracy=nan
2022-10-13 12:07:28,939 Node[0] Epoch[0] Batch [40-60]	Speed: 29777.85 samples/sec	accuracy=nan
2022-10-13 12:07:31,144 Node[0] Epoch[0] Batch [60-80]	Speed: 29610.67 samples/sec	accuracy=nan
2022-10-13 12:07:33,340 Node[0] Epoch[0] Batch [80-100]	Speed: 29725.41 samples/sec	accuracy=nan
2022-10-13 12:07:35,535 Node[0] Epoch[0] Batch [100-120]	Speed: 29741.73 samples/sec	accuracy=nan
2022-10-13 12:07:37,646 Node[0] Epoch[0] Batch [120-140]	Speed: 30918.23 samples/sec	accuracy=nan
2022-10-13 12:07:39,946 Node[0] Epoch[0] Batch [140-160]	Speed: 28376.04 samples/sec	accuracy=nan
2022-10-13 12:07:42,140 Node[0] Epoch[0] Batch [160-180]	Speed: 29754.94 samples/sec	accuracy=nan
2022-10-13 12:07:44,346 Node[0] Epoch[0] Batch [180-200]	Speed: 29591.21 samples/sec	accuracy=nan
2022-10-13 12:07:46,557 Node[0] Epoch[0] Batch [200-220]	Speed: 29537.06 samples/sec	accuracy=nan
2022-10-13 12:07:48,658 Node[0] Epoch[0] Batch [220-240]	Speed: 31069.25 samples/sec	accuracy=nan
2022-10-13 12:07:50,955 Node[0] Epoch[0] Batch [240-260]	Speed: 28415.16 samples/sec	accuracy=nan
2022-10-13 12:07:53,156 Node[0] Epoch[0] Batch [260-280]	Speed: 29657.67 samples/sec	accuracy=nan
2022-10-13 12:07:55,365 Node[0] Epoch[0] Batch [280-300]	Speed: 29560.33 samples/sec	accuracy=nan
2022-10-13 12:07:57,570 Node[0] Epoch[0] Batch [300-320]	Speed: 29595.68 samples/sec	accuracy=nan
2022-10-13 12:07:59,777 Node[0] Epoch[0] Batch [320-340]	Speed: 29577.19 samples/sec	accuracy=nan
2022-10-13 12:08:01,990 Node[0] Epoch[0] Batch [340-360]	Speed: 29502.89 samples/sec	accuracy=nan
2022-10-13 12:08:04,159 Node[0] Epoch[0] Batch [360-380]	Speed: 30101.24 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665662885434, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 1}}
2022-10-13 12:08:05,434 Node[0] Epoch[0] Time cost=45.128
:::MLLOG {"namespace": "", "time_ms": 1665662885435, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 28389.478366734875}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 1}}
:::MLLOG {"namespace": "", "time_ms": 1665662885435, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 28389.478366734875, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665662885435, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 2}}
2022-10-13 12:08:07,681 Node[0] Epoch[1] Batch [0-20]	Speed: 30611.80 samples/sec	accuracy=nan
2022-10-13 12:08:09,809 Node[0] Epoch[1] Batch [20-40]	Speed: 30670.95 samples/sec	accuracy=nan
2022-10-13 12:08:11,943 Node[0] Epoch[1] Batch [40-60]	Speed: 30590.27 samples/sec	accuracy=nan
2022-10-13 12:08:14,076 Node[0] Epoch[1] Batch [60-80]	Speed: 30605.64 samples/sec	accuracy=nan
2022-10-13 12:08:16,212 Node[0] Epoch[1] Batch [80-100]	Speed: 30564.43 samples/sec	accuracy=nan
2022-10-13 12:08:18,345 Node[0] Epoch[1] Batch [100-120]	Speed: 30607.82 samples/sec	accuracy=nan
2022-10-13 12:08:20,474 Node[0] Epoch[1] Batch [120-140]	Speed: 30655.15 samples/sec	accuracy=nan
2022-10-13 12:08:22,604 Node[0] Epoch[1] Batch [140-160]	Speed: 30645.51 samples/sec	accuracy=nan
2022-10-13 12:08:24,734 Node[0] Epoch[1] Batch [160-180]	Speed: 30656.31 samples/sec	accuracy=nan
2022-10-13 12:08:26,861 Node[0] Epoch[1] Batch [180-200]	Speed: 30679.81 samples/sec	accuracy=nan
2022-10-13 12:08:28,989 Node[0] Epoch[1] Batch [200-220]	Speed: 30685.36 samples/sec	accuracy=nan
2022-10-13 12:08:31,118 Node[0] Epoch[1] Batch [220-240]	Speed: 30659.39 samples/sec	accuracy=nan
2022-10-13 12:08:33,248 Node[0] Epoch[1] Batch [240-260]	Speed: 30645.61 samples/sec	accuracy=nan
2022-10-13 12:08:35,376 Node[0] Epoch[1] Batch [260-280]	Speed: 30683.88 samples/sec	accuracy=nan
2022-10-13 12:08:37,500 Node[0] Epoch[1] Batch [280-300]	Speed: 30725.58 samples/sec	accuracy=nan
2022-10-13 12:08:39,630 Node[0] Epoch[1] Batch [300-320]	Speed: 30656.33 samples/sec	accuracy=nan
2022-10-13 12:08:41,760 Node[0] Epoch[1] Batch [320-340]	Speed: 30640.12 samples/sec	accuracy=nan
2022-10-13 12:08:43,895 Node[0] Epoch[1] Batch [340-360]	Speed: 30581.72 samples/sec	accuracy=nan
2022-10-13 12:08:46,022 Node[0] Epoch[1] Batch [360-380]	Speed: 30693.09 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665662927294, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 2}}
2022-10-13 12:08:47,295 Node[0] Epoch[1] Time cost=41.860
:::MLLOG {"namespace": "", "time_ms": 1665662927295, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30606.240304481067}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 2}}
:::MLLOG {"namespace": "", "time_ms": 1665662927295, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30606.240304481067, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665662927296, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 3}}
2022-10-13 12:08:49,544 Node[0] Epoch[2] Batch [0-20]	Speed: 30553.37 samples/sec	accuracy=nan
2022-10-13 12:08:51,677 Node[0] Epoch[2] Batch [20-40]	Speed: 30607.52 samples/sec	accuracy=nan
2022-10-13 12:08:53,804 Node[0] Epoch[2] Batch [40-60]	Speed: 30694.30 samples/sec	accuracy=nan
2022-10-13 12:08:55,933 Node[0] Epoch[2] Batch [60-80]	Speed: 30657.74 samples/sec	accuracy=nan
2022-10-13 12:08:58,063 Node[0] Epoch[2] Batch [80-100]	Speed: 30654.43 samples/sec	accuracy=nan
2022-10-13 12:09:00,192 Node[0] Epoch[2] Batch [100-120]	Speed: 30651.61 samples/sec	accuracy=nan
2022-10-13 12:09:02,325 Node[0] Epoch[2] Batch [120-140]	Speed: 30610.25 samples/sec	accuracy=nan
2022-10-13 12:09:04,461 Node[0] Epoch[2] Batch [140-160]	Speed: 30563.38 samples/sec	accuracy=nan
2022-10-13 12:09:06,591 Node[0] Epoch[2] Batch [160-180]	Speed: 30646.90 samples/sec	accuracy=nan
2022-10-13 12:09:08,718 Node[0] Epoch[2] Batch [180-200]	Speed: 30682.68 samples/sec	accuracy=nan
2022-10-13 12:09:10,850 Node[0] Epoch[2] Batch [200-220]	Speed: 30619.95 samples/sec	accuracy=nan
2022-10-13 12:09:12,981 Node[0] Epoch[2] Batch [220-240]	Speed: 30645.52 samples/sec	accuracy=nan
2022-10-13 12:09:15,111 Node[0] Epoch[2] Batch [240-260]	Speed: 30647.74 samples/sec	accuracy=nan
2022-10-13 12:09:17,240 Node[0] Epoch[2] Batch [260-280]	Speed: 30652.75 samples/sec	accuracy=nan
2022-10-13 12:09:19,372 Node[0] Epoch[2] Batch [280-300]	Speed: 30618.15 samples/sec	accuracy=nan
2022-10-13 12:09:21,503 Node[0] Epoch[2] Batch [300-320]	Speed: 30643.97 samples/sec	accuracy=nan
2022-10-13 12:09:23,629 Node[0] Epoch[2] Batch [320-340]	Speed: 30702.11 samples/sec	accuracy=nan
2022-10-13 12:09:25,759 Node[0] Epoch[2] Batch [340-360]	Speed: 30645.72 samples/sec	accuracy=nan
2022-10-13 12:09:27,886 Node[0] Epoch[2] Batch [360-380]	Speed: 30685.31 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665662969160, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 3}}
2022-10-13 12:09:29,160 Node[0] Epoch[2] Time cost=41.864
:::MLLOG {"namespace": "", "time_ms": 1665662969160, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30602.869097597464}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 3}}
:::MLLOG {"namespace": "", "time_ms": 1665662969160, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30602.869097597464, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,261 Node[7] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,261 Node[6] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,261 Node[5] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,261 Node[4] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,262 Node[9] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,262 Node[8] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,262 Node[10] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,262 Node[2] DALI iterator does not support resetting while epoch is not finished. Ignoring...
:::MLLOG {"namespace": "", "time_ms": 1665662969262, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 3}}
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,262 Node[3] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,262 Node[11] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,262 Node[1] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,262 Node[13] DALI iterator does not support resetting while epoch is not finished. Ignoring...
2022-10-13 12:09:29,262 Node[0] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,262 Node[12] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,262 Node[23] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,262 Node[14] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,262 Node[22] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,262 Node[15] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,262 Node[21] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,262 Node[16] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,262 Node[20] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,262 Node[17] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,262 Node[19] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:09:29,262 Node[18] DALI iterator does not support resetting while epoch is not finished. Ignoring...
2022-10-13 12:09:31,075 Node[0] Epoch[2] Validation-accuracy=0.323572
2022-10-13 12:09:31,075 Node[0] Epoch[2] Validation-correct-count=674.000000
2022-10-13 12:09:31,075 Node[0] Epoch[2] Validation-total-count=2083.000000
:::MLLOG {"namespace": "", "time_ms": 1665662971117, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1665662971117, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.3291, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1665662971117, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1665662971118, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 4, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665662971119, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 4}}
2022-10-13 12:09:33,421 Node[0] Epoch[3] Batch [0-20]	Speed: 29033.48 samples/sec	accuracy=nan
2022-10-13 12:09:35,546 Node[0] Epoch[3] Batch [20-40]	Speed: 30728.93 samples/sec	accuracy=nan
2022-10-13 12:09:37,679 Node[0] Epoch[3] Batch [40-60]	Speed: 30605.26 samples/sec	accuracy=nan
2022-10-13 12:09:39,809 Node[0] Epoch[3] Batch [60-80]	Speed: 30651.35 samples/sec	accuracy=nan
2022-10-13 12:09:41,946 Node[0] Epoch[3] Batch [80-100]	Speed: 30540.85 samples/sec	accuracy=nan
2022-10-13 12:09:44,073 Node[0] Epoch[3] Batch [100-120]	Speed: 30694.05 samples/sec	accuracy=nan
2022-10-13 12:09:46,105 Node[0] Epoch[3] Batch [120-140]	Speed: 32130.53 samples/sec	accuracy=nan
2022-10-13 12:09:48,336 Node[0] Epoch[3] Batch [140-160]	Speed: 29255.97 samples/sec	accuracy=nan
2022-10-13 12:09:50,469 Node[0] Epoch[3] Batch [160-180]	Speed: 30606.52 samples/sec	accuracy=nan
2022-10-13 12:09:52,602 Node[0] Epoch[3] Batch [180-200]	Speed: 30603.70 samples/sec	accuracy=nan
2022-10-13 12:09:54,732 Node[0] Epoch[3] Batch [200-220]	Speed: 30637.93 samples/sec	accuracy=nan
2022-10-13 12:09:56,862 Node[0] Epoch[3] Batch [220-240]	Speed: 30649.88 samples/sec	accuracy=nan
2022-10-13 12:09:58,994 Node[0] Epoch[3] Batch [240-260]	Speed: 30620.16 samples/sec	accuracy=nan
2022-10-13 12:10:01,121 Node[0] Epoch[3] Batch [260-280]	Speed: 30695.74 samples/sec	accuracy=nan
2022-10-13 12:10:03,246 Node[0] Epoch[3] Batch [280-300]	Speed: 30726.16 samples/sec	accuracy=nan
2022-10-13 12:10:05,379 Node[0] Epoch[3] Batch [300-320]	Speed: 30592.61 samples/sec	accuracy=nan
2022-10-13 12:10:07,510 Node[0] Epoch[3] Batch [320-340]	Speed: 30635.51 samples/sec	accuracy=nan
2022-10-13 12:10:09,641 Node[0] Epoch[3] Batch [340-360]	Speed: 30632.36 samples/sec	accuracy=nan
2022-10-13 12:10:11,773 Node[0] Epoch[3] Batch [360-380]	Speed: 30624.86 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663013053, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 4}}
2022-10-13 12:10:13,054 Node[0] Epoch[3] Time cost=41.933
:::MLLOG {"namespace": "", "time_ms": 1665663013054, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30552.71845577657}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665663013055, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30552.71845577657, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663013055, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 5}}
2022-10-13 12:10:15,300 Node[0] Epoch[4] Batch [0-20]	Speed: 29287.79 samples/sec	accuracy=nan
2022-10-13 12:10:17,430 Node[0] Epoch[4] Batch [20-40]	Speed: 30617.23 samples/sec	accuracy=nan
2022-10-13 12:10:19,560 Node[0] Epoch[4] Batch [40-60]	Speed: 30648.14 samples/sec	accuracy=nan
2022-10-13 12:10:21,688 Node[0] Epoch[4] Batch [60-80]	Speed: 30673.46 samples/sec	accuracy=nan
2022-10-13 12:10:23,819 Node[0] Epoch[4] Batch [80-100]	Speed: 30640.53 samples/sec	accuracy=nan
2022-10-13 12:10:25,944 Node[0] Epoch[4] Batch [100-120]	Speed: 30711.49 samples/sec	accuracy=nan
2022-10-13 12:10:28,081 Node[0] Epoch[4] Batch [120-140]	Speed: 30551.78 samples/sec	accuracy=nan
2022-10-13 12:10:30,211 Node[0] Epoch[4] Batch [140-160]	Speed: 30651.09 samples/sec	accuracy=nan
2022-10-13 12:10:32,338 Node[0] Epoch[4] Batch [160-180]	Speed: 30689.26 samples/sec	accuracy=nan
2022-10-13 12:10:34,465 Node[0] Epoch[4] Batch [180-200]	Speed: 30689.85 samples/sec	accuracy=nan
2022-10-13 12:10:36,595 Node[0] Epoch[4] Batch [200-220]	Speed: 30642.44 samples/sec	accuracy=nan
2022-10-13 12:10:38,722 Node[0] Epoch[4] Batch [220-240]	Speed: 30693.32 samples/sec	accuracy=nan
2022-10-13 12:10:40,853 Node[0] Epoch[4] Batch [240-260]	Speed: 30635.58 samples/sec	accuracy=nan
2022-10-13 12:10:42,982 Node[0] Epoch[4] Batch [260-280]	Speed: 30660.07 samples/sec	accuracy=nan
2022-10-13 12:10:45,115 Node[0] Epoch[4] Batch [280-300]	Speed: 30605.50 samples/sec	accuracy=nan
2022-10-13 12:10:47,250 Node[0] Epoch[4] Batch [300-320]	Speed: 30574.73 samples/sec	accuracy=nan
2022-10-13 12:10:49,376 Node[0] Epoch[4] Batch [320-340]	Speed: 30714.99 samples/sec	accuracy=nan
2022-10-13 12:10:51,413 Node[0] Epoch[4] Batch [340-360]	Speed: 32041.25 samples/sec	accuracy=nan
2022-10-13 12:10:53,633 Node[0] Epoch[4] Batch [360-380]	Speed: 29403.45 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663054908, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 5}}
2022-10-13 12:10:54,908 Node[0] Epoch[4] Time cost=41.853
:::MLLOG {"namespace": "", "time_ms": 1665663054909, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30611.2624981543}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 5}}
:::MLLOG {"namespace": "", "time_ms": 1665663054909, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30611.2624981543, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663054909, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 6}}
2022-10-13 12:10:57,158 Node[0] Epoch[5] Batch [0-20]	Speed: 30594.87 samples/sec	accuracy=nan
2022-10-13 12:10:59,289 Node[0] Epoch[5] Batch [20-40]	Speed: 30633.66 samples/sec	accuracy=nan
2022-10-13 12:11:01,420 Node[0] Epoch[5] Batch [40-60]	Speed: 30630.78 samples/sec	accuracy=nan
2022-10-13 12:11:03,545 Node[0] Epoch[5] Batch [60-80]	Speed: 30728.45 samples/sec	accuracy=nan
2022-10-13 12:11:05,675 Node[0] Epoch[5] Batch [80-100]	Speed: 30651.58 samples/sec	accuracy=nan
2022-10-13 12:11:07,810 Node[0] Epoch[5] Batch [100-120]	Speed: 30575.38 samples/sec	accuracy=nan
2022-10-13 12:11:09,936 Node[0] Epoch[5] Batch [120-140]	Speed: 30701.46 samples/sec	accuracy=nan
2022-10-13 12:11:12,067 Node[0] Epoch[5] Batch [140-160]	Speed: 30634.29 samples/sec	accuracy=nan
2022-10-13 12:11:14,208 Node[0] Epoch[5] Batch [160-180]	Speed: 30495.53 samples/sec	accuracy=nan
2022-10-13 12:11:16,337 Node[0] Epoch[5] Batch [180-200]	Speed: 30650.81 samples/sec	accuracy=nan
2022-10-13 12:11:18,467 Node[0] Epoch[5] Batch [200-220]	Speed: 30657.68 samples/sec	accuracy=nan
2022-10-13 12:11:20,594 Node[0] Epoch[5] Batch [220-240]	Speed: 30692.42 samples/sec	accuracy=nan
2022-10-13 12:11:22,719 Node[0] Epoch[5] Batch [240-260]	Speed: 30710.46 samples/sec	accuracy=nan
2022-10-13 12:11:24,854 Node[0] Epoch[5] Batch [260-280]	Speed: 30584.41 samples/sec	accuracy=nan
2022-10-13 12:11:26,982 Node[0] Epoch[5] Batch [280-300]	Speed: 30671.37 samples/sec	accuracy=nan
2022-10-13 12:11:29,114 Node[0] Epoch[5] Batch [300-320]	Speed: 30623.84 samples/sec	accuracy=nan
2022-10-13 12:11:31,247 Node[0] Epoch[5] Batch [320-340]	Speed: 30592.98 samples/sec	accuracy=nan
2022-10-13 12:11:33,382 Node[0] Epoch[5] Batch [340-360]	Speed: 30587.42 samples/sec	accuracy=nan
2022-10-13 12:11:35,509 Node[0] Epoch[5] Batch [360-380]	Speed: 30681.71 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663096787, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 6}}
2022-10-13 12:11:36,787 Node[0] Epoch[5] Time cost=41.878
:::MLLOG {"namespace": "", "time_ms": 1665663096787, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30593.002899581046}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 6}}
:::MLLOG {"namespace": "", "time_ms": 1665663096787, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30593.002899581046, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663096787, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 7}}
2022-10-13 12:11:38,930 Node[0] Epoch[6] Batch [0-20]	Speed: 32184.17 samples/sec	accuracy=nan
2022-10-13 12:11:41,161 Node[0] Epoch[6] Batch [20-40]	Speed: 29256.07 samples/sec	accuracy=nan
2022-10-13 12:11:43,296 Node[0] Epoch[6] Batch [40-60]	Speed: 30577.63 samples/sec	accuracy=nan
2022-10-13 12:11:45,424 Node[0] Epoch[6] Batch [60-80]	Speed: 30674.96 samples/sec	accuracy=nan
2022-10-13 12:11:47,557 Node[0] Epoch[6] Batch [80-100]	Speed: 30601.12 samples/sec	accuracy=nan
2022-10-13 12:11:49,690 Node[0] Epoch[6] Batch [100-120]	Speed: 30610.08 samples/sec	accuracy=nan
2022-10-13 12:11:51,820 Node[0] Epoch[6] Batch [120-140]	Speed: 30645.20 samples/sec	accuracy=nan
2022-10-13 12:11:53,950 Node[0] Epoch[6] Batch [140-160]	Speed: 30657.03 samples/sec	accuracy=nan
2022-10-13 12:11:56,083 Node[0] Epoch[6] Batch [160-180]	Speed: 30589.66 samples/sec	accuracy=nan
2022-10-13 12:11:58,219 Node[0] Epoch[6] Batch [180-200]	Speed: 30574.96 samples/sec	accuracy=nan
2022-10-13 12:12:00,344 Node[0] Epoch[6] Batch [200-220]	Speed: 30715.71 samples/sec	accuracy=nan
2022-10-13 12:12:02,472 Node[0] Epoch[6] Batch [220-240]	Speed: 30677.53 samples/sec	accuracy=nan
2022-10-13 12:12:04,595 Node[0] Epoch[6] Batch [240-260]	Speed: 30750.25 samples/sec	accuracy=nan
2022-10-13 12:12:06,725 Node[0] Epoch[6] Batch [260-280]	Speed: 30635.99 samples/sec	accuracy=nan
2022-10-13 12:12:08,854 Node[0] Epoch[6] Batch [280-300]	Speed: 30674.35 samples/sec	accuracy=nan
2022-10-13 12:12:10,980 Node[0] Epoch[6] Batch [300-320]	Speed: 30702.14 samples/sec	accuracy=nan
2022-10-13 12:12:13,108 Node[0] Epoch[6] Batch [320-340]	Speed: 30679.68 samples/sec	accuracy=nan
2022-10-13 12:12:15,236 Node[0] Epoch[6] Batch [340-360]	Speed: 30666.78 samples/sec	accuracy=nan
2022-10-13 12:12:17,367 Node[0] Epoch[6] Batch [360-380]	Speed: 30634.55 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663138650, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 7}}
2022-10-13 12:12:18,650 Node[0] Epoch[6] Time cost=41.863
:::MLLOG {"namespace": "", "time_ms": 1665663138650, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30603.8259491462}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 7}}
:::MLLOG {"namespace": "", "time_ms": 1665663138650, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30603.8259491462, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663138750, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 7}}
2022-10-13 12:12:19,539 Node[0] Epoch[6] Validation-accuracy=0.469515
2022-10-13 12:12:19,539 Node[0] Epoch[6] Validation-correct-count=978.000000
2022-10-13 12:12:19,539 Node[0] Epoch[6] Validation-total-count=2083.000000
:::MLLOG {"namespace": "", "time_ms": 1665663139597, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1665663139598, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.464, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1665663139614, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665663139615, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 8, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665663139615, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 8}}
2022-10-13 12:12:21,828 Node[0] Epoch[7] Batch [0-20]	Speed: 29686.60 samples/sec	accuracy=nan
2022-10-13 12:12:23,963 Node[0] Epoch[7] Batch [20-40]	Speed: 30576.46 samples/sec	accuracy=nan
2022-10-13 12:12:26,093 Node[0] Epoch[7] Batch [40-60]	Speed: 30648.23 samples/sec	accuracy=nan
2022-10-13 12:12:28,221 Node[0] Epoch[7] Batch [60-80]	Speed: 30671.78 samples/sec	accuracy=nan
2022-10-13 12:12:30,349 Node[0] Epoch[7] Batch [80-100]	Speed: 30676.10 samples/sec	accuracy=nan
2022-10-13 12:12:32,479 Node[0] Epoch[7] Batch [100-120]	Speed: 30645.06 samples/sec	accuracy=nan
2022-10-13 12:12:34,607 Node[0] Epoch[7] Batch [120-140]	Speed: 30678.05 samples/sec	accuracy=nan
2022-10-13 12:12:36,740 Node[0] Epoch[7] Batch [140-160]	Speed: 30602.81 samples/sec	accuracy=nan
2022-10-13 12:12:38,867 Node[0] Epoch[7] Batch [160-180]	Speed: 30695.27 samples/sec	accuracy=nan
2022-10-13 12:12:40,996 Node[0] Epoch[7] Batch [180-200]	Speed: 30667.95 samples/sec	accuracy=nan
2022-10-13 12:12:43,123 Node[0] Epoch[7] Batch [200-220]	Speed: 30694.74 samples/sec	accuracy=nan
2022-10-13 12:12:45,247 Node[0] Epoch[7] Batch [220-240]	Speed: 30721.45 samples/sec	accuracy=nan
2022-10-13 12:12:47,375 Node[0] Epoch[7] Batch [240-260]	Speed: 30680.24 samples/sec	accuracy=nan
2022-10-13 12:12:49,501 Node[0] Epoch[7] Batch [260-280]	Speed: 30700.70 samples/sec	accuracy=nan
2022-10-13 12:12:51,626 Node[0] Epoch[7] Batch [280-300]	Speed: 30719.92 samples/sec	accuracy=nan
2022-10-13 12:12:53,758 Node[0] Epoch[7] Batch [300-320]	Speed: 30630.15 samples/sec	accuracy=nan
2022-10-13 12:12:55,888 Node[0] Epoch[7] Batch [320-340]	Speed: 30646.70 samples/sec	accuracy=nan
2022-10-13 12:12:58,020 Node[0] Epoch[7] Batch [340-360]	Speed: 30611.54 samples/sec	accuracy=nan
2022-10-13 12:13:00,153 Node[0] Epoch[7] Batch [360-380]	Speed: 30606.20 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663181427, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 8}}
2022-10-13 12:13:01,427 Node[0] Epoch[7] Time cost=41.812
:::MLLOG {"namespace": "", "time_ms": 1665663181427, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30640.893913154545}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 8}}
:::MLLOG {"namespace": "", "time_ms": 1665663181428, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30640.893913154545, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663181428, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 9}}
2022-10-13 12:13:03,668 Node[0] Epoch[8] Batch [0-20]	Speed: 30682.49 samples/sec	accuracy=nan
2022-10-13 12:13:05,798 Node[0] Epoch[8] Batch [20-40]	Speed: 30653.98 samples/sec	accuracy=nan
2022-10-13 12:13:07,927 Node[0] Epoch[8] Batch [40-60]	Speed: 30658.97 samples/sec	accuracy=nan
2022-10-13 12:13:10,055 Node[0] Epoch[8] Batch [60-80]	Speed: 30682.43 samples/sec	accuracy=nan
2022-10-13 12:13:12,186 Node[0] Epoch[8] Batch [80-100]	Speed: 30633.85 samples/sec	accuracy=nan
2022-10-13 12:13:14,322 Node[0] Epoch[8] Batch [100-120]	Speed: 30558.47 samples/sec	accuracy=nan
2022-10-13 12:13:16,459 Node[0] Epoch[8] Batch [120-140]	Speed: 30547.49 samples/sec	accuracy=nan
2022-10-13 12:13:18,587 Node[0] Epoch[8] Batch [140-160]	Speed: 30669.89 samples/sec	accuracy=nan
2022-10-13 12:13:20,726 Node[0] Epoch[8] Batch [160-180]	Speed: 30517.99 samples/sec	accuracy=nan
2022-10-13 12:13:22,856 Node[0] Epoch[8] Batch [180-200]	Speed: 30652.23 samples/sec	accuracy=nan
2022-10-13 12:13:24,990 Node[0] Epoch[8] Batch [200-220]	Speed: 30595.81 samples/sec	accuracy=nan
2022-10-13 12:13:27,116 Node[0] Epoch[8] Batch [220-240]	Speed: 30696.46 samples/sec	accuracy=nan
2022-10-13 12:13:29,249 Node[0] Epoch[8] Batch [240-260]	Speed: 30608.52 samples/sec	accuracy=nan
2022-10-13 12:13:31,382 Node[0] Epoch[8] Batch [260-280]	Speed: 30598.96 samples/sec	accuracy=nan
2022-10-13 12:13:33,507 Node[0] Epoch[8] Batch [280-300]	Speed: 30725.96 samples/sec	accuracy=nan
2022-10-13 12:13:35,640 Node[0] Epoch[8] Batch [300-320]	Speed: 30603.85 samples/sec	accuracy=nan
2022-10-13 12:13:37,768 Node[0] Epoch[8] Batch [320-340]	Speed: 30673.61 samples/sec	accuracy=nan
2022-10-13 12:13:39,904 Node[0] Epoch[8] Batch [340-360]	Speed: 30567.59 samples/sec	accuracy=nan
2022-10-13 12:13:42,031 Node[0] Epoch[8] Batch [360-380]	Speed: 30683.31 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663223303, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 9}}
2022-10-13 12:13:43,304 Node[0] Epoch[8] Time cost=41.875
:::MLLOG {"namespace": "", "time_ms": 1665663223304, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30594.786351590014}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 9}}
:::MLLOG {"namespace": "", "time_ms": 1665663223304, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30594.786351590014, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663223304, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 10}}
2022-10-13 12:13:45,552 Node[0] Epoch[9] Batch [0-20]	Speed: 30560.29 samples/sec	accuracy=nan
2022-10-13 12:13:47,682 Node[0] Epoch[9] Batch [20-40]	Speed: 30650.68 samples/sec	accuracy=nan
2022-10-13 12:13:49,811 Node[0] Epoch[9] Batch [40-60]	Speed: 30659.84 samples/sec	accuracy=nan
2022-10-13 12:13:51,935 Node[0] Epoch[9] Batch [60-80]	Speed: 30741.19 samples/sec	accuracy=nan
2022-10-13 12:13:54,060 Node[0] Epoch[9] Batch [80-100]	Speed: 30711.85 samples/sec	accuracy=nan
2022-10-13 12:13:56,094 Node[0] Epoch[9] Batch [100-120]	Speed: 32105.40 samples/sec	accuracy=nan
2022-10-13 12:13:58,318 Node[0] Epoch[9] Batch [120-140]	Speed: 29348.99 samples/sec	accuracy=nan
2022-10-13 12:14:00,445 Node[0] Epoch[9] Batch [140-160]	Speed: 30686.64 samples/sec	accuracy=nan
2022-10-13 12:14:02,571 Node[0] Epoch[9] Batch [160-180]	Speed: 30709.27 samples/sec	accuracy=nan
2022-10-13 12:14:04,703 Node[0] Epoch[9] Batch [180-200]	Speed: 30625.09 samples/sec	accuracy=nan
2022-10-13 12:14:06,834 Node[0] Epoch[9] Batch [200-220]	Speed: 30633.07 samples/sec	accuracy=nan
2022-10-13 12:14:08,965 Node[0] Epoch[9] Batch [220-240]	Speed: 30634.78 samples/sec	accuracy=nan
2022-10-13 12:14:11,092 Node[0] Epoch[9] Batch [240-260]	Speed: 30692.44 samples/sec	accuracy=nan
2022-10-13 12:14:13,122 Node[0] Epoch[9] Batch [260-280]	Speed: 32150.36 samples/sec	accuracy=nan
2022-10-13 12:14:15,344 Node[0] Epoch[9] Batch [280-300]	Speed: 29382.18 samples/sec	accuracy=nan
2022-10-13 12:14:17,476 Node[0] Epoch[9] Batch [300-320]	Speed: 30610.23 samples/sec	accuracy=nan
2022-10-13 12:14:19,607 Node[0] Epoch[9] Batch [320-340]	Speed: 30636.88 samples/sec	accuracy=nan
2022-10-13 12:14:21,734 Node[0] Epoch[9] Batch [340-360]	Speed: 30693.48 samples/sec	accuracy=nan
2022-10-13 12:14:23,870 Node[0] Epoch[9] Batch [360-380]	Speed: 30556.85 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663265150, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 10}}
2022-10-13 12:14:25,151 Node[0] Epoch[9] Time cost=41.847
:::MLLOG {"namespace": "", "time_ms": 1665663265152, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30615.25597379068}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 10}}
:::MLLOG {"namespace": "", "time_ms": 1665663265152, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30615.25597379068, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663265152, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 11}}
2022-10-13 12:14:27,199 Node[0] Epoch[10] Batch [0-20]	Speed: 32083.72 samples/sec	accuracy=nan
2022-10-13 12:14:29,435 Node[0] Epoch[10] Batch [20-40]	Speed: 29198.15 samples/sec	accuracy=nan
2022-10-13 12:14:31,655 Node[0] Epoch[10] Batch [40-60]	Speed: 29398.99 samples/sec	accuracy=nan
2022-10-13 12:14:33,781 Node[0] Epoch[10] Batch [60-80]	Speed: 30715.49 samples/sec	accuracy=nan
2022-10-13 12:14:35,816 Node[0] Epoch[10] Batch [80-100]	Speed: 32079.48 samples/sec	accuracy=nan
2022-10-13 12:14:38,041 Node[0] Epoch[10] Batch [100-120]	Speed: 29329.28 samples/sec	accuracy=nan
2022-10-13 12:14:40,170 Node[0] Epoch[10] Batch [120-140]	Speed: 30673.65 samples/sec	accuracy=nan
2022-10-13 12:14:42,297 Node[0] Epoch[10] Batch [140-160]	Speed: 30682.07 samples/sec	accuracy=nan
2022-10-13 12:14:44,422 Node[0] Epoch[10] Batch [160-180]	Speed: 30724.38 samples/sec	accuracy=nan
2022-10-13 12:14:46,549 Node[0] Epoch[10] Batch [180-200]	Speed: 30695.18 samples/sec	accuracy=nan
2022-10-13 12:14:48,680 Node[0] Epoch[10] Batch [200-220]	Speed: 30633.45 samples/sec	accuracy=nan
2022-10-13 12:14:50,810 Node[0] Epoch[10] Batch [220-240]	Speed: 30643.23 samples/sec	accuracy=nan
2022-10-13 12:14:52,941 Node[0] Epoch[10] Batch [240-260]	Speed: 30637.09 samples/sec	accuracy=nan
2022-10-13 12:14:55,075 Node[0] Epoch[10] Batch [260-280]	Speed: 30587.03 samples/sec	accuracy=nan
2022-10-13 12:14:57,211 Node[0] Epoch[10] Batch [280-300]	Speed: 30556.96 samples/sec	accuracy=nan
2022-10-13 12:14:59,332 Node[0] Epoch[10] Batch [300-320]	Speed: 30782.48 samples/sec	accuracy=nan
2022-10-13 12:15:01,460 Node[0] Epoch[10] Batch [320-340]	Speed: 30673.87 samples/sec	accuracy=nan
2022-10-13 12:15:03,591 Node[0] Epoch[10] Batch [340-360]	Speed: 30637.95 samples/sec	accuracy=nan
2022-10-13 12:15:05,722 Node[0] Epoch[10] Batch [360-380]	Speed: 30632.36 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663306998, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 11}}
2022-10-13 12:15:06,998 Node[0] Epoch[10] Time cost=41.846
:::MLLOG {"namespace": "", "time_ms": 1665663306998, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30616.368500478857}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 11}}
:::MLLOG {"namespace": "", "time_ms": 1665663306998, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30616.368500478857, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663307099, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 11}}
2022-10-13 12:15:07,888 Node[0] Epoch[10] Validation-accuracy=0.498560
2022-10-13 12:15:07,888 Node[0] Epoch[10] Validation-correct-count=1039.000000
2022-10-13 12:15:07,888 Node[0] Epoch[10] Validation-total-count=2084.000000
:::MLLOG {"namespace": "", "time_ms": 1665663307913, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1665663307913, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.49722, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1665663307913, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 8}}
:::MLLOG {"namespace": "", "time_ms": 1665663307913, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 12, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665663307914, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 12}}
2022-10-13 12:15:10,166 Node[0] Epoch[11] Batch [0-20]	Speed: 29224.90 samples/sec	accuracy=nan
2022-10-13 12:15:12,290 Node[0] Epoch[11] Batch [20-40]	Speed: 30729.51 samples/sec	accuracy=nan
2022-10-13 12:15:14,423 Node[0] Epoch[11] Batch [40-60]	Speed: 30605.90 samples/sec	accuracy=nan
2022-10-13 12:15:16,554 Node[0] Epoch[11] Batch [60-80]	Speed: 30635.65 samples/sec	accuracy=nan
2022-10-13 12:15:18,581 Node[0] Epoch[11] Batch [80-100]	Speed: 32204.38 samples/sec	accuracy=nan
2022-10-13 12:15:20,811 Node[0] Epoch[11] Batch [100-120]	Speed: 29272.49 samples/sec	accuracy=nan
2022-10-13 12:15:22,938 Node[0] Epoch[11] Batch [120-140]	Speed: 30688.92 samples/sec	accuracy=nan
2022-10-13 12:15:25,070 Node[0] Epoch[11] Batch [140-160]	Speed: 30631.30 samples/sec	accuracy=nan
2022-10-13 12:15:27,198 Node[0] Epoch[11] Batch [160-180]	Speed: 30669.44 samples/sec	accuracy=nan
2022-10-13 12:15:29,332 Node[0] Epoch[11] Batch [180-200]	Speed: 30598.06 samples/sec	accuracy=nan
2022-10-13 12:15:31,454 Node[0] Epoch[11] Batch [200-220]	Speed: 30763.52 samples/sec	accuracy=nan
2022-10-13 12:15:33,581 Node[0] Epoch[11] Batch [220-240]	Speed: 30687.73 samples/sec	accuracy=nan
2022-10-13 12:15:35,710 Node[0] Epoch[11] Batch [240-260]	Speed: 30662.91 samples/sec	accuracy=nan
2022-10-13 12:15:37,843 Node[0] Epoch[11] Batch [260-280]	Speed: 30603.52 samples/sec	accuracy=nan
2022-10-13 12:15:39,976 Node[0] Epoch[11] Batch [280-300]	Speed: 30607.26 samples/sec	accuracy=nan
2022-10-13 12:15:42,105 Node[0] Epoch[11] Batch [300-320]	Speed: 30656.78 samples/sec	accuracy=nan
2022-10-13 12:15:44,238 Node[0] Epoch[11] Batch [320-340]	Speed: 30611.38 samples/sec	accuracy=nan
2022-10-13 12:15:46,370 Node[0] Epoch[11] Batch [340-360]	Speed: 30606.19 samples/sec	accuracy=nan
2022-10-13 12:15:48,506 Node[0] Epoch[11] Batch [360-380]	Speed: 30574.31 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663349783, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 12}}
2022-10-13 12:15:49,783 Node[0] Epoch[11] Time cost=41.870
:::MLLOG {"namespace": "", "time_ms": 1665663349783, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30598.894185642588}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 12}}
:::MLLOG {"namespace": "", "time_ms": 1665663349784, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30598.894185642588, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663349784, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 13}}
2022-10-13 12:15:52,029 Node[0] Epoch[12] Batch [0-20]	Speed: 30627.37 samples/sec	accuracy=nan
2022-10-13 12:15:54,161 Node[0] Epoch[12] Batch [20-40]	Speed: 30614.91 samples/sec	accuracy=nan
2022-10-13 12:15:56,199 Node[0] Epoch[12] Batch [40-60]	Speed: 32036.91 samples/sec	accuracy=nan
2022-10-13 12:15:58,424 Node[0] Epoch[12] Batch [60-80]	Speed: 29344.63 samples/sec	accuracy=nan
2022-10-13 12:16:00,551 Node[0] Epoch[12] Batch [80-100]	Speed: 30683.63 samples/sec	accuracy=nan
2022-10-13 12:16:02,686 Node[0] Epoch[12] Batch [100-120]	Speed: 30578.12 samples/sec	accuracy=nan
2022-10-13 12:16:04,815 Node[0] Epoch[12] Batch [120-140]	Speed: 30659.10 samples/sec	accuracy=nan
2022-10-13 12:16:06,947 Node[0] Epoch[12] Batch [140-160]	Speed: 30627.58 samples/sec	accuracy=nan
2022-10-13 12:16:09,080 Node[0] Epoch[12] Batch [160-180]	Speed: 30593.74 samples/sec	accuracy=nan
2022-10-13 12:16:11,111 Node[0] Epoch[12] Batch [180-200]	Speed: 32154.02 samples/sec	accuracy=nan
2022-10-13 12:16:13,338 Node[0] Epoch[12] Batch [200-220]	Speed: 29313.71 samples/sec	accuracy=nan
2022-10-13 12:16:15,465 Node[0] Epoch[12] Batch [220-240]	Speed: 30684.93 samples/sec	accuracy=nan
2022-10-13 12:16:17,594 Node[0] Epoch[12] Batch [240-260]	Speed: 30662.00 samples/sec	accuracy=nan
2022-10-13 12:16:19,725 Node[0] Epoch[12] Batch [260-280]	Speed: 30638.14 samples/sec	accuracy=nan
2022-10-13 12:16:21,853 Node[0] Epoch[12] Batch [280-300]	Speed: 30671.19 samples/sec	accuracy=nan
2022-10-13 12:16:23,985 Node[0] Epoch[12] Batch [300-320]	Speed: 30615.50 samples/sec	accuracy=nan
2022-10-13 12:16:26,110 Node[0] Epoch[12] Batch [320-340]	Speed: 30726.23 samples/sec	accuracy=nan
2022-10-13 12:16:28,240 Node[0] Epoch[12] Batch [340-360]	Speed: 30648.04 samples/sec	accuracy=nan
2022-10-13 12:16:30,368 Node[0] Epoch[12] Batch [360-380]	Speed: 30683.32 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663391642, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 13}}
2022-10-13 12:16:31,643 Node[0] Epoch[12] Time cost=41.859
:::MLLOG {"namespace": "", "time_ms": 1665663391643, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30606.73782998442}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 13}}
:::MLLOG {"namespace": "", "time_ms": 1665663391643, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30606.73782998442, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663391643, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 14}}
2022-10-13 12:16:33,796 Node[0] Epoch[13] Batch [0-20]	Speed: 32121.91 samples/sec	accuracy=nan
2022-10-13 12:16:36,022 Node[0] Epoch[13] Batch [20-40]	Speed: 29322.17 samples/sec	accuracy=nan
2022-10-13 12:16:38,150 Node[0] Epoch[13] Batch [40-60]	Speed: 30688.37 samples/sec	accuracy=nan
2022-10-13 12:16:40,278 Node[0] Epoch[13] Batch [60-80]	Speed: 30668.23 samples/sec	accuracy=nan
2022-10-13 12:16:42,410 Node[0] Epoch[13] Batch [80-100]	Speed: 30615.95 samples/sec	accuracy=nan
2022-10-13 12:16:44,543 Node[0] Epoch[13] Batch [100-120]	Speed: 30613.33 samples/sec	accuracy=nan
2022-10-13 12:16:46,673 Node[0] Epoch[13] Batch [120-140]	Speed: 30646.59 samples/sec	accuracy=nan
2022-10-13 12:16:48,803 Node[0] Epoch[13] Batch [140-160]	Speed: 30640.25 samples/sec	accuracy=nan
2022-10-13 12:16:50,936 Node[0] Epoch[13] Batch [160-180]	Speed: 30607.78 samples/sec	accuracy=nan
2022-10-13 12:16:53,063 Node[0] Epoch[13] Batch [180-200]	Speed: 30699.53 samples/sec	accuracy=nan
2022-10-13 12:16:55,191 Node[0] Epoch[13] Batch [200-220]	Speed: 30673.23 samples/sec	accuracy=nan
2022-10-13 12:16:57,322 Node[0] Epoch[13] Batch [220-240]	Speed: 30627.82 samples/sec	accuracy=nan
2022-10-13 12:16:59,454 Node[0] Epoch[13] Batch [240-260]	Speed: 30627.89 samples/sec	accuracy=nan
2022-10-13 12:17:01,584 Node[0] Epoch[13] Batch [260-280]	Speed: 30645.62 samples/sec	accuracy=nan
2022-10-13 12:17:03,715 Node[0] Epoch[13] Batch [280-300]	Speed: 30635.44 samples/sec	accuracy=nan
2022-10-13 12:17:05,851 Node[0] Epoch[13] Batch [300-320]	Speed: 30557.56 samples/sec	accuracy=nan
2022-10-13 12:17:07,979 Node[0] Epoch[13] Batch [320-340]	Speed: 30673.54 samples/sec	accuracy=nan
2022-10-13 12:17:10,106 Node[0] Epoch[13] Batch [340-360]	Speed: 30688.80 samples/sec	accuracy=nan
2022-10-13 12:17:12,237 Node[0] Epoch[13] Batch [360-380]	Speed: 30646.08 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663433513, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 14}}
2022-10-13 12:17:13,514 Node[0] Epoch[13] Time cost=41.870
:::MLLOG {"namespace": "", "time_ms": 1665663433514, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30598.34934943222}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 14}}
:::MLLOG {"namespace": "", "time_ms": 1665663433514, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30598.34934943222, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663433514, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 15}}
2022-10-13 12:17:15,755 Node[0] Epoch[14] Batch [0-20]	Speed: 30925.40 samples/sec	accuracy=nan
2022-10-13 12:17:17,790 Node[0] Epoch[14] Batch [20-40]	Speed: 32071.43 samples/sec	accuracy=nan
2022-10-13 12:17:20,014 Node[0] Epoch[14] Batch [40-60]	Speed: 29351.93 samples/sec	accuracy=nan
2022-10-13 12:17:22,140 Node[0] Epoch[14] Batch [60-80]	Speed: 30711.77 samples/sec	accuracy=nan
2022-10-13 12:17:24,272 Node[0] Epoch[14] Batch [80-100]	Speed: 30617.11 samples/sec	accuracy=nan
2022-10-13 12:17:26,403 Node[0] Epoch[14] Batch [100-120]	Speed: 30639.71 samples/sec	accuracy=nan
2022-10-13 12:17:28,536 Node[0] Epoch[14] Batch [120-140]	Speed: 30606.10 samples/sec	accuracy=nan
2022-10-13 12:17:30,672 Node[0] Epoch[14] Batch [140-160]	Speed: 30549.06 samples/sec	accuracy=nan
2022-10-13 12:17:32,801 Node[0] Epoch[14] Batch [160-180]	Speed: 30673.16 samples/sec	accuracy=nan
2022-10-13 12:17:34,930 Node[0] Epoch[14] Batch [180-200]	Speed: 30651.14 samples/sec	accuracy=nan
2022-10-13 12:17:37,064 Node[0] Epoch[14] Batch [200-220]	Speed: 30598.83 samples/sec	accuracy=nan
2022-10-13 12:17:39,191 Node[0] Epoch[14] Batch [220-240]	Speed: 30696.44 samples/sec	accuracy=nan
2022-10-13 12:17:41,317 Node[0] Epoch[14] Batch [240-260]	Speed: 30701.14 samples/sec	accuracy=nan
2022-10-13 12:17:43,448 Node[0] Epoch[14] Batch [260-280]	Speed: 30638.00 samples/sec	accuracy=nan
2022-10-13 12:17:45,579 Node[0] Epoch[14] Batch [280-300]	Speed: 30632.58 samples/sec	accuracy=nan
2022-10-13 12:17:47,712 Node[0] Epoch[14] Batch [300-320]	Speed: 30605.92 samples/sec	accuracy=nan
2022-10-13 12:17:49,839 Node[0] Epoch[14] Batch [320-340]	Speed: 30683.08 samples/sec	accuracy=nan
2022-10-13 12:17:51,971 Node[0] Epoch[14] Batch [340-360]	Speed: 30625.65 samples/sec	accuracy=nan
2022-10-13 12:17:54,099 Node[0] Epoch[14] Batch [360-380]	Speed: 30669.82 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663475376, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 15}}
2022-10-13 12:17:55,376 Node[0] Epoch[14] Time cost=41.862
:::MLLOG {"namespace": "", "time_ms": 1665663475376, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30604.616747578486}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 15}}
:::MLLOG {"namespace": "", "time_ms": 1665663475376, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30604.616747578486, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663475477, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 15}}
2022-10-13 12:17:56,314 Node[0] Epoch[14] Validation-accuracy=0.589534
2022-10-13 12:17:56,314 Node[0] Epoch[14] Validation-correct-count=1228.000000
2022-10-13 12:17:56,314 Node[0] Epoch[14] Validation-total-count=2083.000000
:::MLLOG {"namespace": "", "time_ms": 1665663476314, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 15}}
:::MLLOG {"namespace": "", "time_ms": 1665663476315, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.58862, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 15}}
:::MLLOG {"namespace": "", "time_ms": 1665663476315, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 12}}
:::MLLOG {"namespace": "", "time_ms": 1665663476315, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 16, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665663476315, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 16}}
2022-10-13 12:17:58,572 Node[0] Epoch[15] Batch [0-20]	Speed: 29232.81 samples/sec	accuracy=nan
2022-10-13 12:18:00,696 Node[0] Epoch[15] Batch [20-40]	Speed: 30734.55 samples/sec	accuracy=nan
2022-10-13 12:18:02,825 Node[0] Epoch[15] Batch [40-60]	Speed: 30662.93 samples/sec	accuracy=nan
2022-10-13 12:18:04,950 Node[0] Epoch[15] Batch [60-80]	Speed: 30719.15 samples/sec	accuracy=nan
2022-10-13 12:18:07,079 Node[0] Epoch[15] Batch [80-100]	Speed: 30669.31 samples/sec	accuracy=nan
2022-10-13 12:18:09,207 Node[0] Epoch[15] Batch [100-120]	Speed: 30670.21 samples/sec	accuracy=nan
2022-10-13 12:18:11,336 Node[0] Epoch[15] Batch [120-140]	Speed: 30668.65 samples/sec	accuracy=nan
2022-10-13 12:18:13,464 Node[0] Epoch[15] Batch [140-160]	Speed: 30675.05 samples/sec	accuracy=nan
2022-10-13 12:18:15,594 Node[0] Epoch[15] Batch [160-180]	Speed: 30638.98 samples/sec	accuracy=nan
2022-10-13 12:18:17,719 Node[0] Epoch[15] Batch [180-200]	Speed: 30726.85 samples/sec	accuracy=nan
2022-10-13 12:18:19,853 Node[0] Epoch[15] Batch [200-220]	Speed: 30593.62 samples/sec	accuracy=nan
2022-10-13 12:18:21,984 Node[0] Epoch[15] Batch [220-240]	Speed: 30626.12 samples/sec	accuracy=nan
2022-10-13 12:18:24,114 Node[0] Epoch[15] Batch [240-260]	Speed: 30644.75 samples/sec	accuracy=nan
2022-10-13 12:18:26,244 Node[0] Epoch[15] Batch [260-280]	Speed: 30649.19 samples/sec	accuracy=nan
2022-10-13 12:18:28,373 Node[0] Epoch[15] Batch [280-300]	Speed: 30670.11 samples/sec	accuracy=nan
2022-10-13 12:18:30,500 Node[0] Epoch[15] Batch [300-320]	Speed: 30693.50 samples/sec	accuracy=nan
2022-10-13 12:18:32,626 Node[0] Epoch[15] Batch [320-340]	Speed: 30700.45 samples/sec	accuracy=nan
2022-10-13 12:18:34,755 Node[0] Epoch[15] Batch [340-360]	Speed: 30662.91 samples/sec	accuracy=nan
2022-10-13 12:18:36,883 Node[0] Epoch[15] Batch [360-380]	Speed: 30680.36 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663518158, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 16}}
2022-10-13 12:18:38,159 Node[0] Epoch[15] Time cost=41.844
:::MLLOG {"namespace": "", "time_ms": 1665663518159, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30617.996270266252}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 16}}
:::MLLOG {"namespace": "", "time_ms": 1665663518159, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30617.996270266252, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663518159, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 17}}
2022-10-13 12:18:40,402 Node[0] Epoch[16] Batch [0-20]	Speed: 30609.91 samples/sec	accuracy=nan
2022-10-13 12:18:42,528 Node[0] Epoch[16] Batch [20-40]	Speed: 30704.54 samples/sec	accuracy=nan
2022-10-13 12:18:44,659 Node[0] Epoch[16] Batch [40-60]	Speed: 30634.28 samples/sec	accuracy=nan
2022-10-13 12:18:46,787 Node[0] Epoch[16] Batch [60-80]	Speed: 30673.32 samples/sec	accuracy=nan
2022-10-13 12:18:48,917 Node[0] Epoch[16] Batch [80-100]	Speed: 30651.64 samples/sec	accuracy=nan
2022-10-13 12:18:51,042 Node[0] Epoch[16] Batch [100-120]	Speed: 30715.49 samples/sec	accuracy=nan
2022-10-13 12:18:53,170 Node[0] Epoch[16] Batch [120-140]	Speed: 30675.63 samples/sec	accuracy=nan
2022-10-13 12:18:55,298 Node[0] Epoch[16] Batch [140-160]	Speed: 30680.20 samples/sec	accuracy=nan
2022-10-13 12:18:57,428 Node[0] Epoch[16] Batch [160-180]	Speed: 30642.67 samples/sec	accuracy=nan
2022-10-13 12:18:59,558 Node[0] Epoch[16] Batch [180-200]	Speed: 30649.20 samples/sec	accuracy=nan
2022-10-13 12:19:01,688 Node[0] Epoch[16] Batch [200-220]	Speed: 30654.91 samples/sec	accuracy=nan
2022-10-13 12:19:03,814 Node[0] Epoch[16] Batch [220-240]	Speed: 30697.26 samples/sec	accuracy=nan
2022-10-13 12:19:05,942 Node[0] Epoch[16] Batch [240-260]	Speed: 30679.91 samples/sec	accuracy=nan
2022-10-13 12:19:08,075 Node[0] Epoch[16] Batch [260-280]	Speed: 30606.77 samples/sec	accuracy=nan
2022-10-13 12:19:10,203 Node[0] Epoch[16] Batch [280-300]	Speed: 30673.07 samples/sec	accuracy=nan
2022-10-13 12:19:12,337 Node[0] Epoch[16] Batch [300-320]	Speed: 30590.34 samples/sec	accuracy=nan
2022-10-13 12:19:14,465 Node[0] Epoch[16] Batch [320-340]	Speed: 30682.69 samples/sec	accuracy=nan
2022-10-13 12:19:16,593 Node[0] Epoch[16] Batch [340-360]	Speed: 30679.09 samples/sec	accuracy=nan
2022-10-13 12:19:18,720 Node[0] Epoch[16] Batch [360-380]	Speed: 30692.05 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663559994, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 17}}
2022-10-13 12:19:19,995 Node[0] Epoch[16] Time cost=41.835
:::MLLOG {"namespace": "", "time_ms": 1665663559995, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30624.175904556043}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 17}}
:::MLLOG {"namespace": "", "time_ms": 1665663559995, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30624.175904556043, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663559996, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 18}}
2022-10-13 12:19:22,238 Node[0] Epoch[17] Batch [0-20]	Speed: 30625.57 samples/sec	accuracy=nan
2022-10-13 12:19:24,369 Node[0] Epoch[17] Batch [20-40]	Speed: 30642.60 samples/sec	accuracy=nan
2022-10-13 12:19:26,498 Node[0] Epoch[17] Batch [40-60]	Speed: 30655.23 samples/sec	accuracy=nan
2022-10-13 12:19:28,630 Node[0] Epoch[17] Batch [60-80]	Speed: 30622.44 samples/sec	accuracy=nan
2022-10-13 12:19:30,760 Node[0] Epoch[17] Batch [80-100]	Speed: 30653.40 samples/sec	accuracy=nan
2022-10-13 12:19:32,891 Node[0] Epoch[17] Batch [100-120]	Speed: 30625.21 samples/sec	accuracy=nan
2022-10-13 12:19:35,024 Node[0] Epoch[17] Batch [120-140]	Speed: 30600.82 samples/sec	accuracy=nan
2022-10-13 12:19:37,158 Node[0] Epoch[17] Batch [140-160]	Speed: 30593.21 samples/sec	accuracy=nan
2022-10-13 12:19:39,192 Node[0] Epoch[17] Batch [160-180]	Speed: 32098.99 samples/sec	accuracy=nan
2022-10-13 12:19:41,412 Node[0] Epoch[17] Batch [180-200]	Speed: 29403.04 samples/sec	accuracy=nan
2022-10-13 12:19:43,543 Node[0] Epoch[17] Batch [200-220]	Speed: 30641.11 samples/sec	accuracy=nan
2022-10-13 12:19:45,671 Node[0] Epoch[17] Batch [220-240]	Speed: 30673.33 samples/sec	accuracy=nan
2022-10-13 12:19:47,804 Node[0] Epoch[17] Batch [240-260]	Speed: 30600.71 samples/sec	accuracy=nan
2022-10-13 12:19:49,929 Node[0] Epoch[17] Batch [260-280]	Speed: 30717.22 samples/sec	accuracy=nan
2022-10-13 12:19:52,056 Node[0] Epoch[17] Batch [280-300]	Speed: 30700.04 samples/sec	accuracy=nan
2022-10-13 12:19:54,181 Node[0] Epoch[17] Batch [300-320]	Speed: 30720.60 samples/sec	accuracy=nan
2022-10-13 12:19:56,306 Node[0] Epoch[17] Batch [320-340]	Speed: 30721.21 samples/sec	accuracy=nan
2022-10-13 12:19:58,434 Node[0] Epoch[17] Batch [340-360]	Speed: 30668.73 samples/sec	accuracy=nan
2022-10-13 12:20:00,564 Node[0] Epoch[17] Batch [360-380]	Speed: 30652.12 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663601838, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 18}}
2022-10-13 12:20:01,838 Node[0] Epoch[17] Time cost=41.842
:::MLLOG {"namespace": "", "time_ms": 1665663601838, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30618.81466895436}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 18}}
:::MLLOG {"namespace": "", "time_ms": 1665663601839, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30618.81466895436, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663601840, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 19}}
2022-10-13 12:20:04,079 Node[0] Epoch[18] Batch [0-20]	Speed: 29381.57 samples/sec	accuracy=nan
2022-10-13 12:20:06,206 Node[0] Epoch[18] Batch [20-40]	Speed: 30700.58 samples/sec	accuracy=nan
2022-10-13 12:20:08,333 Node[0] Epoch[18] Batch [40-60]	Speed: 30690.74 samples/sec	accuracy=nan
2022-10-13 12:20:10,461 Node[0] Epoch[18] Batch [60-80]	Speed: 30666.11 samples/sec	accuracy=nan
2022-10-13 12:20:12,592 Node[0] Epoch[18] Batch [80-100]	Speed: 30647.18 samples/sec	accuracy=nan
2022-10-13 12:20:14,719 Node[0] Epoch[18] Batch [100-120]	Speed: 30690.78 samples/sec	accuracy=nan
2022-10-13 12:20:16,849 Node[0] Epoch[18] Batch [120-140]	Speed: 30638.88 samples/sec	accuracy=nan
2022-10-13 12:20:18,976 Node[0] Epoch[18] Batch [140-160]	Speed: 30699.54 samples/sec	accuracy=nan
2022-10-13 12:20:21,104 Node[0] Epoch[18] Batch [160-180]	Speed: 30665.90 samples/sec	accuracy=nan
2022-10-13 12:20:23,235 Node[0] Epoch[18] Batch [180-200]	Speed: 30635.51 samples/sec	accuracy=nan
2022-10-13 12:20:25,363 Node[0] Epoch[18] Batch [200-220]	Speed: 30675.46 samples/sec	accuracy=nan
2022-10-13 12:20:27,487 Node[0] Epoch[18] Batch [220-240]	Speed: 30737.88 samples/sec	accuracy=nan
2022-10-13 12:20:29,614 Node[0] Epoch[18] Batch [240-260]	Speed: 30687.54 samples/sec	accuracy=nan
2022-10-13 12:20:31,744 Node[0] Epoch[18] Batch [260-280]	Speed: 30650.58 samples/sec	accuracy=nan
2022-10-13 12:20:33,871 Node[0] Epoch[18] Batch [280-300]	Speed: 30697.40 samples/sec	accuracy=nan
2022-10-13 12:20:35,993 Node[0] Epoch[18] Batch [300-320]	Speed: 30757.40 samples/sec	accuracy=nan
2022-10-13 12:20:38,118 Node[0] Epoch[18] Batch [320-340]	Speed: 30719.61 samples/sec	accuracy=nan
2022-10-13 12:20:40,247 Node[0] Epoch[18] Batch [340-360]	Speed: 30660.06 samples/sec	accuracy=nan
2022-10-13 12:20:42,375 Node[0] Epoch[18] Batch [360-380]	Speed: 30684.02 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663643652, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 19}}
2022-10-13 12:20:43,653 Node[0] Epoch[18] Time cost=41.813
:::MLLOG {"namespace": "", "time_ms": 1665663643653, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30640.53452280438}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 19}}
:::MLLOG {"namespace": "", "time_ms": 1665663643653, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30640.53452280438, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663643752, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 19}}
2022-10-13 12:20:44,549 Node[0] Epoch[18] Validation-accuracy=0.649064
2022-10-13 12:20:44,549 Node[0] Epoch[18] Validation-correct-count=1352.000000
2022-10-13 12:20:44,549 Node[0] Epoch[18] Validation-total-count=2083.000000
:::MLLOG {"namespace": "", "time_ms": 1665663644600, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 19}}
:::MLLOG {"namespace": "", "time_ms": 1665663644600, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.64406, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 19}}
:::MLLOG {"namespace": "", "time_ms": 1665663644601, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 16}}
:::MLLOG {"namespace": "", "time_ms": 1665663644601, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 20, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665663644602, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 20}}
2022-10-13 12:20:46,846 Node[0] Epoch[19] Batch [0-20]	Speed: 29314.23 samples/sec	accuracy=nan
2022-10-13 12:20:48,980 Node[0] Epoch[19] Batch [20-40]	Speed: 30585.53 samples/sec	accuracy=nan
2022-10-13 12:20:51,104 Node[0] Epoch[19] Batch [40-60]	Speed: 30735.98 samples/sec	accuracy=nan
2022-10-13 12:20:53,231 Node[0] Epoch[19] Batch [60-80]	Speed: 30686.79 samples/sec	accuracy=nan
2022-10-13 12:20:55,363 Node[0] Epoch[19] Batch [80-100]	Speed: 30625.84 samples/sec	accuracy=nan
2022-10-13 12:20:57,488 Node[0] Epoch[19] Batch [100-120]	Speed: 30718.52 samples/sec	accuracy=nan
2022-10-13 12:20:59,616 Node[0] Epoch[19] Batch [120-140]	Speed: 30667.32 samples/sec	accuracy=nan
2022-10-13 12:21:01,747 Node[0] Epoch[19] Batch [140-160]	Speed: 30646.53 samples/sec	accuracy=nan
2022-10-13 12:21:03,878 Node[0] Epoch[19] Batch [160-180]	Speed: 30634.44 samples/sec	accuracy=nan
2022-10-13 12:21:06,004 Node[0] Epoch[19] Batch [180-200]	Speed: 30696.36 samples/sec	accuracy=nan
2022-10-13 12:21:08,133 Node[0] Epoch[19] Batch [200-220]	Speed: 30661.10 samples/sec	accuracy=nan
2022-10-13 12:21:10,261 Node[0] Epoch[19] Batch [220-240]	Speed: 30682.14 samples/sec	accuracy=nan
2022-10-13 12:21:12,389 Node[0] Epoch[19] Batch [240-260]	Speed: 30669.09 samples/sec	accuracy=nan
2022-10-13 12:21:14,517 Node[0] Epoch[19] Batch [260-280]	Speed: 30678.90 samples/sec	accuracy=nan
2022-10-13 12:21:16,646 Node[0] Epoch[19] Batch [280-300]	Speed: 30673.33 samples/sec	accuracy=nan
2022-10-13 12:21:18,773 Node[0] Epoch[19] Batch [300-320]	Speed: 30686.70 samples/sec	accuracy=nan
2022-10-13 12:21:20,905 Node[0] Epoch[19] Batch [320-340]	Speed: 30610.68 samples/sec	accuracy=nan
2022-10-13 12:21:23,038 Node[0] Epoch[19] Batch [340-360]	Speed: 30616.23 samples/sec	accuracy=nan
2022-10-13 12:21:25,160 Node[0] Epoch[19] Batch [360-380]	Speed: 30761.98 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663686436, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 20}}
2022-10-13 12:21:26,436 Node[0] Epoch[19] Time cost=41.832
:::MLLOG {"namespace": "", "time_ms": 1665663686436, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30626.42607481061}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 20}}
:::MLLOG {"namespace": "", "time_ms": 1665663686436, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30626.42607481061, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663686436, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 21}}
2022-10-13 12:21:28,581 Node[0] Epoch[20] Batch [0-20]	Speed: 32167.94 samples/sec	accuracy=nan
2022-10-13 12:21:30,817 Node[0] Epoch[20] Batch [20-40]	Speed: 29198.78 samples/sec	accuracy=nan
2022-10-13 12:21:32,948 Node[0] Epoch[20] Batch [40-60]	Speed: 30639.30 samples/sec	accuracy=nan
2022-10-13 12:21:35,080 Node[0] Epoch[20] Batch [60-80]	Speed: 30618.52 samples/sec	accuracy=nan
2022-10-13 12:21:37,213 Node[0] Epoch[20] Batch [80-100]	Speed: 30607.60 samples/sec	accuracy=nan
2022-10-13 12:21:39,341 Node[0] Epoch[20] Batch [100-120]	Speed: 30665.62 samples/sec	accuracy=nan
2022-10-13 12:21:41,466 Node[0] Epoch[20] Batch [120-140]	Speed: 30720.65 samples/sec	accuracy=nan
2022-10-13 12:21:43,600 Node[0] Epoch[20] Batch [140-160]	Speed: 30595.21 samples/sec	accuracy=nan
2022-10-13 12:21:45,734 Node[0] Epoch[20] Batch [160-180]	Speed: 30582.85 samples/sec	accuracy=nan
2022-10-13 12:21:47,859 Node[0] Epoch[20] Batch [180-200]	Speed: 30724.22 samples/sec	accuracy=nan
2022-10-13 12:21:49,986 Node[0] Epoch[20] Batch [200-220]	Speed: 30695.83 samples/sec	accuracy=nan
2022-10-13 12:21:52,109 Node[0] Epoch[20] Batch [220-240]	Speed: 30747.01 samples/sec	accuracy=nan
2022-10-13 12:21:54,236 Node[0] Epoch[20] Batch [240-260]	Speed: 30685.61 samples/sec	accuracy=nan
2022-10-13 12:21:56,367 Node[0] Epoch[20] Batch [260-280]	Speed: 30644.12 samples/sec	accuracy=nan
2022-10-13 12:21:58,495 Node[0] Epoch[20] Batch [280-300]	Speed: 30667.30 samples/sec	accuracy=nan
2022-10-13 12:22:00,627 Node[0] Epoch[20] Batch [300-320]	Speed: 30627.49 samples/sec	accuracy=nan
2022-10-13 12:22:02,756 Node[0] Epoch[20] Batch [320-340]	Speed: 30658.26 samples/sec	accuracy=nan
2022-10-13 12:22:04,886 Node[0] Epoch[20] Batch [340-360]	Speed: 30653.19 samples/sec	accuracy=nan
2022-10-13 12:22:07,023 Node[0] Epoch[20] Batch [360-380]	Speed: 30543.49 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663728296, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 21}}
2022-10-13 12:22:08,297 Node[0] Epoch[20] Time cost=41.860
:::MLLOG {"namespace": "", "time_ms": 1665663728297, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30605.90909464903}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 21}}
:::MLLOG {"namespace": "", "time_ms": 1665663728297, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30605.90909464903, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663728297, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 22}}
2022-10-13 12:22:10,547 Node[0] Epoch[21] Batch [0-20]	Speed: 30489.24 samples/sec	accuracy=nan
2022-10-13 12:22:12,678 Node[0] Epoch[21] Batch [20-40]	Speed: 30632.93 samples/sec	accuracy=nan
2022-10-13 12:22:14,806 Node[0] Epoch[21] Batch [40-60]	Speed: 30681.47 samples/sec	accuracy=nan
2022-10-13 12:22:16,936 Node[0] Epoch[21] Batch [60-80]	Speed: 30645.92 samples/sec	accuracy=nan
2022-10-13 12:22:19,064 Node[0] Epoch[21] Batch [80-100]	Speed: 30683.12 samples/sec	accuracy=nan
2022-10-13 12:22:21,198 Node[0] Epoch[21] Batch [100-120]	Speed: 30587.17 samples/sec	accuracy=nan
2022-10-13 12:22:23,334 Node[0] Epoch[21] Batch [120-140]	Speed: 30566.72 samples/sec	accuracy=nan
2022-10-13 12:22:25,464 Node[0] Epoch[21] Batch [140-160]	Speed: 30646.75 samples/sec	accuracy=nan
2022-10-13 12:22:27,494 Node[0] Epoch[21] Batch [160-180]	Speed: 32154.39 samples/sec	accuracy=nan
2022-10-13 12:22:29,725 Node[0] Epoch[21] Batch [180-200]	Speed: 29258.78 samples/sec	accuracy=nan
2022-10-13 12:22:31,855 Node[0] Epoch[21] Batch [200-220]	Speed: 30648.85 samples/sec	accuracy=nan
2022-10-13 12:22:33,981 Node[0] Epoch[21] Batch [220-240]	Speed: 30699.66 samples/sec	accuracy=nan
2022-10-13 12:22:36,109 Node[0] Epoch[21] Batch [240-260]	Speed: 30689.01 samples/sec	accuracy=nan
2022-10-13 12:22:38,237 Node[0] Epoch[21] Batch [260-280]	Speed: 30668.86 samples/sec	accuracy=nan
2022-10-13 12:22:40,371 Node[0] Epoch[21] Batch [280-300]	Speed: 30596.55 samples/sec	accuracy=nan
2022-10-13 12:22:42,500 Node[0] Epoch[21] Batch [300-320]	Speed: 30664.15 samples/sec	accuracy=nan
2022-10-13 12:22:44,630 Node[0] Epoch[21] Batch [320-340]	Speed: 30646.55 samples/sec	accuracy=nan
2022-10-13 12:22:46,757 Node[0] Epoch[21] Batch [340-360]	Speed: 30689.12 samples/sec	accuracy=nan
2022-10-13 12:22:48,885 Node[0] Epoch[21] Batch [360-380]	Speed: 30676.33 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663770159, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 22}}
2022-10-13 12:22:50,161 Node[0] Epoch[21] Time cost=41.863
:::MLLOG {"namespace": "", "time_ms": 1665663770161, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30603.799107685987}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 22}}
:::MLLOG {"namespace": "", "time_ms": 1665663770161, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30603.799107685987, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663770161, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 23}}
2022-10-13 12:22:52,399 Node[0] Epoch[22] Batch [0-20]	Speed: 30655.82 samples/sec	accuracy=nan
2022-10-13 12:22:54,528 Node[0] Epoch[22] Batch [20-40]	Speed: 30668.40 samples/sec	accuracy=nan
2022-10-13 12:22:56,655 Node[0] Epoch[22] Batch [40-60]	Speed: 30692.66 samples/sec	accuracy=nan
2022-10-13 12:22:58,779 Node[0] Epoch[22] Batch [60-80]	Speed: 30737.76 samples/sec	accuracy=nan
2022-10-13 12:23:00,905 Node[0] Epoch[22] Batch [80-100]	Speed: 30694.08 samples/sec	accuracy=nan
2022-10-13 12:23:02,933 Node[0] Epoch[22] Batch [100-120]	Speed: 32194.85 samples/sec	accuracy=nan
2022-10-13 12:23:05,166 Node[0] Epoch[22] Batch [120-140]	Speed: 29239.26 samples/sec	accuracy=nan
2022-10-13 12:23:07,294 Node[0] Epoch[22] Batch [140-160]	Speed: 30672.48 samples/sec	accuracy=nan
2022-10-13 12:23:09,423 Node[0] Epoch[22] Batch [160-180]	Speed: 30657.58 samples/sec	accuracy=nan
2022-10-13 12:23:11,557 Node[0] Epoch[22] Batch [180-200]	Speed: 30596.36 samples/sec	accuracy=nan
2022-10-13 12:23:13,687 Node[0] Epoch[22] Batch [200-220]	Speed: 30641.39 samples/sec	accuracy=nan
2022-10-13 12:23:15,816 Node[0] Epoch[22] Batch [220-240]	Speed: 30673.33 samples/sec	accuracy=nan
2022-10-13 12:23:17,952 Node[0] Epoch[22] Batch [240-260]	Speed: 30562.39 samples/sec	accuracy=nan
2022-10-13 12:23:20,080 Node[0] Epoch[22] Batch [260-280]	Speed: 30677.70 samples/sec	accuracy=nan
2022-10-13 12:23:22,208 Node[0] Epoch[22] Batch [280-300]	Speed: 30675.18 samples/sec	accuracy=nan
2022-10-13 12:23:24,334 Node[0] Epoch[22] Batch [300-320]	Speed: 30700.58 samples/sec	accuracy=nan
2022-10-13 12:23:26,460 Node[0] Epoch[22] Batch [320-340]	Speed: 30707.18 samples/sec	accuracy=nan
2022-10-13 12:23:28,596 Node[0] Epoch[22] Batch [340-360]	Speed: 30566.45 samples/sec	accuracy=nan
2022-10-13 12:23:30,629 Node[0] Epoch[22] Batch [360-380]	Speed: 32095.14 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663812003, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 23}}
2022-10-13 12:23:32,004 Node[0] Epoch[22] Time cost=41.842
:::MLLOG {"namespace": "", "time_ms": 1665663812004, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30619.011991406376}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 23}}
:::MLLOG {"namespace": "", "time_ms": 1665663812004, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30619.011991406376, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663812103, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 23}}
2022-10-13 12:23:32,922 Node[0] Epoch[22] Validation-accuracy=0.693378
2022-10-13 12:23:32,923 Node[0] Epoch[22] Validation-correct-count=1445.000000
2022-10-13 12:23:32,923 Node[0] Epoch[22] Validation-total-count=2084.000000
:::MLLOG {"namespace": "", "time_ms": 1665663812924, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 23}}
:::MLLOG {"namespace": "", "time_ms": 1665663812925, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.69974, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 23}}
:::MLLOG {"namespace": "", "time_ms": 1665663812925, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 20}}
:::MLLOG {"namespace": "", "time_ms": 1665663812925, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 24, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665663812925, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 24}}
2022-10-13 12:23:35,184 Node[0] Epoch[23] Batch [0-20]	Speed: 29105.20 samples/sec	accuracy=nan
2022-10-13 12:23:37,309 Node[0] Epoch[23] Batch [20-40]	Speed: 30728.93 samples/sec	accuracy=nan
2022-10-13 12:23:39,435 Node[0] Epoch[23] Batch [40-60]	Speed: 30694.32 samples/sec	accuracy=nan
2022-10-13 12:23:41,571 Node[0] Epoch[23] Batch [60-80]	Speed: 30573.35 samples/sec	accuracy=nan
2022-10-13 12:23:43,702 Node[0] Epoch[23] Batch [80-100]	Speed: 30633.92 samples/sec	accuracy=nan
2022-10-13 12:23:45,835 Node[0] Epoch[23] Batch [100-120]	Speed: 30594.36 samples/sec	accuracy=nan
2022-10-13 12:23:47,965 Node[0] Epoch[23] Batch [120-140]	Speed: 30654.92 samples/sec	accuracy=nan
2022-10-13 12:23:50,099 Node[0] Epoch[23] Batch [140-160]	Speed: 30591.05 samples/sec	accuracy=nan
2022-10-13 12:23:52,233 Node[0] Epoch[23] Batch [160-180]	Speed: 30589.91 samples/sec	accuracy=nan
2022-10-13 12:23:54,364 Node[0] Epoch[23] Batch [180-200]	Speed: 30636.19 samples/sec	accuracy=nan
2022-10-13 12:23:56,493 Node[0] Epoch[23] Batch [200-220]	Speed: 30658.99 samples/sec	accuracy=nan
2022-10-13 12:23:58,625 Node[0] Epoch[23] Batch [220-240]	Speed: 30611.44 samples/sec	accuracy=nan
2022-10-13 12:24:00,759 Node[0] Epoch[23] Batch [240-260]	Speed: 30602.76 samples/sec	accuracy=nan
2022-10-13 12:24:02,889 Node[0] Epoch[23] Batch [260-280]	Speed: 30641.24 samples/sec	accuracy=nan
2022-10-13 12:24:05,020 Node[0] Epoch[23] Batch [280-300]	Speed: 30632.22 samples/sec	accuracy=nan
2022-10-13 12:24:07,148 Node[0] Epoch[23] Batch [300-320]	Speed: 30676.01 samples/sec	accuracy=nan
2022-10-13 12:24:09,278 Node[0] Epoch[23] Batch [320-340]	Speed: 30647.81 samples/sec	accuracy=nan
2022-10-13 12:24:11,408 Node[0] Epoch[23] Batch [340-360]	Speed: 30654.88 samples/sec	accuracy=nan
2022-10-13 12:24:13,536 Node[0] Epoch[23] Batch [360-380]	Speed: 30666.66 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663854811, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 24}}
2022-10-13 12:24:14,812 Node[0] Epoch[23] Time cost=41.885
:::MLLOG {"namespace": "", "time_ms": 1665663854812, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30588.077061042113}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 24}}
:::MLLOG {"namespace": "", "time_ms": 1665663854812, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30588.077061042113, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663854813, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 25}}
2022-10-13 12:24:17,053 Node[0] Epoch[24] Batch [0-20]	Speed: 30645.55 samples/sec	accuracy=nan
2022-10-13 12:24:19,184 Node[0] Epoch[24] Batch [20-40]	Speed: 30644.11 samples/sec	accuracy=nan
2022-10-13 12:24:21,312 Node[0] Epoch[24] Batch [40-60]	Speed: 30669.52 samples/sec	accuracy=nan
2022-10-13 12:24:23,444 Node[0] Epoch[24] Batch [60-80]	Speed: 30626.61 samples/sec	accuracy=nan
2022-10-13 12:24:25,579 Node[0] Epoch[24] Batch [80-100]	Speed: 30565.22 samples/sec	accuracy=nan
2022-10-13 12:24:27,715 Node[0] Epoch[24] Batch [100-120]	Speed: 30573.04 samples/sec	accuracy=nan
2022-10-13 12:24:29,849 Node[0] Epoch[24] Batch [120-140]	Speed: 30587.39 samples/sec	accuracy=nan
2022-10-13 12:24:31,980 Node[0] Epoch[24] Batch [140-160]	Speed: 30630.77 samples/sec	accuracy=nan
2022-10-13 12:24:34,114 Node[0] Epoch[24] Batch [160-180]	Speed: 30590.35 samples/sec	accuracy=nan
2022-10-13 12:24:36,247 Node[0] Epoch[24] Batch [180-200]	Speed: 30612.62 samples/sec	accuracy=nan
2022-10-13 12:24:38,374 Node[0] Epoch[24] Batch [200-220]	Speed: 30688.57 samples/sec	accuracy=nan
2022-10-13 12:24:40,503 Node[0] Epoch[24] Batch [220-240]	Speed: 30661.64 samples/sec	accuracy=nan
2022-10-13 12:24:42,636 Node[0] Epoch[24] Batch [240-260]	Speed: 30597.90 samples/sec	accuracy=nan
2022-10-13 12:24:44,766 Node[0] Epoch[24] Batch [260-280]	Speed: 30648.08 samples/sec	accuracy=nan
2022-10-13 12:24:46,892 Node[0] Epoch[24] Batch [280-300]	Speed: 30708.23 samples/sec	accuracy=nan
2022-10-13 12:24:49,023 Node[0] Epoch[24] Batch [300-320]	Speed: 30626.76 samples/sec	accuracy=nan
2022-10-13 12:24:51,154 Node[0] Epoch[24] Batch [320-340]	Speed: 30647.92 samples/sec	accuracy=nan
2022-10-13 12:24:53,282 Node[0] Epoch[24] Batch [340-360]	Speed: 30663.57 samples/sec	accuracy=nan
2022-10-13 12:24:55,407 Node[0] Epoch[24] Batch [360-380]	Speed: 30721.64 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663896683, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 25}}
2022-10-13 12:24:56,683 Node[0] Epoch[24] Time cost=41.870
:::MLLOG {"namespace": "", "time_ms": 1665663896683, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30598.48490328637}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 25}}
:::MLLOG {"namespace": "", "time_ms": 1665663896683, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30598.48490328637, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663896684, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 26}}
2022-10-13 12:24:58,925 Node[0] Epoch[25] Batch [0-20]	Speed: 30674.81 samples/sec	accuracy=nan
2022-10-13 12:25:01,060 Node[0] Epoch[25] Batch [20-40]	Speed: 30570.50 samples/sec	accuracy=nan
2022-10-13 12:25:03,192 Node[0] Epoch[25] Batch [40-60]	Speed: 30623.86 samples/sec	accuracy=nan
2022-10-13 12:25:05,321 Node[0] Epoch[25] Batch [60-80]	Speed: 30667.34 samples/sec	accuracy=nan
2022-10-13 12:25:07,446 Node[0] Epoch[25] Batch [80-100]	Speed: 30718.50 samples/sec	accuracy=nan
2022-10-13 12:25:09,582 Node[0] Epoch[25] Batch [100-120]	Speed: 30551.18 samples/sec	accuracy=nan
2022-10-13 12:25:11,719 Node[0] Epoch[25] Batch [120-140]	Speed: 30559.51 samples/sec	accuracy=nan
2022-10-13 12:25:13,853 Node[0] Epoch[25] Batch [140-160]	Speed: 30592.12 samples/sec	accuracy=nan
2022-10-13 12:25:15,979 Node[0] Epoch[25] Batch [160-180]	Speed: 30704.13 samples/sec	accuracy=nan
2022-10-13 12:25:18,110 Node[0] Epoch[25] Batch [180-200]	Speed: 30624.50 samples/sec	accuracy=nan
2022-10-13 12:25:20,242 Node[0] Epoch[25] Batch [200-220]	Speed: 30617.37 samples/sec	accuracy=nan
2022-10-13 12:25:22,371 Node[0] Epoch[25] Batch [220-240]	Speed: 30665.12 samples/sec	accuracy=nan
2022-10-13 12:25:24,506 Node[0] Epoch[25] Batch [240-260]	Speed: 30582.82 samples/sec	accuracy=nan
2022-10-13 12:25:26,633 Node[0] Epoch[25] Batch [260-280]	Speed: 30693.31 samples/sec	accuracy=nan
2022-10-13 12:25:28,765 Node[0] Epoch[25] Batch [280-300]	Speed: 30608.48 samples/sec	accuracy=nan
2022-10-13 12:25:30,895 Node[0] Epoch[25] Batch [300-320]	Speed: 30655.74 samples/sec	accuracy=nan
2022-10-13 12:25:33,031 Node[0] Epoch[25] Batch [320-340]	Speed: 30551.96 samples/sec	accuracy=nan
2022-10-13 12:25:35,158 Node[0] Epoch[25] Batch [340-360]	Speed: 30703.06 samples/sec	accuracy=nan
2022-10-13 12:25:37,291 Node[0] Epoch[25] Batch [360-380]	Speed: 30602.80 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663938564, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 26}}
2022-10-13 12:25:38,565 Node[0] Epoch[25] Time cost=41.881
:::MLLOG {"namespace": "", "time_ms": 1665663938565, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30590.75502557223}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 26}}
:::MLLOG {"namespace": "", "time_ms": 1665663938565, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30590.75502557223, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663938565, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 27}}
2022-10-13 12:25:40,812 Node[0] Epoch[26] Batch [0-20]	Speed: 30711.93 samples/sec	accuracy=nan
2022-10-13 12:25:42,940 Node[0] Epoch[26] Batch [20-40]	Speed: 30667.50 samples/sec	accuracy=nan
2022-10-13 12:25:45,070 Node[0] Epoch[26] Batch [40-60]	Speed: 30655.19 samples/sec	accuracy=nan
2022-10-13 12:25:47,196 Node[0] Epoch[26] Batch [60-80]	Speed: 30701.89 samples/sec	accuracy=nan
2022-10-13 12:25:49,330 Node[0] Epoch[26] Batch [80-100]	Speed: 30593.37 samples/sec	accuracy=nan
2022-10-13 12:25:51,465 Node[0] Epoch[26] Batch [100-120]	Speed: 30578.26 samples/sec	accuracy=nan
2022-10-13 12:25:53,594 Node[0] Epoch[26] Batch [120-140]	Speed: 30653.58 samples/sec	accuracy=nan
2022-10-13 12:25:55,723 Node[0] Epoch[26] Batch [140-160]	Speed: 30662.81 samples/sec	accuracy=nan
2022-10-13 12:25:57,858 Node[0] Epoch[26] Batch [160-180]	Speed: 30580.81 samples/sec	accuracy=nan
2022-10-13 12:25:59,987 Node[0] Epoch[26] Batch [180-200]	Speed: 30652.33 samples/sec	accuracy=nan
2022-10-13 12:26:02,115 Node[0] Epoch[26] Batch [200-220]	Speed: 30688.10 samples/sec	accuracy=nan
2022-10-13 12:26:04,242 Node[0] Epoch[26] Batch [220-240]	Speed: 30690.66 samples/sec	accuracy=nan
2022-10-13 12:26:06,379 Node[0] Epoch[26] Batch [240-260]	Speed: 30541.79 samples/sec	accuracy=nan
2022-10-13 12:26:08,510 Node[0] Epoch[26] Batch [260-280]	Speed: 30641.97 samples/sec	accuracy=nan
2022-10-13 12:26:10,639 Node[0] Epoch[26] Batch [280-300]	Speed: 30659.25 samples/sec	accuracy=nan
2022-10-13 12:26:12,768 Node[0] Epoch[26] Batch [300-320]	Speed: 30653.30 samples/sec	accuracy=nan
2022-10-13 12:26:14,905 Node[0] Epoch[26] Batch [320-340]	Speed: 30559.86 samples/sec	accuracy=nan
2022-10-13 12:26:16,955 Node[0] Epoch[26] Batch [340-360]	Speed: 31835.42 samples/sec	accuracy=nan
2022-10-13 12:26:19,062 Node[0] Epoch[26] Batch [360-380]	Speed: 30988.41 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665663980434, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 27}}
2022-10-13 12:26:20,434 Node[0] Epoch[26] Time cost=41.869
:::MLLOG {"namespace": "", "time_ms": 1665663980434, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30599.38450254813}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 27}}
:::MLLOG {"namespace": "", "time_ms": 1665663980434, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30599.38450254813, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665663980535, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 27}}
2022-10-13 12:26:21,309 Node[0] Epoch[26] Validation-accuracy=0.729237
2022-10-13 12:26:21,309 Node[0] Epoch[26] Validation-correct-count=1519.000000
2022-10-13 12:26:21,309 Node[0] Epoch[26] Validation-total-count=2083.000000
:::MLLOG {"namespace": "", "time_ms": 1665663981369, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 27}}
:::MLLOG {"namespace": "", "time_ms": 1665663981370, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.73138, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 27}}
:::MLLOG {"namespace": "", "time_ms": 1665663981370, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 24}}
:::MLLOG {"namespace": "", "time_ms": 1665663981370, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 28, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665663981371, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 28}}
2022-10-13 12:26:23,634 Node[0] Epoch[27] Batch [0-20]	Speed: 29137.04 samples/sec	accuracy=nan
2022-10-13 12:26:25,768 Node[0] Epoch[27] Batch [20-40]	Speed: 30595.78 samples/sec	accuracy=nan
2022-10-13 12:26:27,897 Node[0] Epoch[27] Batch [40-60]	Speed: 30654.01 samples/sec	accuracy=nan
2022-10-13 12:26:30,035 Node[0] Epoch[27] Batch [60-80]	Speed: 30532.66 samples/sec	accuracy=nan
2022-10-13 12:26:32,163 Node[0] Epoch[27] Batch [80-100]	Speed: 30685.05 samples/sec	accuracy=nan
2022-10-13 12:26:34,294 Node[0] Epoch[27] Batch [100-120]	Speed: 30624.71 samples/sec	accuracy=nan
2022-10-13 12:26:36,424 Node[0] Epoch[27] Batch [120-140]	Speed: 30654.60 samples/sec	accuracy=nan
2022-10-13 12:26:38,552 Node[0] Epoch[27] Batch [140-160]	Speed: 30674.86 samples/sec	accuracy=nan
2022-10-13 12:26:40,682 Node[0] Epoch[27] Batch [160-180]	Speed: 30651.71 samples/sec	accuracy=nan
2022-10-13 12:26:42,712 Node[0] Epoch[27] Batch [180-200]	Speed: 32153.11 samples/sec	accuracy=nan
2022-10-13 12:26:44,941 Node[0] Epoch[27] Batch [200-220]	Speed: 29292.14 samples/sec	accuracy=nan
2022-10-13 12:26:47,070 Node[0] Epoch[27] Batch [220-240]	Speed: 30651.76 samples/sec	accuracy=nan
2022-10-13 12:26:49,197 Node[0] Epoch[27] Batch [240-260]	Speed: 30698.91 samples/sec	accuracy=nan
2022-10-13 12:26:51,325 Node[0] Epoch[27] Batch [260-280]	Speed: 30678.23 samples/sec	accuracy=nan
2022-10-13 12:26:53,452 Node[0] Epoch[27] Batch [280-300]	Speed: 30683.24 samples/sec	accuracy=nan
2022-10-13 12:26:55,582 Node[0] Epoch[27] Batch [300-320]	Speed: 30659.83 samples/sec	accuracy=nan
2022-10-13 12:26:57,707 Node[0] Epoch[27] Batch [320-340]	Speed: 30717.73 samples/sec	accuracy=nan
2022-10-13 12:26:59,839 Node[0] Epoch[27] Batch [340-360]	Speed: 30616.73 samples/sec	accuracy=nan
2022-10-13 12:27:01,966 Node[0] Epoch[27] Batch [360-380]	Speed: 30689.88 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664023242, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 28}}
2022-10-13 12:27:03,242 Node[0] Epoch[27] Time cost=41.871
:::MLLOG {"namespace": "", "time_ms": 1665664023242, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30597.737978142835}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 28}}
:::MLLOG {"namespace": "", "time_ms": 1665664023243, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30597.737978142835, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665664023243, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 29}}
2022-10-13 12:27:05,490 Node[0] Epoch[28] Batch [0-20]	Speed: 30558.83 samples/sec	accuracy=nan
2022-10-13 12:27:07,628 Node[0] Epoch[28] Batch [20-40]	Speed: 30540.39 samples/sec	accuracy=nan
2022-10-13 12:27:09,758 Node[0] Epoch[28] Batch [40-60]	Speed: 30646.25 samples/sec	accuracy=nan
2022-10-13 12:27:11,888 Node[0] Epoch[28] Batch [60-80]	Speed: 30651.81 samples/sec	accuracy=nan
2022-10-13 12:27:14,020 Node[0] Epoch[28] Batch [80-100]	Speed: 30608.43 samples/sec	accuracy=nan
2022-10-13 12:27:16,153 Node[0] Epoch[28] Batch [100-120]	Speed: 30604.51 samples/sec	accuracy=nan
2022-10-13 12:27:18,283 Node[0] Epoch[28] Batch [120-140]	Speed: 30648.58 samples/sec	accuracy=nan
2022-10-13 12:27:20,418 Node[0] Epoch[28] Batch [140-160]	Speed: 30588.53 samples/sec	accuracy=nan
2022-10-13 12:27:22,545 Node[0] Epoch[28] Batch [160-180]	Speed: 30676.91 samples/sec	accuracy=nan
2022-10-13 12:27:24,680 Node[0] Epoch[28] Batch [180-200]	Speed: 30587.66 samples/sec	accuracy=nan
2022-10-13 12:27:26,808 Node[0] Epoch[28] Batch [200-220]	Speed: 30671.84 samples/sec	accuracy=nan
2022-10-13 12:27:28,947 Node[0] Epoch[28] Batch [220-240]	Speed: 30512.54 samples/sec	accuracy=nan
2022-10-13 12:27:31,083 Node[0] Epoch[28] Batch [240-260]	Speed: 30573.74 samples/sec	accuracy=nan
2022-10-13 12:27:33,211 Node[0] Epoch[28] Batch [260-280]	Speed: 30665.89 samples/sec	accuracy=nan
2022-10-13 12:27:35,343 Node[0] Epoch[28] Batch [280-300]	Speed: 30622.99 samples/sec	accuracy=nan
2022-10-13 12:27:37,474 Node[0] Epoch[28] Batch [300-320]	Speed: 30641.32 samples/sec	accuracy=nan
2022-10-13 12:27:39,605 Node[0] Epoch[28] Batch [320-340]	Speed: 30625.31 samples/sec	accuracy=nan
2022-10-13 12:27:41,735 Node[0] Epoch[28] Batch [340-360]	Speed: 30648.39 samples/sec	accuracy=nan
2022-10-13 12:27:43,869 Node[0] Epoch[28] Batch [360-380]	Speed: 30585.73 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664065145, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 29}}
2022-10-13 12:27:45,145 Node[0] Epoch[28] Time cost=41.902
:::MLLOG {"namespace": "", "time_ms": 1665664065145, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30575.239132285853}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 29}}
:::MLLOG {"namespace": "", "time_ms": 1665664065145, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30575.239132285853, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665664065145, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 30}}
2022-10-13 12:27:47,395 Node[0] Epoch[29] Batch [0-20]	Speed: 30573.44 samples/sec	accuracy=nan
2022-10-13 12:27:49,526 Node[0] Epoch[29] Batch [20-40]	Speed: 30636.23 samples/sec	accuracy=nan
2022-10-13 12:27:51,661 Node[0] Epoch[29] Batch [40-60]	Speed: 30574.04 samples/sec	accuracy=nan
2022-10-13 12:27:53,794 Node[0] Epoch[29] Batch [60-80]	Speed: 30609.94 samples/sec	accuracy=nan
2022-10-13 12:27:55,930 Node[0] Epoch[29] Batch [80-100]	Speed: 30555.57 samples/sec	accuracy=nan
2022-10-13 12:27:58,064 Node[0] Epoch[29] Batch [100-120]	Speed: 30595.84 samples/sec	accuracy=nan
2022-10-13 12:28:00,195 Node[0] Epoch[29] Batch [120-140]	Speed: 30632.67 samples/sec	accuracy=nan
2022-10-13 12:28:02,231 Node[0] Epoch[29] Batch [140-160]	Speed: 32070.03 samples/sec	accuracy=nan
2022-10-13 12:28:04,459 Node[0] Epoch[29] Batch [160-180]	Speed: 29290.12 samples/sec	accuracy=nan
2022-10-13 12:28:06,592 Node[0] Epoch[29] Batch [180-200]	Speed: 30601.63 samples/sec	accuracy=nan
2022-10-13 12:28:08,729 Node[0] Epoch[29] Batch [200-220]	Speed: 30556.63 samples/sec	accuracy=nan
2022-10-13 12:28:10,861 Node[0] Epoch[29] Batch [220-240]	Speed: 30617.17 samples/sec	accuracy=nan
2022-10-13 12:28:12,997 Node[0] Epoch[29] Batch [240-260]	Speed: 30567.93 samples/sec	accuracy=nan
2022-10-13 12:28:15,131 Node[0] Epoch[29] Batch [260-280]	Speed: 30590.33 samples/sec	accuracy=nan
2022-10-13 12:28:17,262 Node[0] Epoch[29] Batch [280-300]	Speed: 30623.79 samples/sec	accuracy=nan
2022-10-13 12:28:19,391 Node[0] Epoch[29] Batch [300-320]	Speed: 30668.08 samples/sec	accuracy=nan
2022-10-13 12:28:21,521 Node[0] Epoch[29] Batch [320-340]	Speed: 30644.70 samples/sec	accuracy=nan
2022-10-13 12:28:23,654 Node[0] Epoch[29] Batch [340-360]	Speed: 30606.84 samples/sec	accuracy=nan
2022-10-13 12:28:25,794 Node[0] Epoch[29] Batch [360-380]	Speed: 30506.81 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664107070, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 30}}
2022-10-13 12:28:27,071 Node[0] Epoch[29] Time cost=41.926
:::MLLOG {"namespace": "", "time_ms": 1665664107071, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30558.10383467418}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 30}}
:::MLLOG {"namespace": "", "time_ms": 1665664107071, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30558.10383467418, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665664107071, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 31}}
2022-10-13 12:28:29,313 Node[0] Epoch[30] Batch [0-20]	Speed: 29269.39 samples/sec	accuracy=nan
2022-10-13 12:28:31,443 Node[0] Epoch[30] Batch [20-40]	Speed: 30642.50 samples/sec	accuracy=nan
2022-10-13 12:28:33,571 Node[0] Epoch[30] Batch [40-60]	Speed: 30687.06 samples/sec	accuracy=nan
2022-10-13 12:28:35,702 Node[0] Epoch[30] Batch [60-80]	Speed: 30619.86 samples/sec	accuracy=nan
2022-10-13 12:28:37,834 Node[0] Epoch[30] Batch [80-100]	Speed: 30620.11 samples/sec	accuracy=nan
2022-10-13 12:28:39,965 Node[0] Epoch[30] Batch [100-120]	Speed: 30642.73 samples/sec	accuracy=nan
2022-10-13 12:28:42,094 Node[0] Epoch[30] Batch [120-140]	Speed: 30657.97 samples/sec	accuracy=nan
2022-10-13 12:28:44,229 Node[0] Epoch[30] Batch [140-160]	Speed: 30573.57 samples/sec	accuracy=nan
2022-10-13 12:28:46,364 Node[0] Epoch[30] Batch [160-180]	Speed: 30585.92 samples/sec	accuracy=nan
2022-10-13 12:28:48,494 Node[0] Epoch[30] Batch [180-200]	Speed: 30639.21 samples/sec	accuracy=nan
2022-10-13 12:28:50,627 Node[0] Epoch[30] Batch [200-220]	Speed: 30610.37 samples/sec	accuracy=nan
2022-10-13 12:28:52,756 Node[0] Epoch[30] Batch [220-240]	Speed: 30658.19 samples/sec	accuracy=nan
2022-10-13 12:28:54,883 Node[0] Epoch[30] Batch [240-260]	Speed: 30685.23 samples/sec	accuracy=nan
2022-10-13 12:28:57,015 Node[0] Epoch[30] Batch [260-280]	Speed: 30621.97 samples/sec	accuracy=nan
2022-10-13 12:28:59,150 Node[0] Epoch[30] Batch [280-300]	Speed: 30573.59 samples/sec	accuracy=nan
2022-10-13 12:29:01,280 Node[0] Epoch[30] Batch [300-320]	Speed: 30656.09 samples/sec	accuracy=nan
2022-10-13 12:29:03,413 Node[0] Epoch[30] Batch [320-340]	Speed: 30605.13 samples/sec	accuracy=nan
2022-10-13 12:29:05,542 Node[0] Epoch[30] Batch [340-360]	Speed: 30655.48 samples/sec	accuracy=nan
2022-10-13 12:29:07,673 Node[0] Epoch[30] Batch [360-380]	Speed: 30634.09 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664148950, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 31}}
2022-10-13 12:29:08,950 Node[0] Epoch[30] Time cost=41.879
:::MLLOG {"namespace": "", "time_ms": 1665664148950, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30592.025302870425}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 31}}
:::MLLOG {"namespace": "", "time_ms": 1665664148951, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30592.025302870425, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665664149051, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 31}}
2022-10-13 12:29:09,868 Node[0] Epoch[30] Validation-accuracy=0.745079
2022-10-13 12:29:09,868 Node[0] Epoch[30] Validation-correct-count=1552.000000
2022-10-13 12:29:09,868 Node[0] Epoch[30] Validation-total-count=2083.000000
:::MLLOG {"namespace": "", "time_ms": 1665664149879, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 31}}
:::MLLOG {"namespace": "", "time_ms": 1665664149879, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.75408, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 31}}
:::MLLOG {"namespace": "", "time_ms": 1665664149879, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 28}}
:::MLLOG {"namespace": "", "time_ms": 1665664149879, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 32, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665664149880, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 32}}
2022-10-13 12:29:12,133 Node[0] Epoch[31] Batch [0-20]	Speed: 29138.21 samples/sec	accuracy=nan
2022-10-13 12:29:14,262 Node[0] Epoch[31] Batch [20-40]	Speed: 30660.62 samples/sec	accuracy=nan
2022-10-13 12:29:16,391 Node[0] Epoch[31] Batch [40-60]	Speed: 30656.77 samples/sec	accuracy=nan
2022-10-13 12:29:18,432 Node[0] Epoch[31] Batch [60-80]	Speed: 31988.35 samples/sec	accuracy=nan
2022-10-13 12:29:20,652 Node[0] Epoch[31] Batch [80-100]	Speed: 29408.14 samples/sec	accuracy=nan
2022-10-13 12:29:22,783 Node[0] Epoch[31] Batch [100-120]	Speed: 30628.83 samples/sec	accuracy=nan
2022-10-13 12:29:24,918 Node[0] Epoch[31] Batch [120-140]	Speed: 30578.63 samples/sec	accuracy=nan
2022-10-13 12:29:27,049 Node[0] Epoch[31] Batch [140-160]	Speed: 30635.44 samples/sec	accuracy=nan
2022-10-13 12:29:29,178 Node[0] Epoch[31] Batch [160-180]	Speed: 30664.85 samples/sec	accuracy=nan
2022-10-13 12:29:31,308 Node[0] Epoch[31] Batch [180-200]	Speed: 30649.23 samples/sec	accuracy=nan
2022-10-13 12:29:33,436 Node[0] Epoch[31] Batch [200-220]	Speed: 30667.18 samples/sec	accuracy=nan
2022-10-13 12:29:35,563 Node[0] Epoch[31] Batch [220-240]	Speed: 30699.73 samples/sec	accuracy=nan
2022-10-13 12:29:37,689 Node[0] Epoch[31] Batch [240-260]	Speed: 30697.54 samples/sec	accuracy=nan
2022-10-13 12:29:39,816 Node[0] Epoch[31] Batch [260-280]	Speed: 30690.87 samples/sec	accuracy=nan
2022-10-13 12:29:41,948 Node[0] Epoch[31] Batch [280-300]	Speed: 30622.12 samples/sec	accuracy=nan
2022-10-13 12:29:44,085 Node[0] Epoch[31] Batch [300-320]	Speed: 30545.97 samples/sec	accuracy=nan
2022-10-13 12:29:46,211 Node[0] Epoch[31] Batch [320-340]	Speed: 30703.95 samples/sec	accuracy=nan
2022-10-13 12:29:48,336 Node[0] Epoch[31] Batch [340-360]	Speed: 30723.50 samples/sec	accuracy=nan
2022-10-13 12:29:50,466 Node[0] Epoch[31] Batch [360-380]	Speed: 30648.12 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664191740, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 32}}
2022-10-13 12:29:51,741 Node[0] Epoch[31] Time cost=41.861
:::MLLOG {"namespace": "", "time_ms": 1665664191741, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30605.44332116162}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 32}}
:::MLLOG {"namespace": "", "time_ms": 1665664191741, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30605.44332116162, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665664191741, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 33}}
2022-10-13 12:29:53,988 Node[0] Epoch[32] Batch [0-20]	Speed: 30846.21 samples/sec	accuracy=nan
2022-10-13 12:29:56,114 Node[0] Epoch[32] Batch [20-40]	Speed: 30709.46 samples/sec	accuracy=nan
2022-10-13 12:29:58,243 Node[0] Epoch[32] Batch [40-60]	Speed: 30658.67 samples/sec	accuracy=nan
2022-10-13 12:30:00,378 Node[0] Epoch[32] Batch [60-80]	Speed: 30573.60 samples/sec	accuracy=nan
2022-10-13 12:30:02,507 Node[0] Epoch[32] Batch [80-100]	Speed: 30662.01 samples/sec	accuracy=nan
2022-10-13 12:30:04,639 Node[0] Epoch[32] Batch [100-120]	Speed: 30629.69 samples/sec	accuracy=nan
2022-10-13 12:30:06,767 Node[0] Epoch[32] Batch [120-140]	Speed: 30673.20 samples/sec	accuracy=nan
2022-10-13 12:30:08,895 Node[0] Epoch[32] Batch [140-160]	Speed: 30671.93 samples/sec	accuracy=nan
2022-10-13 12:30:11,023 Node[0] Epoch[32] Batch [160-180]	Speed: 30676.71 samples/sec	accuracy=nan
2022-10-13 12:30:13,153 Node[0] Epoch[32] Batch [180-200]	Speed: 30647.71 samples/sec	accuracy=nan
2022-10-13 12:30:15,281 Node[0] Epoch[32] Batch [200-220]	Speed: 30672.91 samples/sec	accuracy=nan
2022-10-13 12:30:17,413 Node[0] Epoch[32] Batch [220-240]	Speed: 30628.41 samples/sec	accuracy=nan
2022-10-13 12:30:19,539 Node[0] Epoch[32] Batch [240-260]	Speed: 30697.51 samples/sec	accuracy=nan
2022-10-13 12:30:21,667 Node[0] Epoch[32] Batch [260-280]	Speed: 30682.10 samples/sec	accuracy=nan
2022-10-13 12:30:23,804 Node[0] Epoch[32] Batch [280-300]	Speed: 30547.67 samples/sec	accuracy=nan
2022-10-13 12:30:25,933 Node[0] Epoch[32] Batch [300-320]	Speed: 30662.42 samples/sec	accuracy=nan
2022-10-13 12:30:28,066 Node[0] Epoch[32] Batch [320-340]	Speed: 30610.43 samples/sec	accuracy=nan
2022-10-13 12:30:30,196 Node[0] Epoch[32] Batch [340-360]	Speed: 30641.47 samples/sec	accuracy=nan
2022-10-13 12:30:32,328 Node[0] Epoch[32] Batch [360-380]	Speed: 30618.87 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664233601, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 33}}
2022-10-13 12:30:33,601 Node[0] Epoch[32] Time cost=41.860
:::MLLOG {"namespace": "", "time_ms": 1665664233601, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30606.00723660453}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 33}}
:::MLLOG {"namespace": "", "time_ms": 1665664233601, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30606.00723660453, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665664233601, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 34}}
2022-10-13 12:30:35,846 Node[0] Epoch[33] Batch [0-20]	Speed: 30626.14 samples/sec	accuracy=nan
2022-10-13 12:30:37,986 Node[0] Epoch[33] Batch [20-40]	Speed: 30514.31 samples/sec	accuracy=nan
2022-10-13 12:30:40,112 Node[0] Epoch[33] Batch [40-60]	Speed: 30704.54 samples/sec	accuracy=nan
2022-10-13 12:30:42,245 Node[0] Epoch[33] Batch [60-80]	Speed: 30599.77 samples/sec	accuracy=nan
2022-10-13 12:30:44,374 Node[0] Epoch[33] Batch [80-100]	Speed: 30665.48 samples/sec	accuracy=nan
2022-10-13 12:30:46,500 Node[0] Epoch[33] Batch [100-120]	Speed: 30703.15 samples/sec	accuracy=nan
2022-10-13 12:30:48,630 Node[0] Epoch[33] Batch [120-140]	Speed: 30645.36 samples/sec	accuracy=nan
2022-10-13 12:30:50,758 Node[0] Epoch[33] Batch [140-160]	Speed: 30675.69 samples/sec	accuracy=nan
2022-10-13 12:30:52,886 Node[0] Epoch[33] Batch [160-180]	Speed: 30680.31 samples/sec	accuracy=nan
2022-10-13 12:30:55,014 Node[0] Epoch[33] Batch [180-200]	Speed: 30674.42 samples/sec	accuracy=nan
2022-10-13 12:30:57,143 Node[0] Epoch[33] Batch [200-220]	Speed: 30667.81 samples/sec	accuracy=nan
2022-10-13 12:30:59,273 Node[0] Epoch[33] Batch [220-240]	Speed: 30652.09 samples/sec	accuracy=nan
2022-10-13 12:31:01,407 Node[0] Epoch[33] Batch [240-260]	Speed: 30582.27 samples/sec	accuracy=nan
2022-10-13 12:31:03,538 Node[0] Epoch[33] Batch [260-280]	Speed: 30635.62 samples/sec	accuracy=nan
2022-10-13 12:31:05,666 Node[0] Epoch[33] Batch [280-300]	Speed: 30677.93 samples/sec	accuracy=nan
2022-10-13 12:31:07,801 Node[0] Epoch[33] Batch [300-320]	Speed: 30575.56 samples/sec	accuracy=nan
2022-10-13 12:31:09,929 Node[0] Epoch[33] Batch [320-340]	Speed: 30678.93 samples/sec	accuracy=nan
2022-10-13 12:31:12,056 Node[0] Epoch[33] Batch [340-360]	Speed: 30688.06 samples/sec	accuracy=nan
2022-10-13 12:31:14,190 Node[0] Epoch[33] Batch [360-380]	Speed: 30593.44 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664275463, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 34}}
2022-10-13 12:31:15,463 Node[0] Epoch[33] Time cost=41.861
:::MLLOG {"namespace": "", "time_ms": 1665664275463, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30605.008763098005}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 34}}
:::MLLOG {"namespace": "", "time_ms": 1665664275463, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30605.008763098005, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665664275463, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 35}}
2022-10-13 12:31:17,709 Node[0] Epoch[34] Batch [0-20]	Speed: 30607.54 samples/sec	accuracy=nan
2022-10-13 12:31:19,835 Node[0] Epoch[34] Batch [20-40]	Speed: 30718.36 samples/sec	accuracy=nan
2022-10-13 12:31:21,968 Node[0] Epoch[34] Batch [40-60]	Speed: 30593.92 samples/sec	accuracy=nan
2022-10-13 12:31:24,097 Node[0] Epoch[34] Batch [60-80]	Speed: 30667.11 samples/sec	accuracy=nan
2022-10-13 12:31:26,229 Node[0] Epoch[34] Batch [80-100]	Speed: 30622.69 samples/sec	accuracy=nan
2022-10-13 12:31:28,360 Node[0] Epoch[34] Batch [100-120]	Speed: 30630.89 samples/sec	accuracy=nan
2022-10-13 12:31:30,487 Node[0] Epoch[34] Batch [120-140]	Speed: 30684.91 samples/sec	accuracy=nan
2022-10-13 12:31:32,624 Node[0] Epoch[34] Batch [140-160]	Speed: 30551.60 samples/sec	accuracy=nan
2022-10-13 12:31:34,754 Node[0] Epoch[34] Batch [160-180]	Speed: 30654.54 samples/sec	accuracy=nan
2022-10-13 12:31:36,884 Node[0] Epoch[34] Batch [180-200]	Speed: 30646.87 samples/sec	accuracy=nan
2022-10-13 12:31:39,013 Node[0] Epoch[34] Batch [200-220]	Speed: 30651.72 samples/sec	accuracy=nan
2022-10-13 12:31:41,146 Node[0] Epoch[34] Batch [220-240]	Speed: 30617.07 samples/sec	accuracy=nan
2022-10-13 12:31:43,281 Node[0] Epoch[34] Batch [240-260]	Speed: 30566.54 samples/sec	accuracy=nan
2022-10-13 12:31:45,411 Node[0] Epoch[34] Batch [260-280]	Speed: 30652.48 samples/sec	accuracy=nan
2022-10-13 12:31:47,543 Node[0] Epoch[34] Batch [280-300]	Speed: 30623.61 samples/sec	accuracy=nan
2022-10-13 12:31:49,669 Node[0] Epoch[34] Batch [300-320]	Speed: 30693.66 samples/sec	accuracy=nan
2022-10-13 12:31:51,807 Node[0] Epoch[34] Batch [320-340]	Speed: 30541.23 samples/sec	accuracy=nan
2022-10-13 12:31:53,933 Node[0] Epoch[34] Batch [340-360]	Speed: 30703.39 samples/sec	accuracy=nan
2022-10-13 12:31:55,972 Node[0] Epoch[34] Batch [360-380]	Speed: 32009.79 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664317344, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 35}}
2022-10-13 12:31:57,345 Node[0] Epoch[34] Time cost=41.882
:::MLLOG {"namespace": "", "time_ms": 1665664317345, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30590.270557689048}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 35}}
:::MLLOG {"namespace": "", "time_ms": 1665664317345, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30590.270557689048, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665664317444, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 35}}
2022-10-13 12:31:58,213 Node[0] Epoch[34] Validation-accuracy=0.747121
2022-10-13 12:31:58,213 Node[0] Epoch[34] Validation-correct-count=1557.000000
2022-10-13 12:31:58,213 Node[0] Epoch[34] Validation-total-count=2084.000000
:::MLLOG {"namespace": "", "time_ms": 1665664318274, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 35}}
:::MLLOG {"namespace": "", "time_ms": 1665664318275, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.76056, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 35}}
:::MLLOG {"namespace": "", "time_ms": 1665664318275, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 32}}
:::MLLOG {"namespace": "", "time_ms": 1665664318275, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1063, "status": "success"}}
ENDING TIMING RUN AT 2022-10-13 12:32:44 PM
RESULT,IMAGE_CLASSIFICATION,,1602,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:44 PM
RESULT,IMAGE_CLASSIFICATION,,1602,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:45 PM
RESULT,IMAGE_CLASSIFICATION,,1603,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:46 PM
RESULT,IMAGE_CLASSIFICATION,,1604,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:46 PM
RESULT,IMAGE_CLASSIFICATION,,1604,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:46 PM
RESULT,IMAGE_CLASSIFICATION,,1604,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:46 PM
RESULT,IMAGE_CLASSIFICATION,,1604,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:46 PM
RESULT,IMAGE_CLASSIFICATION,,1604,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:46 PM
RESULT,IMAGE_CLASSIFICATION,,1604,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:46 PM
RESULT,IMAGE_CLASSIFICATION,,1604,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:47 PM
RESULT,IMAGE_CLASSIFICATION,,1605,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:47 PM
RESULT,IMAGE_CLASSIFICATION,,1605,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:47 PM
RESULT,IMAGE_CLASSIFICATION,,1605,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:49 PM
RESULT,IMAGE_CLASSIFICATION,,1607,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:49 PM
RESULT,IMAGE_CLASSIFICATION,,1607,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:49 PM
RESULT,IMAGE_CLASSIFICATION,,1607,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:49 PM
RESULT,IMAGE_CLASSIFICATION,,1607,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:50 PM
RESULT,IMAGE_CLASSIFICATION,,1608,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:51 PM
RESULT,IMAGE_CLASSIFICATION,,1609,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:51 PM
RESULT,IMAGE_CLASSIFICATION,,1609,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:51 PM
RESULT,IMAGE_CLASSIFICATION,,1609,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:51 PM
RESULT,IMAGE_CLASSIFICATION,,1609,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:51 PM
RESULT,IMAGE_CLASSIFICATION,,1609,,2022-10-13 12:06:02 PM
ENDING TIMING RUN AT 2022-10-13 12:32:52 PM
RESULT,IMAGE_CLASSIFICATION,,1610,,2022-10-13 12:06:02 PM
