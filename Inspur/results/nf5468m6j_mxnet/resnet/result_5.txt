+ echo 'Beginning trial 5 of 5'
Beginning trial 5 of 5
+ docker exec -it image_classification python -c '
import mlperf_log_utils
from mlperf_logging.mllog import constants

mlperf_log_utils.mlperf_submission_log(constants.RESNET)'
:::MLLOG {"namespace": "", "time_ms": 1665664375502, "event_type": "POINT_IN_TIME", "key": "submission_benchmark", "value": "resnet", "metadata": {"file": "/workspace/image_classification/mlperf_log_utils.py", "lineno": 84}}
:::MLLOG {"namespace": "", "time_ms": 1665664375513, "event_type": "POINT_IN_TIME", "key": "submission_org", "value": "Inspur", "metadata": {"file": "/workspace/image_classification/mlperf_log_utils.py", "lineno": 89}}
:::MLLOG {"namespace": "", "time_ms": 1665664375514, "event_type": "POINT_IN_TIME", "key": "submission_division", "value": "closed", "metadata": {"file": "/workspace/image_classification/mlperf_log_utils.py", "lineno": 93}}
:::MLLOG {"namespace": "", "time_ms": 1665664375514, "event_type": "POINT_IN_TIME", "key": "submission_status", "value": "research", "metadata": {"file": "/workspace/image_classification/mlperf_log_utils.py", "lineno": 97}}
:::MLLOG {"namespace": "", "time_ms": 1665664375514, "event_type": "POINT_IN_TIME", "key": "submission_platform", "value": "1xNF5468M6J", "metadata": {"file": "/workspace/image_classification/mlperf_log_utils.py", "lineno": 101}}
+ '[' 1 -eq 1 ']'
+ sync
+ sudo /sbin/sysctl vm.drop_caches=3
vm.drop_caches = 3
+ docker exec -it image_classification python -c '
import mlperf_log_utils
from mlperf_logging.mllog import constants

mlperf_log_utils.mx_resnet_print_event(key=constants.CACHE_CLEAR, val=True)'
:::MLLOG {"namespace": "", "time_ms": 1665664388799, "event_type": "POINT_IN_TIME", "key": "cache_clear", "value": true, "metadata": {"file": "<string>", "lineno": 5}}
+ export SEED=8115
+ SEED=8115
+ docker exec -it --env=BATCHSIZE --env=DALI_CACHE_SIZE --env=DALI_CROP_BUFFER_HINT --env=DALI_DECODER_BUFFER_HINT --env=DALI_DONT_USE_MMAP --env=DALI_EVAL_HW_DECODER_LOAD --env=DALI_EVAL_PREFETCH_QUEUE --env=DALI_EVAL_THREADS --env=DALI_HW_DECODER_LOAD --env=DALI_NORMALIZE_BUFFER_HINT --env=DALI_NVJPEG_MEMPADDING --env=DALI_PREALLOCATE_HEIGHT --env=DALI_PREALLOCATE_WIDTH --env=DALI_PREFETCH_QUEUE --env=DALI_ROI_DECODE --env=DALI_THREADS --env=DALI_TMP_BUFFER_HINT --env=DGXHT --env=DGXNGPU --env=DGXNNODES --env=DGXNSOCKET --env=DGXSOCKETCORES --env=DGXSYSTEM --env=EVAL_OFFSET --env=EVAL_PERIOD --env=HOROVOD_CYCLE_TIME --env=HOROVOD_FUSION_THRESHOLD --env=HOROVOD_NUM_NCCL_STREAMS --env=KVSTORE --env=LABELSMOOTHING --env=LARSETA --env=LR --env=LRSCHED --env=MOM --env=MXNET_CUDNN_NHWC_BN_ADD_HEURISTIC_BWD --env=MXNET_CUDNN_NHWC_BN_ADD_HEURISTIC_FWD --env=MXNET_CUDNN_NHWC_BN_HEURISTIC_BWD --env=MXNET_CUDNN_NHWC_BN_HEURISTIC_FWD --env=MXNET_CUDNN_WARN_ON_IGNORED_FLAGS --env=MXNET_ENABLE_CUDA_GRAPHS --env=MXNET_EXEC_BULK_EXEC_MAX_NODE_TRAIN_BWD --env=MXNET_EXEC_BULK_EXEC_MAX_NODE_TRAIN_FWD --env=MXNET_EXTENDED_NORMCONV_SUPPORT --env=MXNET_HOROVOD_NUM_GROUPS --env=MXNET_OPTIMIZER_AGGREGATION_SIZE --env=NCCL_SOCKET_IFNAME --env=NETWORK --env=NUMEPOCHS --env=OMPI_MCA_btl --env=OPTIMIZER --env=RUN_NCCL_BW_TEST --env=WALLTIME --env=WARMUP_EPOCHS --env=WD --env=MLPERF_HOST_OS --env=SEED image_classification mpirun --allow-run-as-root --bind-to none --np 24 ./run_and_time.sh
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
running benchmark
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
running benchmark
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
running benchmark
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
running benchmark
running benchmark
running benchmark
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
running benchmark
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
running benchmark
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
running benchmark
STARTING TIMING RUN AT 2022-10-13 12:33:10 PM
running benchmark
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
num_gpus=24 num_sockets = 2 num_nodes=2 cores_per_socket=40
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
:::MLLOG {"namespace": "", "time_ms": 1665664404706, "event_type": "INTERVAL_START", "key": "init_start", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 117}}
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
:::MLLOG {"namespace": "", "time_ms": 1665664419222, "event_type": "POINT_IN_TIME", "key": "seed", "value": 8115, "metadata": {"file": "train_imagenet.py", "lineno": 173}}
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] [12:33:39../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
[12:33:39] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for GPU
NCCL version 2.12.10+cuda11.6
:::MLLOG {"namespace": "", "time_ms": 1665664432041, "event_type": "POINT_IN_TIME", "key": "model_bn_span", "value": 136, "metadata": {"file": "/workspace/image_classification/common/dali.py", "lineno": 327}}
[12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[[12:34:08] ../src/storage/storage.cc:12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
199: Using Pooled (Naive) StorageManager for CPU
[12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:34:08] ../src/storage/storage.cc:[199: Using Pooled (Naive) StorageManager for CPU
12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[[12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for [12:34:08] ../src/storage/storage.cc:199: 12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
CPU
Using Pooled (Naive) StorageManager for CPU
[12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
[12:34:08] ../src/storage/storage.cc:199: Using Pooled (Naive) StorageManager for CPU
:::MLLOG {"namespace": "", "time_ms": 1665664448951, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "bn0_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448951, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "bn0_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448951, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "conv0_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448952, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 78, "tensor": "fc1_bias"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448952, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 69, "tensor": "fc1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448952, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit1_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448952, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit1_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448953, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit1_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448953, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit1_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448953, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit1_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448953, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit1_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448954, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit1_bnsc_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448954, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit1_bnsc_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448954, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit1_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448954, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit1_conv1sc_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448954, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit1_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448955, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit1_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448955, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit2_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448955, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit2_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448955, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit2_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448956, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit2_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448956, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit2_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448956, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit2_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448956, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit2_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448956, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit2_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448957, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit2_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448957, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit3_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448957, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit3_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448957, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit3_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448957, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit3_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448958, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage1_unit3_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448958, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage1_unit3_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448958, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit3_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448958, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit3_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448959, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage1_unit3_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448959, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit1_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448959, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit1_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448959, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit1_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448960, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit1_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448960, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit1_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448960, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit1_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448960, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit1_bnsc_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448961, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit1_bnsc_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448961, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit1_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448961, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit1_conv1sc_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448961, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit1_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448961, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit1_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448962, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit2_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448962, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit2_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448962, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit2_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448962, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit2_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448962, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit2_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448963, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit2_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448963, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit2_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448963, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit2_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448963, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit2_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448963, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit3_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448964, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit3_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448964, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit3_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448964, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit3_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448964, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit3_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448965, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit3_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448965, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit3_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448965, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit3_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448965, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit3_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448965, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit4_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448966, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit4_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448966, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit4_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448966, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit4_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448966, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage2_unit4_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448967, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage2_unit4_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448967, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit4_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448967, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit4_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448967, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage2_unit4_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448967, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit1_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448968, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit1_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448968, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit1_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448968, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit1_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448968, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit1_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448968, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit1_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448969, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit1_bnsc_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448969, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit1_bnsc_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448969, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit1_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448969, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit1_conv1sc_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448970, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit1_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448970, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit1_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448970, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit2_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448970, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit2_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448970, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit2_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448971, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit2_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448971, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit2_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448971, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit2_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448971, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit2_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448972, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit2_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448972, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit2_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448972, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit3_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448972, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit3_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448972, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit3_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448973, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit3_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448973, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit3_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448973, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit3_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448973, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit3_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448973, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit3_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448974, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit3_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448974, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit4_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448974, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit4_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448974, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit4_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448975, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit4_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448975, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit4_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448975, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit4_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448975, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit4_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448975, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit4_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448976, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit4_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448976, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit5_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448976, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit5_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448976, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit5_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448976, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit5_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448977, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit5_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448977, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit5_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448977, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit5_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448977, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit5_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448977, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit5_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448978, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit6_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448978, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit6_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448978, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit6_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448978, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit6_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448979, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage3_unit6_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448979, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage3_unit6_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448979, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit6_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448979, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit6_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448979, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage3_unit6_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448980, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit1_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448980, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit1_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448980, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit1_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448980, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit1_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448980, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit1_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448981, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit1_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448981, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit1_bnsc_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448981, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit1_bnsc_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448981, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit1_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448982, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit1_conv1sc_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448982, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit1_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448982, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit1_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448982, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit2_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448982, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit2_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448983, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit2_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448983, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit2_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448983, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit2_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448983, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit2_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448983, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit2_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448984, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit2_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448984, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit2_conv3_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448984, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit3_bn1_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448984, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit3_bn1_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448985, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit3_bn2_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448985, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit3_bn2_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448985, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 88, "tensor": "stage4_unit3_bn3_beta"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448985, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 83, "tensor": "stage4_unit3_bn3_gamma"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448985, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit3_conv1_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448986, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit3_conv2_weight"}}
:::MLLOG {"namespace": "", "time_ms": 1665664448986, "event_type": "POINT_IN_TIME", "key": "weights_initialization", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 73, "tensor": "stage4_unit3_conv3_weight"}}
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,455 Node[22] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='22', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=22, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=55467, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,456 Node[13] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='13', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=13, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=56838, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,456 Node[17] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='17', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=17, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=19180, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,456 Node[2] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='2', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=2, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=12406, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,456 Node[3] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='3', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=3, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=58127, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,456 Node[12] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='12', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=12, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=29386, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,456 Node[11] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='11', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=11, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=5661, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,456 Node[10] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='10', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=10, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=13473, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,456 Node[8] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='8', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=8, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=13338, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,457 Node[19] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='19', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=19, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=11349, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,457 Node[1] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='1', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=1, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=35024, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,457 Node[9] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='9', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=9, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=45729, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,457 Node[15] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='15', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=15, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=24873, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,457 Node[16] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='16', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=16, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=1617, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,457 Node[21] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='21', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=21, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=15561, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,458 Node[7] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='7', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=7, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=17528, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,459 Node[23] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='23', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=23, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=63218, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
:::MLLOG {"namespace": "", "time_ms": 1665664450458, "event_type": "INTERVAL_END", "key": "init_stop", "value": null, "metadata": {"file": "train_imagenet.py", "lineno": 230}}
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,459 Node[18] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='18', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=18, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=32577, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,459 Node[0] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='0', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=0, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=55062, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,459 Node[4] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='4', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=4, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=3777, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
:::MLLOG {"namespace": "", "time_ms": 1665664450459, "event_type": "POINT_IN_TIME", "key": "sgd_opt_learning_rate_decay_poly_power", "value": 2, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 710}}
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,459 Node[5] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='5', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=5, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=56181, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
:::MLLOG {"namespace": "", "time_ms": 1665664450460, "event_type": "POINT_IN_TIME", "key": "sgd_opt_end_learning_rate", "value": 0.0001, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 711}}
:::MLLOG {"namespace": "", "time_ms": 1665664450460, "event_type": "POINT_IN_TIME", "key": "lars_opt_learning_rate_decay_poly_power", "value": 2, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 712}}
:::MLLOG {"namespace": "", "time_ms": 1665664450460, "event_type": "POINT_IN_TIME", "key": "lars_opt_end_learning_rate", "value": 0.0001, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 713}}
:::MLLOG {"namespace": "", "time_ms": 1665664450460, "event_type": "POINT_IN_TIME", "key": "d_batch_size", "value": 136, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1176}}
:::MLLOG {"namespace": "", "time_ms": 1665664450460, "event_type": "POINT_IN_TIME", "key": "s_optimizer", "value": "sgdwfastlars", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1177}}
:::MLLOG {"namespace": "", "time_ms": 1665664450460, "event_type": "POINT_IN_TIME", "key": "s_network", "value": "resnet-v1b-stats-fl", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1178}}
:::MLLOG {"namespace": "", "time_ms": 1665664450460, "event_type": "POINT_IN_TIME", "key": "s_process", "value": "horovod", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1179}}
:::MLLOG {"namespace": "", "time_ms": 1665664450460, "event_type": "POINT_IN_TIME", "key": "global_batch_size", "value": 3264, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1180}}
:::MLLOG {"namespace": "", "time_ms": 1665664450460, "event_type": "POINT_IN_TIME", "key": "s_optimizer", "value": "sgdwfastlars", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1181}}
:::MLLOG {"namespace": "", "time_ms": 1665664450460, "event_type": "POINT_IN_TIME", "key": "s_network", "value": "resnet-v1b-stats-fl", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1182}}
:::MLLOG {"namespace": "", "time_ms": 1665664450460, "event_type": "POINT_IN_TIME", "key": "s_process", "value": "horovod", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1183}}
:::MLLOG {"namespace": "", "time_ms": 1665664450460, "event_type": "POINT_IN_TIME", "key": "gradient_accumulation_steps", "value": 1, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1184}}
:::MLLOG {"namespace": "", "time_ms": 1665664450460, "event_type": "POINT_IN_TIME", "key": "opt_name", "value": "lars", "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1190}}
:::MLLOG {"namespace": "", "time_ms": 1665664450460, "event_type": "POINT_IN_TIME", "key": "lars_epsilon", "value": 0, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1192}}
:::MLLOG {"namespace": "", "time_ms": 1665664450460, "event_type": "POINT_IN_TIME", "key": "lars_opt_weight_decay", "value": 5e-05, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1194}}
:::MLLOG {"namespace": "", "time_ms": 1665664450461, "event_type": "POINT_IN_TIME", "key": "lars_opt_momentum", "value": 0.9, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1196}}
:::MLLOG {"namespace": "", "time_ms": 1665664450461, "event_type": "POINT_IN_TIME", "key": "lars_opt_base_learning_rate", "value": 10.5, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1197}}
:::MLLOG {"namespace": "", "time_ms": 1665664450461, "event_type": "POINT_IN_TIME", "key": "lars_opt_learning_rate_warmup_epochs", "value": 2, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1198}}
:::MLLOG {"namespace": "", "time_ms": 1665664450461, "event_type": "POINT_IN_TIME", "key": "lars_opt_learning_rate_decay_steps", "value": 37, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1199}}
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,461 Node[20] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='20', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=20, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=59488, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,461 Node[14] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='14', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=14, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=43389, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `coin_flip` is now deprecated. Use `random.coin_flip` instead.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder_random_crop` is now deprecated. Use `decoders.image_random_crop` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `mxnet_reader` is now deprecated. Use `readers.mxnet` instead.
In DALI 1.0 all readers were moved into a dedicated :mod:`~nvidia.dali.fn.readers`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
/usr/local/lib/python3.8/dist-packages/nvidia/dali/ops.py:627: DeprecationWarning: WARNING: `image_decoder` is now deprecated. Use `decoders.image` instead.
In DALI 1.0 all decoders were moved into a dedicated :mod:`~nvidia.dali.fn.decoders`
submodule and renamed to follow a common pattern. This is a placeholder operator with identical
functionality to allow for backward compatibility.
  op_instances.append(_OperatorInstance(input_set, self, **kwargs))
2022-10-13 12:34:10,461 Node[6] start with arguments Namespace(accuracy_threshold=0.759, batch_size=136, batchnorm_eps=1e-05, batchnorm_layout='NHWC', batchnorm_mom=0.9, bn_gamma_init0=False, bn_group=1, conv_algo=1, conv_layout='NHWC', custom_bn_off=0, dali_bytes_per_sample_hint=10485760, dali_cache_size=0, dali_crop_buffer_hint=165581, dali_decoder_buffer_hint=1315942, dali_dont_use_mmap=0, dali_eval_hw_decoder_load=0.6, dali_eval_prefetch_queue=6, dali_eval_threads=5, dali_hw_decoder_load=0.6, dali_normalize_buffer_hint=441549, dali_nvjpeg_memory_padding=256, dali_preallocate_height=6430, dali_preallocate_width=5980, dali_prefetch_queue=13, dali_roi_decode=True, dali_threads=11, dali_tmp_buffer_hint=118522776, data_train='/data/train.rec', data_train_idx='/data/train.idx', data_val='/data/val.rec', data_val_idx='/data/val.idx', disp_batches=20, dtype='float16', e2e_cuda_graphs=0, epoch_size=0, eval_offset=2, eval_period=4, force_tensor_core=1, fuse_bn_add_relu=1, fuse_bn_relu=1, gpus='6', image_shape='4,224,224', initializer='default', input_batch_multiplier=1, input_layout='NHWC', kv_store='horovod', label_smoothing=0.1, lars_eps=0, lars_eta=0.001, lazy_init_sanity=False, local_rank=6, log='', logging_dir='logs', lr=10.5, lr_factor=0.1, lr_step_epochs='pow2', max_random_area=1.0, max_random_aspect_ratio=1.3333333333333333, min_random_area=0.05, min_random_aspect_ratio=0.75, model_prefix=None, mom=0.9, network='resnet-v1b-stats-fl', num_classes=1000, num_epochs=37, num_examples=1281167, num_layers=50, num_val_examples=-1, optimizer='sgdwfastlars', pooling_layout='NHWC', profile=0, profile_server_suffix='', profile_worker_suffix='', resize=256, save_period=1, seed=147, separ_val=False, top_k=0, use_dali=True, verbose=0, warmup_epochs=2, warmup_strategy='linear', wd=5e-05)
:::MLLOG {"namespace": "", "time_ms": 1665664467462, "event_type": "INTERVAL_START", "key": "run_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1348}}
:::MLLOG {"namespace": "", "time_ms": 1665664467463, "event_type": "POINT_IN_TIME", "key": "train_samples", "value": 1281167, "metadata": {"file": "/workspace/image_classification/common/dali.py", "lineno": 504}}
:::MLLOG {"namespace": "", "time_ms": 1665664467705, "event_type": "POINT_IN_TIME", "key": "eval_samples", "value": 50000, "metadata": {"file": "/workspace/image_classification/common/dali.py", "lineno": 526}}
:::MLLOG {"namespace": "", "time_ms": 1665664467705, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 902, "first_epoch_num": 1, "epoch_count": 3}}
:::MLLOG {"namespace": "", "time_ms": 1665664467706, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 1}}
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:34:31,999 Node[0] Epoch[0] Batch [0-20]	Speed: 29649.71 samples/sec	accuracy=nan
2022-10-13 12:34:34,200 Node[0] Epoch[0] Batch [20-40]	Speed: 29659.20 samples/sec	accuracy=nan
2022-10-13 12:34:36,291 Node[0] Epoch[0] Batch [40-60]	Speed: 31218.74 samples/sec	accuracy=nan
2022-10-13 12:34:38,600 Node[0] Epoch[0] Batch [60-80]	Speed: 28274.16 samples/sec	accuracy=nan
2022-10-13 12:34:40,794 Node[0] Epoch[0] Batch [80-100]	Speed: 29754.59 samples/sec	accuracy=nan
2022-10-13 12:34:42,985 Node[0] Epoch[0] Batch [100-120]	Speed: 29800.21 samples/sec	accuracy=nan
2022-10-13 12:34:45,075 Node[0] Epoch[0] Batch [120-140]	Speed: 31225.25 samples/sec	accuracy=nan
2022-10-13 12:34:47,376 Node[0] Epoch[0] Batch [140-160]	Speed: 28376.40 samples/sec	accuracy=nan
2022-10-13 12:34:49,466 Node[0] Epoch[0] Batch [160-180]	Speed: 31228.75 samples/sec	accuracy=nan
2022-10-13 12:34:51,664 Node[0] Epoch[0] Batch [180-200]	Speed: 29698.27 samples/sec	accuracy=nan
2022-10-13 12:34:53,963 Node[0] Epoch[0] Batch [200-220]	Speed: 28392.91 samples/sec	accuracy=nan
2022-10-13 12:34:56,160 Node[0] Epoch[0] Batch [220-240]	Speed: 29713.07 samples/sec	accuracy=nan
2022-10-13 12:34:58,362 Node[0] Epoch[0] Batch [240-260]	Speed: 29646.99 samples/sec	accuracy=nan
2022-10-13 12:35:00,557 Node[0] Epoch[0] Batch [260-280]	Speed: 29740.14 samples/sec	accuracy=nan
2022-10-13 12:35:02,665 Node[0] Epoch[0] Batch [280-300]	Speed: 30968.28 samples/sec	accuracy=nan
2022-10-13 12:35:04,957 Node[0] Epoch[0] Batch [300-320]	Speed: 28489.58 samples/sec	accuracy=nan
2022-10-13 12:35:07,162 Node[0] Epoch[0] Batch [320-340]	Speed: 29606.11 samples/sec	accuracy=nan
2022-10-13 12:35:09,366 Node[0] Epoch[0] Batch [340-360]	Speed: 29614.53 samples/sec	accuracy=nan
2022-10-13 12:35:11,536 Node[0] Epoch[0] Batch [360-380]	Speed: 30083.27 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664512808, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 1}}
2022-10-13 12:35:12,808 Node[0] Epoch[0] Time cost=45.102
:::MLLOG {"namespace": "", "time_ms": 1665664512808, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 28405.917738623306}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 1}}
:::MLLOG {"namespace": "", "time_ms": 1665664512808, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 28405.917738623306, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665664512808, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 2}}
2022-10-13 12:35:15,049 Node[0] Epoch[1] Batch [0-20]	Speed: 30689.98 samples/sec	accuracy=nan
2022-10-13 12:35:17,179 Node[0] Epoch[1] Batch [20-40]	Speed: 30656.84 samples/sec	accuracy=nan
2022-10-13 12:35:19,310 Node[0] Epoch[1] Batch [40-60]	Speed: 30625.44 samples/sec	accuracy=nan
2022-10-13 12:35:21,442 Node[0] Epoch[1] Batch [60-80]	Speed: 30622.47 samples/sec	accuracy=nan
2022-10-13 12:35:23,572 Node[0] Epoch[1] Batch [80-100]	Speed: 30647.60 samples/sec	accuracy=nan
2022-10-13 12:35:25,702 Node[0] Epoch[1] Batch [100-120]	Speed: 30642.84 samples/sec	accuracy=nan
2022-10-13 12:35:27,827 Node[0] Epoch[1] Batch [120-140]	Speed: 30728.79 samples/sec	accuracy=nan
2022-10-13 12:35:29,956 Node[0] Epoch[1] Batch [140-160]	Speed: 30663.98 samples/sec	accuracy=nan
2022-10-13 12:35:32,080 Node[0] Epoch[1] Batch [160-180]	Speed: 30728.11 samples/sec	accuracy=nan
2022-10-13 12:35:34,207 Node[0] Epoch[1] Batch [180-200]	Speed: 30693.48 samples/sec	accuracy=nan
2022-10-13 12:35:36,339 Node[0] Epoch[1] Batch [200-220]	Speed: 30623.63 samples/sec	accuracy=nan
2022-10-13 12:35:38,470 Node[0] Epoch[1] Batch [220-240]	Speed: 30628.96 samples/sec	accuracy=nan
2022-10-13 12:35:40,594 Node[0] Epoch[1] Batch [240-260]	Speed: 30728.00 samples/sec	accuracy=nan
2022-10-13 12:35:42,724 Node[0] Epoch[1] Batch [260-280]	Speed: 30661.06 samples/sec	accuracy=nan
2022-10-13 12:35:44,856 Node[0] Epoch[1] Batch [280-300]	Speed: 30610.77 samples/sec	accuracy=nan
2022-10-13 12:35:46,980 Node[0] Epoch[1] Batch [300-320]	Speed: 30742.00 samples/sec	accuracy=nan
2022-10-13 12:35:49,106 Node[0] Epoch[1] Batch [320-340]	Speed: 30703.49 samples/sec	accuracy=nan
2022-10-13 12:35:51,238 Node[0] Epoch[1] Batch [340-360]	Speed: 30608.90 samples/sec	accuracy=nan
2022-10-13 12:35:53,367 Node[0] Epoch[1] Batch [360-380]	Speed: 30671.93 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664554643, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 2}}
2022-10-13 12:35:54,643 Node[0] Epoch[1] Time cost=41.835
:::MLLOG {"namespace": "", "time_ms": 1665664554644, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30624.031745750235}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 2}}
:::MLLOG {"namespace": "", "time_ms": 1665664554644, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30624.031745750235, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665664554644, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 3}}
2022-10-13 12:35:56,882 Node[0] Epoch[2] Batch [0-20]	Speed: 30690.65 samples/sec	accuracy=nan
2022-10-13 12:35:59,011 Node[0] Epoch[2] Batch [20-40]	Speed: 30671.67 samples/sec	accuracy=nan
2022-10-13 12:36:01,143 Node[0] Epoch[2] Batch [40-60]	Speed: 30614.97 samples/sec	accuracy=nan
2022-10-13 12:36:03,272 Node[0] Epoch[2] Batch [60-80]	Speed: 30660.15 samples/sec	accuracy=nan
2022-10-13 12:36:05,402 Node[0] Epoch[2] Batch [80-100]	Speed: 30654.95 samples/sec	accuracy=nan
2022-10-13 12:36:07,529 Node[0] Epoch[2] Batch [100-120]	Speed: 30682.71 samples/sec	accuracy=nan
2022-10-13 12:36:09,655 Node[0] Epoch[2] Batch [120-140]	Speed: 30710.96 samples/sec	accuracy=nan
2022-10-13 12:36:11,785 Node[0] Epoch[2] Batch [140-160]	Speed: 30639.83 samples/sec	accuracy=nan
2022-10-13 12:36:13,913 Node[0] Epoch[2] Batch [160-180]	Speed: 30685.15 samples/sec	accuracy=nan
2022-10-13 12:36:16,045 Node[0] Epoch[2] Batch [180-200]	Speed: 30625.27 samples/sec	accuracy=nan
2022-10-13 12:36:18,169 Node[0] Epoch[2] Batch [200-220]	Speed: 30724.40 samples/sec	accuracy=nan
2022-10-13 12:36:20,298 Node[0] Epoch[2] Batch [220-240]	Speed: 30661.56 samples/sec	accuracy=nan
2022-10-13 12:36:22,423 Node[0] Epoch[2] Batch [240-260]	Speed: 30725.48 samples/sec	accuracy=nan
2022-10-13 12:36:24,551 Node[0] Epoch[2] Batch [260-280]	Speed: 30667.25 samples/sec	accuracy=nan
2022-10-13 12:36:26,683 Node[0] Epoch[2] Batch [280-300]	Speed: 30621.25 samples/sec	accuracy=nan
2022-10-13 12:36:28,812 Node[0] Epoch[2] Batch [300-320]	Speed: 30663.13 samples/sec	accuracy=nan
2022-10-13 12:36:30,943 Node[0] Epoch[2] Batch [320-340]	Speed: 30642.93 samples/sec	accuracy=nan
2022-10-13 12:36:33,073 Node[0] Epoch[2] Batch [340-360]	Speed: 30644.55 samples/sec	accuracy=nan
2022-10-13 12:36:35,198 Node[0] Epoch[2] Batch [360-380]	Speed: 30721.22 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664596472, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 3}}
2022-10-13 12:36:36,472 Node[0] Epoch[2] Time cost=41.828
:::MLLOG {"namespace": "", "time_ms": 1665664596472, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30629.281502291076}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 3}}
:::MLLOG {"namespace": "", "time_ms": 1665664596472, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30629.281502291076, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[22] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[21] DALI iterator does not support resetting while epoch is not finished. Ignoring...
:::MLLOG {"namespace": "", "time_ms": 1665664596573, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 3}}
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[23] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[15] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[20] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[16] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[19] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[14] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[13] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[17] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[18] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[11] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[12] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[1] DALI iterator does not support resetting while epoch is not finished. Ignoring...
2022-10-13 12:36:36,573 Node[0] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[2] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[10] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[3] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[9] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[4] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,573 Node[5] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,574 Node[7] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,574 Node[8] DALI iterator does not support resetting while epoch is not finished. Ignoring...
/usr/local/lib/python3.8/dist-packages/nvidia/dali/plugin/mxnet.py:89: Warning: Please do not use `fill_last_batch` and use `last_batch_policy` instead.
  _DaliBaseIterator.__init__(self,
2022-10-13 12:36:36,574 Node[6] DALI iterator does not support resetting while epoch is not finished. Ignoring...
2022-10-13 12:36:38,434 Node[0] Epoch[2] Validation-accuracy=0.318771
2022-10-13 12:36:38,434 Node[0] Epoch[2] Validation-correct-count=664.000000
2022-10-13 12:36:38,434 Node[0] Epoch[2] Validation-total-count=2083.000000
:::MLLOG {"namespace": "", "time_ms": 1665664598446, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1665664598446, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.32824, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 3}}
:::MLLOG {"namespace": "", "time_ms": 1665664598447, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 1}}
:::MLLOG {"namespace": "", "time_ms": 1665664598448, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 4, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665664598448, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 4}}
2022-10-13 12:36:40,714 Node[0] Epoch[3] Batch [0-20]	Speed: 29169.08 samples/sec	accuracy=nan
2022-10-13 12:36:42,849 Node[0] Epoch[3] Batch [20-40]	Speed: 30575.56 samples/sec	accuracy=nan
2022-10-13 12:36:44,974 Node[0] Epoch[3] Batch [40-60]	Speed: 30713.35 samples/sec	accuracy=nan
2022-10-13 12:36:47,109 Node[0] Epoch[3] Batch [60-80]	Speed: 30579.62 samples/sec	accuracy=nan
2022-10-13 12:36:49,137 Node[0] Epoch[3] Batch [80-100]	Speed: 32190.91 samples/sec	accuracy=nan
2022-10-13 12:36:51,363 Node[0] Epoch[3] Batch [100-120]	Speed: 29322.56 samples/sec	accuracy=nan
2022-10-13 12:36:53,495 Node[0] Epoch[3] Batch [120-140]	Speed: 30622.76 samples/sec	accuracy=nan
2022-10-13 12:36:55,631 Node[0] Epoch[3] Batch [140-160]	Speed: 30560.40 samples/sec	accuracy=nan
2022-10-13 12:36:57,764 Node[0] Epoch[3] Batch [160-180]	Speed: 30599.18 samples/sec	accuracy=nan
2022-10-13 12:36:59,895 Node[0] Epoch[3] Batch [180-200]	Speed: 30639.36 samples/sec	accuracy=nan
2022-10-13 12:37:02,021 Node[0] Epoch[3] Batch [200-220]	Speed: 30705.99 samples/sec	accuracy=nan
2022-10-13 12:37:04,152 Node[0] Epoch[3] Batch [220-240]	Speed: 30631.41 samples/sec	accuracy=nan
2022-10-13 12:37:06,281 Node[0] Epoch[3] Batch [240-260]	Speed: 30660.23 samples/sec	accuracy=nan
2022-10-13 12:37:08,409 Node[0] Epoch[3] Batch [260-280]	Speed: 30679.63 samples/sec	accuracy=nan
2022-10-13 12:37:10,538 Node[0] Epoch[3] Batch [280-300]	Speed: 30665.82 samples/sec	accuracy=nan
2022-10-13 12:37:12,662 Node[0] Epoch[3] Batch [300-320]	Speed: 30726.32 samples/sec	accuracy=nan
2022-10-13 12:37:14,791 Node[0] Epoch[3] Batch [320-340]	Speed: 30668.28 samples/sec	accuracy=nan
2022-10-13 12:37:16,919 Node[0] Epoch[3] Batch [340-360]	Speed: 30667.86 samples/sec	accuracy=nan
2022-10-13 12:37:19,046 Node[0] Epoch[3] Batch [360-380]	Speed: 30693.68 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664640321, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 4}}
2022-10-13 12:37:20,322 Node[0] Epoch[3] Time cost=41.873
:::MLLOG {"namespace": "", "time_ms": 1665664640322, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30596.239010978312}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665664640322, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30596.239010978312, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665664640323, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 5}}
2022-10-13 12:37:22,567 Node[0] Epoch[4] Batch [0-20]	Speed: 30599.91 samples/sec	accuracy=nan
2022-10-13 12:37:24,693 Node[0] Epoch[4] Batch [20-40]	Speed: 30710.77 samples/sec	accuracy=nan
2022-10-13 12:37:26,723 Node[0] Epoch[4] Batch [40-60]	Speed: 32144.44 samples/sec	accuracy=nan
2022-10-13 12:37:28,948 Node[0] Epoch[4] Batch [60-80]	Speed: 29344.97 samples/sec	accuracy=nan
2022-10-13 12:37:31,080 Node[0] Epoch[4] Batch [80-100]	Speed: 30618.93 samples/sec	accuracy=nan
2022-10-13 12:37:33,215 Node[0] Epoch[4] Batch [100-120]	Speed: 30582.79 samples/sec	accuracy=nan
2022-10-13 12:37:35,347 Node[0] Epoch[4] Batch [120-140]	Speed: 30610.55 samples/sec	accuracy=nan
2022-10-13 12:37:37,481 Node[0] Epoch[4] Batch [140-160]	Speed: 30597.28 samples/sec	accuracy=nan
2022-10-13 12:37:39,608 Node[0] Epoch[4] Batch [160-180]	Speed: 30680.46 samples/sec	accuracy=nan
2022-10-13 12:37:41,740 Node[0] Epoch[4] Batch [180-200]	Speed: 30623.23 samples/sec	accuracy=nan
2022-10-13 12:37:43,868 Node[0] Epoch[4] Batch [200-220]	Speed: 30682.38 samples/sec	accuracy=nan
2022-10-13 12:37:45,999 Node[0] Epoch[4] Batch [220-240]	Speed: 30632.19 samples/sec	accuracy=nan
2022-10-13 12:37:48,131 Node[0] Epoch[4] Batch [240-260]	Speed: 30609.77 samples/sec	accuracy=nan
2022-10-13 12:37:50,264 Node[0] Epoch[4] Batch [260-280]	Speed: 30608.37 samples/sec	accuracy=nan
2022-10-13 12:37:52,394 Node[0] Epoch[4] Batch [280-300]	Speed: 30654.08 samples/sec	accuracy=nan
2022-10-13 12:37:54,522 Node[0] Epoch[4] Batch [300-320]	Speed: 30666.64 samples/sec	accuracy=nan
2022-10-13 12:37:56,652 Node[0] Epoch[4] Batch [320-340]	Speed: 30656.27 samples/sec	accuracy=nan
2022-10-13 12:37:58,783 Node[0] Epoch[4] Batch [340-360]	Speed: 30632.15 samples/sec	accuracy=nan
2022-10-13 12:38:00,908 Node[0] Epoch[4] Batch [360-380]	Speed: 30720.65 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664682187, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 5}}
2022-10-13 12:38:02,187 Node[0] Epoch[4] Time cost=41.865
:::MLLOG {"namespace": "", "time_ms": 1665664682187, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30602.616212949815}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 5}}
:::MLLOG {"namespace": "", "time_ms": 1665664682188, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30602.616212949815, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665664682188, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 6}}
2022-10-13 12:38:04,429 Node[0] Epoch[5] Batch [0-20]	Speed: 30666.21 samples/sec	accuracy=nan
2022-10-13 12:38:06,561 Node[0] Epoch[5] Batch [20-40]	Speed: 30623.35 samples/sec	accuracy=nan
2022-10-13 12:38:08,688 Node[0] Epoch[5] Batch [40-60]	Speed: 30685.53 samples/sec	accuracy=nan
2022-10-13 12:38:10,721 Node[0] Epoch[5] Batch [60-80]	Speed: 32119.48 samples/sec	accuracy=nan
2022-10-13 12:38:12,945 Node[0] Epoch[5] Batch [80-100]	Speed: 29348.55 samples/sec	accuracy=nan
2022-10-13 12:38:15,081 Node[0] Epoch[5] Batch [100-120]	Speed: 30570.76 samples/sec	accuracy=nan
2022-10-13 12:38:17,218 Node[0] Epoch[5] Batch [120-140]	Speed: 30537.48 samples/sec	accuracy=nan
2022-10-13 12:38:19,348 Node[0] Epoch[5] Batch [140-160]	Speed: 30648.06 samples/sec	accuracy=nan
2022-10-13 12:38:21,479 Node[0] Epoch[5] Batch [160-180]	Speed: 30632.88 samples/sec	accuracy=nan
2022-10-13 12:38:23,612 Node[0] Epoch[5] Batch [180-200]	Speed: 30612.23 samples/sec	accuracy=nan
2022-10-13 12:38:25,743 Node[0] Epoch[5] Batch [200-220]	Speed: 30628.46 samples/sec	accuracy=nan
2022-10-13 12:38:27,868 Node[0] Epoch[5] Batch [220-240]	Speed: 30719.12 samples/sec	accuracy=nan
2022-10-13 12:38:29,997 Node[0] Epoch[5] Batch [240-260]	Speed: 30664.60 samples/sec	accuracy=nan
2022-10-13 12:38:32,124 Node[0] Epoch[5] Batch [260-280]	Speed: 30693.88 samples/sec	accuracy=nan
2022-10-13 12:38:34,251 Node[0] Epoch[5] Batch [280-300]	Speed: 30692.29 samples/sec	accuracy=nan
2022-10-13 12:38:36,378 Node[0] Epoch[5] Batch [300-320]	Speed: 30690.96 samples/sec	accuracy=nan
2022-10-13 12:38:38,510 Node[0] Epoch[5] Batch [320-340]	Speed: 30620.63 samples/sec	accuracy=nan
2022-10-13 12:38:40,641 Node[0] Epoch[5] Batch [340-360]	Speed: 30625.81 samples/sec	accuracy=nan
2022-10-13 12:38:42,771 Node[0] Epoch[5] Batch [360-380]	Speed: 30653.06 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664724047, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 6}}
2022-10-13 12:38:44,047 Node[0] Epoch[5] Time cost=41.860
:::MLLOG {"namespace": "", "time_ms": 1665664724047, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30606.255644899615}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 6}}
:::MLLOG {"namespace": "", "time_ms": 1665664724048, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30606.255644899615, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665664724048, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 7}}
2022-10-13 12:38:46,291 Node[0] Epoch[6] Batch [0-20]	Speed: 30619.55 samples/sec	accuracy=nan
2022-10-13 12:38:48,420 Node[0] Epoch[6] Batch [20-40]	Speed: 30666.54 samples/sec	accuracy=nan
2022-10-13 12:38:50,552 Node[0] Epoch[6] Batch [40-60]	Speed: 30615.68 samples/sec	accuracy=nan
2022-10-13 12:38:52,678 Node[0] Epoch[6] Batch [60-80]	Speed: 30716.00 samples/sec	accuracy=nan
2022-10-13 12:38:54,808 Node[0] Epoch[6] Batch [80-100]	Speed: 30641.16 samples/sec	accuracy=nan
2022-10-13 12:38:56,943 Node[0] Epoch[6] Batch [100-120]	Speed: 30574.05 samples/sec	accuracy=nan
2022-10-13 12:38:59,072 Node[0] Epoch[6] Batch [120-140]	Speed: 30664.90 samples/sec	accuracy=nan
2022-10-13 12:39:01,203 Node[0] Epoch[6] Batch [140-160]	Speed: 30627.34 samples/sec	accuracy=nan
2022-10-13 12:39:03,236 Node[0] Epoch[6] Batch [160-180]	Speed: 32124.12 samples/sec	accuracy=nan
2022-10-13 12:39:05,463 Node[0] Epoch[6] Batch [180-200]	Speed: 29301.35 samples/sec	accuracy=nan
2022-10-13 12:39:07,597 Node[0] Epoch[6] Batch [200-220]	Speed: 30596.01 samples/sec	accuracy=nan
2022-10-13 12:39:09,725 Node[0] Epoch[6] Batch [220-240]	Speed: 30680.95 samples/sec	accuracy=nan
2022-10-13 12:39:11,854 Node[0] Epoch[6] Batch [240-260]	Speed: 30653.88 samples/sec	accuracy=nan
2022-10-13 12:39:13,990 Node[0] Epoch[6] Batch [260-280]	Speed: 30570.62 samples/sec	accuracy=nan
2022-10-13 12:39:16,119 Node[0] Epoch[6] Batch [280-300]	Speed: 30660.95 samples/sec	accuracy=nan
2022-10-13 12:39:18,249 Node[0] Epoch[6] Batch [300-320]	Speed: 30638.95 samples/sec	accuracy=nan
2022-10-13 12:39:20,379 Node[0] Epoch[6] Batch [320-340]	Speed: 30657.58 samples/sec	accuracy=nan
2022-10-13 12:39:22,509 Node[0] Epoch[6] Batch [340-360]	Speed: 30641.48 samples/sec	accuracy=nan
2022-10-13 12:39:24,638 Node[0] Epoch[6] Batch [360-380]	Speed: 30670.64 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664765914, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 7}}
2022-10-13 12:39:25,914 Node[0] Epoch[6] Time cost=41.867
:::MLLOG {"namespace": "", "time_ms": 1665664765915, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30601.085748746485}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 7}}
:::MLLOG {"namespace": "", "time_ms": 1665664765915, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30601.085748746485, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665664766015, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 7}}
2022-10-13 12:39:26,804 Node[0] Epoch[6] Validation-accuracy=0.439270
2022-10-13 12:39:26,805 Node[0] Epoch[6] Validation-correct-count=915.000000
2022-10-13 12:39:26,805 Node[0] Epoch[6] Validation-total-count=2083.000000
:::MLLOG {"namespace": "", "time_ms": 1665664766852, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1665664766852, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.44952, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 7}}
:::MLLOG {"namespace": "", "time_ms": 1665664766852, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665664766852, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 8, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665664766853, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 8}}
2022-10-13 12:39:29,131 Node[0] Epoch[7] Batch [0-20]	Speed: 29143.96 samples/sec	accuracy=nan
2022-10-13 12:39:31,263 Node[0] Epoch[7] Batch [20-40]	Speed: 30617.43 samples/sec	accuracy=nan
2022-10-13 12:39:33,390 Node[0] Epoch[7] Batch [40-60]	Speed: 30685.98 samples/sec	accuracy=nan
2022-10-13 12:39:35,519 Node[0] Epoch[7] Batch [60-80]	Speed: 30667.70 samples/sec	accuracy=nan
2022-10-13 12:39:37,644 Node[0] Epoch[7] Batch [80-100]	Speed: 30710.06 samples/sec	accuracy=nan
2022-10-13 12:39:39,777 Node[0] Epoch[7] Batch [100-120]	Speed: 30615.24 samples/sec	accuracy=nan
2022-10-13 12:39:41,903 Node[0] Epoch[7] Batch [120-140]	Speed: 30704.79 samples/sec	accuracy=nan
2022-10-13 12:39:44,030 Node[0] Epoch[7] Batch [140-160]	Speed: 30682.67 samples/sec	accuracy=nan
2022-10-13 12:39:46,159 Node[0] Epoch[7] Batch [160-180]	Speed: 30667.45 samples/sec	accuracy=nan
2022-10-13 12:39:48,283 Node[0] Epoch[7] Batch [180-200]	Speed: 30740.03 samples/sec	accuracy=nan
2022-10-13 12:39:50,415 Node[0] Epoch[7] Batch [200-220]	Speed: 30610.46 samples/sec	accuracy=nan
2022-10-13 12:39:52,542 Node[0] Epoch[7] Batch [220-240]	Speed: 30699.78 samples/sec	accuracy=nan
2022-10-13 12:39:54,670 Node[0] Epoch[7] Batch [240-260]	Speed: 30669.26 samples/sec	accuracy=nan
2022-10-13 12:39:56,798 Node[0] Epoch[7] Batch [260-280]	Speed: 30681.36 samples/sec	accuracy=nan
2022-10-13 12:39:58,925 Node[0] Epoch[7] Batch [280-300]	Speed: 30693.81 samples/sec	accuracy=nan
2022-10-13 12:40:01,055 Node[0] Epoch[7] Batch [300-320]	Speed: 30641.55 samples/sec	accuracy=nan
2022-10-13 12:40:03,186 Node[0] Epoch[7] Batch [320-340]	Speed: 30636.65 samples/sec	accuracy=nan
2022-10-13 12:40:05,317 Node[0] Epoch[7] Batch [340-360]	Speed: 30626.27 samples/sec	accuracy=nan
2022-10-13 12:40:07,443 Node[0] Epoch[7] Batch [360-380]	Speed: 30706.02 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664808716, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 8}}
2022-10-13 12:40:08,716 Node[0] Epoch[7] Time cost=41.861
:::MLLOG {"namespace": "", "time_ms": 1665664808716, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30605.428504498163}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 8}}
:::MLLOG {"namespace": "", "time_ms": 1665664808716, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30605.428504498163, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665664808717, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 9}}
2022-10-13 12:40:10,963 Node[0] Epoch[8] Batch [0-20]	Speed: 30608.19 samples/sec	accuracy=nan
2022-10-13 12:40:13,097 Node[0] Epoch[8] Batch [20-40]	Speed: 30594.14 samples/sec	accuracy=nan
2022-10-13 12:40:15,224 Node[0] Epoch[8] Batch [40-60]	Speed: 30685.16 samples/sec	accuracy=nan
2022-10-13 12:40:17,350 Node[0] Epoch[8] Batch [60-80]	Speed: 30710.46 samples/sec	accuracy=nan
2022-10-13 12:40:19,484 Node[0] Epoch[8] Batch [80-100]	Speed: 30588.85 samples/sec	accuracy=nan
2022-10-13 12:40:21,608 Node[0] Epoch[8] Batch [100-120]	Speed: 30733.94 samples/sec	accuracy=nan
2022-10-13 12:40:23,743 Node[0] Epoch[8] Batch [120-140]	Speed: 30581.65 samples/sec	accuracy=nan
2022-10-13 12:40:25,879 Node[0] Epoch[8] Batch [140-160]	Speed: 30558.79 samples/sec	accuracy=nan
2022-10-13 12:40:28,010 Node[0] Epoch[8] Batch [160-180]	Speed: 30635.81 samples/sec	accuracy=nan
2022-10-13 12:40:30,141 Node[0] Epoch[8] Batch [180-200]	Speed: 30625.80 samples/sec	accuracy=nan
2022-10-13 12:40:32,262 Node[0] Epoch[8] Batch [200-220]	Speed: 30773.01 samples/sec	accuracy=nan
2022-10-13 12:40:34,389 Node[0] Epoch[8] Batch [220-240]	Speed: 30692.43 samples/sec	accuracy=nan
2022-10-13 12:40:36,516 Node[0] Epoch[8] Batch [240-260]	Speed: 30695.83 samples/sec	accuracy=nan
2022-10-13 12:40:38,545 Node[0] Epoch[8] Batch [260-280]	Speed: 32178.01 samples/sec	accuracy=nan
2022-10-13 12:40:40,769 Node[0] Epoch[8] Batch [280-300]	Speed: 29352.53 samples/sec	accuracy=nan
2022-10-13 12:40:42,897 Node[0] Epoch[8] Batch [300-320]	Speed: 30680.01 samples/sec	accuracy=nan
2022-10-13 12:40:45,024 Node[0] Epoch[8] Batch [320-340]	Speed: 30682.16 samples/sec	accuracy=nan
2022-10-13 12:40:47,156 Node[0] Epoch[8] Batch [340-360]	Speed: 30616.80 samples/sec	accuracy=nan
2022-10-13 12:40:49,285 Node[0] Epoch[8] Batch [360-380]	Speed: 30670.44 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664850562, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 9}}
2022-10-13 12:40:50,562 Node[0] Epoch[8] Time cost=41.845
:::MLLOG {"namespace": "", "time_ms": 1665664850562, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30616.760468229844}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 9}}
:::MLLOG {"namespace": "", "time_ms": 1665664850562, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30616.760468229844, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665664850562, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 10}}
2022-10-13 12:40:52,806 Node[0] Epoch[9] Batch [0-20]	Speed: 30683.55 samples/sec	accuracy=nan
2022-10-13 12:40:54,934 Node[0] Epoch[9] Batch [20-40]	Speed: 30673.37 samples/sec	accuracy=nan
2022-10-13 12:40:57,057 Node[0] Epoch[9] Batch [40-60]	Speed: 30751.62 samples/sec	accuracy=nan
2022-10-13 12:40:59,191 Node[0] Epoch[9] Batch [60-80]	Speed: 30585.10 samples/sec	accuracy=nan
2022-10-13 12:41:01,322 Node[0] Epoch[9] Batch [80-100]	Speed: 30630.69 samples/sec	accuracy=nan
2022-10-13 12:41:03,455 Node[0] Epoch[9] Batch [100-120]	Speed: 30612.22 samples/sec	accuracy=nan
2022-10-13 12:41:05,589 Node[0] Epoch[9] Batch [120-140]	Speed: 30593.44 samples/sec	accuracy=nan
2022-10-13 12:41:07,714 Node[0] Epoch[9] Batch [140-160]	Speed: 30714.24 samples/sec	accuracy=nan
2022-10-13 12:41:09,845 Node[0] Epoch[9] Batch [160-180]	Speed: 30633.99 samples/sec	accuracy=nan
2022-10-13 12:41:11,976 Node[0] Epoch[9] Batch [180-200]	Speed: 30639.18 samples/sec	accuracy=nan
2022-10-13 12:41:14,103 Node[0] Epoch[9] Batch [200-220]	Speed: 30688.61 samples/sec	accuracy=nan
2022-10-13 12:41:16,137 Node[0] Epoch[9] Batch [220-240]	Speed: 32094.92 samples/sec	accuracy=nan
2022-10-13 12:41:18,356 Node[0] Epoch[9] Batch [240-260]	Speed: 29416.27 samples/sec	accuracy=nan
2022-10-13 12:41:20,385 Node[0] Epoch[9] Batch [260-280]	Speed: 32169.74 samples/sec	accuracy=nan
2022-10-13 12:41:22,615 Node[0] Epoch[9] Batch [280-300]	Speed: 29275.61 samples/sec	accuracy=nan
2022-10-13 12:41:24,742 Node[0] Epoch[9] Batch [300-320]	Speed: 30686.73 samples/sec	accuracy=nan
2022-10-13 12:41:26,782 Node[0] Epoch[9] Batch [320-340]	Speed: 32013.07 samples/sec	accuracy=nan
2022-10-13 12:41:29,005 Node[0] Epoch[9] Batch [340-360]	Speed: 29359.46 samples/sec	accuracy=nan
2022-10-13 12:41:31,133 Node[0] Epoch[9] Batch [360-380]	Speed: 30683.06 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664892409, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 10}}
2022-10-13 12:41:32,410 Node[0] Epoch[9] Time cost=41.847
:::MLLOG {"namespace": "", "time_ms": 1665664892410, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30615.327314013517}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 10}}
:::MLLOG {"namespace": "", "time_ms": 1665664892410, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30615.327314013517, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665664892411, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 11}}
2022-10-13 12:41:34,649 Node[0] Epoch[10] Batch [0-20]	Speed: 29337.72 samples/sec	accuracy=nan
2022-10-13 12:41:36,786 Node[0] Epoch[10] Batch [20-40]	Speed: 30556.28 samples/sec	accuracy=nan
2022-10-13 12:41:38,913 Node[0] Epoch[10] Batch [40-60]	Speed: 30679.52 samples/sec	accuracy=nan
2022-10-13 12:41:41,042 Node[0] Epoch[10] Batch [60-80]	Speed: 30667.25 samples/sec	accuracy=nan
2022-10-13 12:41:43,167 Node[0] Epoch[10] Batch [80-100]	Speed: 30725.87 samples/sec	accuracy=nan
2022-10-13 12:41:45,294 Node[0] Epoch[10] Batch [100-120]	Speed: 30686.33 samples/sec	accuracy=nan
2022-10-13 12:41:47,422 Node[0] Epoch[10] Batch [120-140]	Speed: 30677.18 samples/sec	accuracy=nan
2022-10-13 12:41:49,554 Node[0] Epoch[10] Batch [140-160]	Speed: 30622.30 samples/sec	accuracy=nan
2022-10-13 12:41:51,684 Node[0] Epoch[10] Batch [160-180]	Speed: 30638.65 samples/sec	accuracy=nan
2022-10-13 12:41:53,814 Node[0] Epoch[10] Batch [180-200]	Speed: 30652.66 samples/sec	accuracy=nan
2022-10-13 12:41:55,942 Node[0] Epoch[10] Batch [200-220]	Speed: 30680.18 samples/sec	accuracy=nan
2022-10-13 12:41:58,071 Node[0] Epoch[10] Batch [220-240]	Speed: 30663.71 samples/sec	accuracy=nan
2022-10-13 12:42:00,195 Node[0] Epoch[10] Batch [240-260]	Speed: 30723.85 samples/sec	accuracy=nan
2022-10-13 12:42:02,331 Node[0] Epoch[10] Batch [260-280]	Speed: 30574.47 samples/sec	accuracy=nan
2022-10-13 12:42:04,459 Node[0] Epoch[10] Batch [280-300]	Speed: 30671.55 samples/sec	accuracy=nan
2022-10-13 12:42:06,494 Node[0] Epoch[10] Batch [300-320]	Speed: 32072.56 samples/sec	accuracy=nan
2022-10-13 12:42:08,723 Node[0] Epoch[10] Batch [320-340]	Speed: 29292.39 samples/sec	accuracy=nan
2022-10-13 12:42:10,854 Node[0] Epoch[10] Batch [340-360]	Speed: 30632.86 samples/sec	accuracy=nan
2022-10-13 12:42:12,983 Node[0] Epoch[10] Batch [360-380]	Speed: 30659.18 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664934258, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 11}}
2022-10-13 12:42:14,259 Node[0] Epoch[10] Time cost=41.847
:::MLLOG {"namespace": "", "time_ms": 1665664934259, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30615.55093026489}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 11}}
:::MLLOG {"namespace": "", "time_ms": 1665664934259, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30615.55093026489, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665664934360, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 11}}
2022-10-13 12:42:15,140 Node[0] Epoch[10] Validation-accuracy=0.537908
2022-10-13 12:42:15,141 Node[0] Epoch[10] Validation-correct-count=1121.000000
2022-10-13 12:42:15,141 Node[0] Epoch[10] Validation-total-count=2084.000000
:::MLLOG {"namespace": "", "time_ms": 1665664935205, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1665664935205, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.53306, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 11}}
:::MLLOG {"namespace": "", "time_ms": 1665664935205, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 8}}
:::MLLOG {"namespace": "", "time_ms": 1665664935205, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 12, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665664935206, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 12}}
2022-10-13 12:42:17,446 Node[0] Epoch[11] Batch [0-20]	Speed: 29311.21 samples/sec	accuracy=nan
2022-10-13 12:42:19,578 Node[0] Epoch[11] Batch [20-40]	Speed: 30620.22 samples/sec	accuracy=nan
2022-10-13 12:42:21,708 Node[0] Epoch[11] Batch [40-60]	Speed: 30638.69 samples/sec	accuracy=nan
2022-10-13 12:42:23,835 Node[0] Epoch[11] Batch [60-80]	Speed: 30692.26 samples/sec	accuracy=nan
2022-10-13 12:42:25,966 Node[0] Epoch[11] Batch [80-100]	Speed: 30632.68 samples/sec	accuracy=nan
2022-10-13 12:42:28,094 Node[0] Epoch[11] Batch [100-120]	Speed: 30681.95 samples/sec	accuracy=nan
2022-10-13 12:42:30,128 Node[0] Epoch[11] Batch [120-140]	Speed: 32099.55 samples/sec	accuracy=nan
2022-10-13 12:42:32,354 Node[0] Epoch[11] Batch [140-160]	Speed: 29316.51 samples/sec	accuracy=nan
2022-10-13 12:42:34,483 Node[0] Epoch[11] Batch [160-180]	Speed: 30670.36 samples/sec	accuracy=nan
2022-10-13 12:42:36,611 Node[0] Epoch[11] Batch [180-200]	Speed: 30672.76 samples/sec	accuracy=nan
2022-10-13 12:42:38,749 Node[0] Epoch[11] Batch [200-220]	Speed: 30539.28 samples/sec	accuracy=nan
2022-10-13 12:42:40,878 Node[0] Epoch[11] Batch [220-240]	Speed: 30664.98 samples/sec	accuracy=nan
2022-10-13 12:42:43,009 Node[0] Epoch[11] Batch [240-260]	Speed: 30630.53 samples/sec	accuracy=nan
2022-10-13 12:42:45,139 Node[0] Epoch[11] Batch [260-280]	Speed: 30638.41 samples/sec	accuracy=nan
2022-10-13 12:42:47,266 Node[0] Epoch[11] Batch [280-300]	Speed: 30690.61 samples/sec	accuracy=nan
2022-10-13 12:42:49,397 Node[0] Epoch[11] Batch [300-320]	Speed: 30638.20 samples/sec	accuracy=nan
2022-10-13 12:42:51,526 Node[0] Epoch[11] Batch [320-340]	Speed: 30669.32 samples/sec	accuracy=nan
2022-10-13 12:42:53,655 Node[0] Epoch[11] Batch [340-360]	Speed: 30652.35 samples/sec	accuracy=nan
2022-10-13 12:42:55,784 Node[0] Epoch[11] Batch [360-380]	Speed: 30660.54 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665664977063, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 12}}
2022-10-13 12:42:57,063 Node[0] Epoch[11] Time cost=41.857
:::MLLOG {"namespace": "", "time_ms": 1665664977063, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30608.128163071167}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 12}}
:::MLLOG {"namespace": "", "time_ms": 1665664977063, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30608.128163071167, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665664977063, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 13}}
2022-10-13 12:42:59,306 Node[0] Epoch[12] Batch [0-20]	Speed: 29339.85 samples/sec	accuracy=nan
2022-10-13 12:43:01,437 Node[0] Epoch[12] Batch [20-40]	Speed: 30636.08 samples/sec	accuracy=nan
2022-10-13 12:43:03,563 Node[0] Epoch[12] Batch [40-60]	Speed: 30706.24 samples/sec	accuracy=nan
2022-10-13 12:43:05,691 Node[0] Epoch[12] Batch [60-80]	Speed: 30675.90 samples/sec	accuracy=nan
2022-10-13 12:43:07,821 Node[0] Epoch[12] Batch [80-100]	Speed: 30641.67 samples/sec	accuracy=nan
2022-10-13 12:43:09,952 Node[0] Epoch[12] Batch [100-120]	Speed: 30642.25 samples/sec	accuracy=nan
2022-10-13 12:43:12,082 Node[0] Epoch[12] Batch [120-140]	Speed: 30639.79 samples/sec	accuracy=nan
2022-10-13 12:43:14,208 Node[0] Epoch[12] Batch [140-160]	Speed: 30709.97 samples/sec	accuracy=nan
2022-10-13 12:43:16,337 Node[0] Epoch[12] Batch [160-180]	Speed: 30659.96 samples/sec	accuracy=nan
2022-10-13 12:43:18,464 Node[0] Epoch[12] Batch [180-200]	Speed: 30698.06 samples/sec	accuracy=nan
2022-10-13 12:43:20,590 Node[0] Epoch[12] Batch [200-220]	Speed: 30703.93 samples/sec	accuracy=nan
2022-10-13 12:43:22,715 Node[0] Epoch[12] Batch [220-240]	Speed: 30713.12 samples/sec	accuracy=nan
2022-10-13 12:43:24,844 Node[0] Epoch[12] Batch [240-260]	Speed: 30666.92 samples/sec	accuracy=nan
2022-10-13 12:43:26,975 Node[0] Epoch[12] Batch [260-280]	Speed: 30628.84 samples/sec	accuracy=nan
2022-10-13 12:43:29,101 Node[0] Epoch[12] Batch [280-300]	Speed: 30707.95 samples/sec	accuracy=nan
2022-10-13 12:43:31,232 Node[0] Epoch[12] Batch [300-320]	Speed: 30631.09 samples/sec	accuracy=nan
2022-10-13 12:43:33,358 Node[0] Epoch[12] Batch [320-340]	Speed: 30709.36 samples/sec	accuracy=nan
2022-10-13 12:43:35,491 Node[0] Epoch[12] Batch [340-360]	Speed: 30606.51 samples/sec	accuracy=nan
2022-10-13 12:43:37,617 Node[0] Epoch[12] Batch [360-380]	Speed: 30706.25 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665018892, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 13}}
2022-10-13 12:43:38,893 Node[0] Epoch[12] Time cost=41.830
:::MLLOG {"namespace": "", "time_ms": 1665665018893, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30628.290238361806}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 13}}
:::MLLOG {"namespace": "", "time_ms": 1665665018893, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30628.290238361806, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665018893, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 14}}
2022-10-13 12:43:41,135 Node[0] Epoch[13] Batch [0-20]	Speed: 30686.74 samples/sec	accuracy=nan
2022-10-13 12:43:43,265 Node[0] Epoch[13] Batch [20-40]	Speed: 30648.56 samples/sec	accuracy=nan
2022-10-13 12:43:45,392 Node[0] Epoch[13] Batch [40-60]	Speed: 30679.49 samples/sec	accuracy=nan
2022-10-13 12:43:47,523 Node[0] Epoch[13] Batch [60-80]	Speed: 30636.17 samples/sec	accuracy=nan
2022-10-13 12:43:49,653 Node[0] Epoch[13] Batch [80-100]	Speed: 30655.74 samples/sec	accuracy=nan
2022-10-13 12:43:51,782 Node[0] Epoch[13] Batch [100-120]	Speed: 30652.24 samples/sec	accuracy=nan
2022-10-13 12:43:53,908 Node[0] Epoch[13] Batch [120-140]	Speed: 30709.87 samples/sec	accuracy=nan
2022-10-13 12:43:56,041 Node[0] Epoch[13] Batch [140-160]	Speed: 30606.71 samples/sec	accuracy=nan
2022-10-13 12:43:58,170 Node[0] Epoch[13] Batch [160-180]	Speed: 30669.18 samples/sec	accuracy=nan
2022-10-13 12:44:00,296 Node[0] Epoch[13] Batch [180-200]	Speed: 30699.55 samples/sec	accuracy=nan
2022-10-13 12:44:02,427 Node[0] Epoch[13] Batch [200-220]	Speed: 30624.75 samples/sec	accuracy=nan
2022-10-13 12:44:04,556 Node[0] Epoch[13] Batch [220-240]	Speed: 30672.78 samples/sec	accuracy=nan
2022-10-13 12:44:06,684 Node[0] Epoch[13] Batch [240-260]	Speed: 30676.80 samples/sec	accuracy=nan
2022-10-13 12:44:08,816 Node[0] Epoch[13] Batch [260-280]	Speed: 30612.76 samples/sec	accuracy=nan
2022-10-13 12:44:10,944 Node[0] Epoch[13] Batch [280-300]	Speed: 30686.77 samples/sec	accuracy=nan
2022-10-13 12:44:13,069 Node[0] Epoch[13] Batch [300-320]	Speed: 30710.11 samples/sec	accuracy=nan
2022-10-13 12:44:15,202 Node[0] Epoch[13] Batch [320-340]	Speed: 30609.88 samples/sec	accuracy=nan
2022-10-13 12:44:17,335 Node[0] Epoch[13] Batch [340-360]	Speed: 30608.53 samples/sec	accuracy=nan
2022-10-13 12:44:19,464 Node[0] Epoch[13] Batch [360-380]	Speed: 30659.87 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665060739, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 14}}
2022-10-13 12:44:20,739 Node[0] Epoch[13] Time cost=41.846
:::MLLOG {"namespace": "", "time_ms": 1665665060739, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30616.290003470596}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 14}}
:::MLLOG {"namespace": "", "time_ms": 1665665060740, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30616.290003470596, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665060740, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 15}}
2022-10-13 12:44:22,982 Node[0] Epoch[14] Batch [0-20]	Speed: 30674.06 samples/sec	accuracy=nan
2022-10-13 12:44:25,113 Node[0] Epoch[14] Batch [20-40]	Speed: 30627.83 samples/sec	accuracy=nan
2022-10-13 12:44:27,245 Node[0] Epoch[14] Batch [40-60]	Speed: 30631.48 samples/sec	accuracy=nan
2022-10-13 12:44:29,372 Node[0] Epoch[14] Batch [60-80]	Speed: 30681.70 samples/sec	accuracy=nan
2022-10-13 12:44:31,500 Node[0] Epoch[14] Batch [80-100]	Speed: 30672.64 samples/sec	accuracy=nan
2022-10-13 12:44:33,628 Node[0] Epoch[14] Batch [100-120]	Speed: 30686.64 samples/sec	accuracy=nan
2022-10-13 12:44:35,761 Node[0] Epoch[14] Batch [120-140]	Speed: 30593.96 samples/sec	accuracy=nan
2022-10-13 12:44:37,895 Node[0] Epoch[14] Batch [140-160]	Speed: 30602.39 samples/sec	accuracy=nan
2022-10-13 12:44:40,029 Node[0] Epoch[14] Batch [160-180]	Speed: 30579.10 samples/sec	accuracy=nan
2022-10-13 12:44:42,157 Node[0] Epoch[14] Batch [180-200]	Speed: 30679.36 samples/sec	accuracy=nan
2022-10-13 12:44:44,280 Node[0] Epoch[14] Batch [200-220]	Speed: 30757.14 samples/sec	accuracy=nan
2022-10-13 12:44:46,408 Node[0] Epoch[14] Batch [220-240]	Speed: 30671.08 samples/sec	accuracy=nan
2022-10-13 12:44:48,535 Node[0] Epoch[14] Batch [240-260]	Speed: 30696.54 samples/sec	accuracy=nan
2022-10-13 12:44:50,662 Node[0] Epoch[14] Batch [260-280]	Speed: 30692.12 samples/sec	accuracy=nan
2022-10-13 12:44:52,792 Node[0] Epoch[14] Batch [280-300]	Speed: 30640.77 samples/sec	accuracy=nan
2022-10-13 12:44:54,920 Node[0] Epoch[14] Batch [300-320]	Speed: 30676.22 samples/sec	accuracy=nan
2022-10-13 12:44:57,049 Node[0] Epoch[14] Batch [320-340]	Speed: 30656.09 samples/sec	accuracy=nan
2022-10-13 12:44:59,182 Node[0] Epoch[14] Batch [340-360]	Speed: 30616.79 samples/sec	accuracy=nan
2022-10-13 12:45:01,308 Node[0] Epoch[14] Batch [360-380]	Speed: 30702.29 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665102585, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 15}}
2022-10-13 12:45:02,585 Node[0] Epoch[14] Time cost=41.845
:::MLLOG {"namespace": "", "time_ms": 1665665102585, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30616.70046005525}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 15}}
:::MLLOG {"namespace": "", "time_ms": 1665665102585, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30616.70046005525, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665102687, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 15}}
2022-10-13 12:45:03,506 Node[0] Epoch[14] Validation-accuracy=0.588094
2022-10-13 12:45:03,506 Node[0] Epoch[14] Validation-correct-count=1225.000000
2022-10-13 12:45:03,506 Node[0] Epoch[14] Validation-total-count=2083.000000
:::MLLOG {"namespace": "", "time_ms": 1665665103524, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 15}}
:::MLLOG {"namespace": "", "time_ms": 1665665103525, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.587, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 15}}
:::MLLOG {"namespace": "", "time_ms": 1665665103525, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 12}}
:::MLLOG {"namespace": "", "time_ms": 1665665103525, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 16, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665665103525, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 16}}
2022-10-13 12:45:05,813 Node[0] Epoch[15] Batch [0-20]	Speed: 29023.64 samples/sec	accuracy=nan
2022-10-13 12:45:07,944 Node[0] Epoch[15] Batch [20-40]	Speed: 30632.82 samples/sec	accuracy=nan
2022-10-13 12:45:10,074 Node[0] Epoch[15] Batch [40-60]	Speed: 30652.27 samples/sec	accuracy=nan
2022-10-13 12:45:12,205 Node[0] Epoch[15] Batch [60-80]	Speed: 30634.21 samples/sec	accuracy=nan
2022-10-13 12:45:14,330 Node[0] Epoch[15] Batch [80-100]	Speed: 30721.70 samples/sec	accuracy=nan
2022-10-13 12:45:16,460 Node[0] Epoch[15] Batch [100-120]	Speed: 30643.52 samples/sec	accuracy=nan
2022-10-13 12:45:18,494 Node[0] Epoch[15] Batch [120-140]	Speed: 32088.49 samples/sec	accuracy=nan
2022-10-13 12:45:20,721 Node[0] Epoch[15] Batch [140-160]	Speed: 29313.64 samples/sec	accuracy=nan
2022-10-13 12:45:22,855 Node[0] Epoch[15] Batch [160-180]	Speed: 30596.52 samples/sec	accuracy=nan
2022-10-13 12:45:24,983 Node[0] Epoch[15] Batch [180-200]	Speed: 30671.67 samples/sec	accuracy=nan
2022-10-13 12:45:27,110 Node[0] Epoch[15] Batch [200-220]	Speed: 30694.26 samples/sec	accuracy=nan
2022-10-13 12:45:29,235 Node[0] Epoch[15] Batch [220-240]	Speed: 30723.97 samples/sec	accuracy=nan
2022-10-13 12:45:31,364 Node[0] Epoch[15] Batch [240-260]	Speed: 30661.82 samples/sec	accuracy=nan
2022-10-13 12:45:33,494 Node[0] Epoch[15] Batch [260-280]	Speed: 30639.18 samples/sec	accuracy=nan
2022-10-13 12:45:35,623 Node[0] Epoch[15] Batch [280-300]	Speed: 30661.05 samples/sec	accuracy=nan
2022-10-13 12:45:37,757 Node[0] Epoch[15] Batch [300-320]	Speed: 30599.14 samples/sec	accuracy=nan
2022-10-13 12:45:39,884 Node[0] Epoch[15] Batch [320-340]	Speed: 30684.57 samples/sec	accuracy=nan
2022-10-13 12:45:42,016 Node[0] Epoch[15] Batch [340-360]	Speed: 30620.07 samples/sec	accuracy=nan
2022-10-13 12:45:44,150 Node[0] Epoch[15] Batch [360-380]	Speed: 30599.81 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665145419, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 16}}
2022-10-13 12:45:45,419 Node[0] Epoch[15] Time cost=41.893
:::MLLOG {"namespace": "", "time_ms": 1665665145419, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30581.592962751194}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 16}}
:::MLLOG {"namespace": "", "time_ms": 1665665145419, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30581.592962751194, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665145419, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 17}}
2022-10-13 12:45:47,668 Node[0] Epoch[16] Batch [0-20]	Speed: 29401.39 samples/sec	accuracy=nan
2022-10-13 12:45:49,802 Node[0] Epoch[16] Batch [20-40]	Speed: 30584.58 samples/sec	accuracy=nan
2022-10-13 12:45:51,926 Node[0] Epoch[16] Batch [40-60]	Speed: 30736.55 samples/sec	accuracy=nan
2022-10-13 12:45:54,055 Node[0] Epoch[16] Batch [60-80]	Speed: 30663.77 samples/sec	accuracy=nan
2022-10-13 12:45:56,181 Node[0] Epoch[16] Batch [80-100]	Speed: 30697.93 samples/sec	accuracy=nan
2022-10-13 12:45:58,215 Node[0] Epoch[16] Batch [100-120]	Speed: 32093.98 samples/sec	accuracy=nan
2022-10-13 12:46:00,448 Node[0] Epoch[16] Batch [120-140]	Speed: 29240.41 samples/sec	accuracy=nan
2022-10-13 12:46:02,579 Node[0] Epoch[16] Batch [140-160]	Speed: 30631.24 samples/sec	accuracy=nan
2022-10-13 12:46:04,714 Node[0] Epoch[16] Batch [160-180]	Speed: 30579.66 samples/sec	accuracy=nan
2022-10-13 12:46:06,839 Node[0] Epoch[16] Batch [180-200]	Speed: 30713.06 samples/sec	accuracy=nan
2022-10-13 12:46:08,966 Node[0] Epoch[16] Batch [200-220]	Speed: 30692.02 samples/sec	accuracy=nan
2022-10-13 12:46:11,093 Node[0] Epoch[16] Batch [220-240]	Speed: 30696.27 samples/sec	accuracy=nan
2022-10-13 12:46:13,223 Node[0] Epoch[16] Batch [240-260]	Speed: 30645.19 samples/sec	accuracy=nan
2022-10-13 12:46:15,353 Node[0] Epoch[16] Batch [260-280]	Speed: 30654.67 samples/sec	accuracy=nan
2022-10-13 12:46:17,478 Node[0] Epoch[16] Batch [280-300]	Speed: 30712.15 samples/sec	accuracy=nan
2022-10-13 12:46:19,607 Node[0] Epoch[16] Batch [300-320]	Speed: 30664.89 samples/sec	accuracy=nan
2022-10-13 12:46:21,735 Node[0] Epoch[16] Batch [320-340]	Speed: 30679.47 samples/sec	accuracy=nan
2022-10-13 12:46:23,861 Node[0] Epoch[16] Batch [340-360]	Speed: 30696.38 samples/sec	accuracy=nan
2022-10-13 12:46:25,994 Node[0] Epoch[16] Batch [360-380]	Speed: 30615.47 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665187270, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 17}}
2022-10-13 12:46:27,270 Node[0] Epoch[16] Time cost=41.851
:::MLLOG {"namespace": "", "time_ms": 1665665187270, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30612.762240185362}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 17}}
:::MLLOG {"namespace": "", "time_ms": 1665665187271, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30612.762240185362, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665187271, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 18}}
2022-10-13 12:46:29,512 Node[0] Epoch[17] Batch [0-20]	Speed: 30712.16 samples/sec	accuracy=nan
2022-10-13 12:46:31,555 Node[0] Epoch[17] Batch [20-40]	Speed: 31948.88 samples/sec	accuracy=nan
2022-10-13 12:46:33,778 Node[0] Epoch[17] Batch [40-60]	Speed: 29370.97 samples/sec	accuracy=nan
2022-10-13 12:46:35,908 Node[0] Epoch[17] Batch [60-80]	Speed: 30646.09 samples/sec	accuracy=nan
2022-10-13 12:46:38,037 Node[0] Epoch[17] Batch [80-100]	Speed: 30655.39 samples/sec	accuracy=nan
2022-10-13 12:46:40,168 Node[0] Epoch[17] Batch [100-120]	Speed: 30643.95 samples/sec	accuracy=nan
2022-10-13 12:46:42,301 Node[0] Epoch[17] Batch [120-140]	Speed: 30605.86 samples/sec	accuracy=nan
2022-10-13 12:46:44,432 Node[0] Epoch[17] Batch [140-160]	Speed: 30627.47 samples/sec	accuracy=nan
2022-10-13 12:46:46,561 Node[0] Epoch[17] Batch [160-180]	Speed: 30663.63 samples/sec	accuracy=nan
2022-10-13 12:46:48,693 Node[0] Epoch[17] Batch [180-200]	Speed: 30619.21 samples/sec	accuracy=nan
2022-10-13 12:46:50,825 Node[0] Epoch[17] Batch [200-220]	Speed: 30616.01 samples/sec	accuracy=nan
2022-10-13 12:46:52,956 Node[0] Epoch[17] Batch [220-240]	Speed: 30640.77 samples/sec	accuracy=nan
2022-10-13 12:46:55,082 Node[0] Epoch[17] Batch [240-260]	Speed: 30699.85 samples/sec	accuracy=nan
2022-10-13 12:46:57,212 Node[0] Epoch[17] Batch [260-280]	Speed: 30650.88 samples/sec	accuracy=nan
2022-10-13 12:46:59,336 Node[0] Epoch[17] Batch [280-300]	Speed: 30731.66 samples/sec	accuracy=nan
2022-10-13 12:47:01,467 Node[0] Epoch[17] Batch [300-320]	Speed: 30633.67 samples/sec	accuracy=nan
2022-10-13 12:47:03,592 Node[0] Epoch[17] Batch [320-340]	Speed: 30718.31 samples/sec	accuracy=nan
2022-10-13 12:47:05,720 Node[0] Epoch[17] Batch [340-360]	Speed: 30680.71 samples/sec	accuracy=nan
2022-10-13 12:47:07,849 Node[0] Epoch[17] Batch [360-380]	Speed: 30661.33 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665229127, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 18}}
2022-10-13 12:47:09,128 Node[0] Epoch[17] Time cost=41.857
:::MLLOG {"namespace": "", "time_ms": 1665665229128, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30608.41095223019}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 18}}
:::MLLOG {"namespace": "", "time_ms": 1665665229128, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30608.41095223019, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665229128, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 19}}
2022-10-13 12:47:11,370 Node[0] Epoch[18] Batch [0-20]	Speed: 30638.74 samples/sec	accuracy=nan
2022-10-13 12:47:13,501 Node[0] Epoch[18] Batch [20-40]	Speed: 30621.95 samples/sec	accuracy=nan
2022-10-13 12:47:15,631 Node[0] Epoch[18] Batch [40-60]	Speed: 30660.17 samples/sec	accuracy=nan
2022-10-13 12:47:17,759 Node[0] Epoch[18] Batch [60-80]	Speed: 30676.88 samples/sec	accuracy=nan
2022-10-13 12:47:19,883 Node[0] Epoch[18] Batch [80-100]	Speed: 30726.56 samples/sec	accuracy=nan
2022-10-13 12:47:22,011 Node[0] Epoch[18] Batch [100-120]	Speed: 30672.65 samples/sec	accuracy=nan
2022-10-13 12:47:24,140 Node[0] Epoch[18] Batch [120-140]	Speed: 30665.75 samples/sec	accuracy=nan
2022-10-13 12:47:26,271 Node[0] Epoch[18] Batch [140-160]	Speed: 30630.09 samples/sec	accuracy=nan
2022-10-13 12:47:28,398 Node[0] Epoch[18] Batch [160-180]	Speed: 30692.76 samples/sec	accuracy=nan
2022-10-13 12:47:30,530 Node[0] Epoch[18] Batch [180-200]	Speed: 30627.11 samples/sec	accuracy=nan
2022-10-13 12:47:32,655 Node[0] Epoch[18] Batch [200-220]	Speed: 30715.73 samples/sec	accuracy=nan
2022-10-13 12:47:34,782 Node[0] Epoch[18] Batch [220-240]	Speed: 30691.81 samples/sec	accuracy=nan
2022-10-13 12:47:36,817 Node[0] Epoch[18] Batch [240-260]	Speed: 32074.79 samples/sec	accuracy=nan
2022-10-13 12:47:39,046 Node[0] Epoch[18] Batch [260-280]	Speed: 29285.02 samples/sec	accuracy=nan
2022-10-13 12:47:41,178 Node[0] Epoch[18] Batch [280-300]	Speed: 30616.70 samples/sec	accuracy=nan
2022-10-13 12:47:43,307 Node[0] Epoch[18] Batch [300-320]	Speed: 30672.32 samples/sec	accuracy=nan
2022-10-13 12:47:45,434 Node[0] Epoch[18] Batch [320-340]	Speed: 30682.54 samples/sec	accuracy=nan
2022-10-13 12:47:47,564 Node[0] Epoch[18] Batch [340-360]	Speed: 30659.43 samples/sec	accuracy=nan
2022-10-13 12:47:49,691 Node[0] Epoch[18] Batch [360-380]	Speed: 30687.24 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665270969, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 19}}
2022-10-13 12:47:50,969 Node[0] Epoch[18] Time cost=41.841
:::MLLOG {"namespace": "", "time_ms": 1665665270970, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30619.7320392916}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 19}}
:::MLLOG {"namespace": "", "time_ms": 1665665270970, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30619.7320392916, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665271070, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 19}}
2022-10-13 12:47:51,818 Node[0] Epoch[18] Validation-accuracy=0.648584
2022-10-13 12:47:51,819 Node[0] Epoch[18] Validation-correct-count=1351.000000
2022-10-13 12:47:51,819 Node[0] Epoch[18] Validation-total-count=2083.000000
:::MLLOG {"namespace": "", "time_ms": 1665665271925, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 19}}
:::MLLOG {"namespace": "", "time_ms": 1665665271925, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.65612, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 19}}
:::MLLOG {"namespace": "", "time_ms": 1665665271926, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 16}}
:::MLLOG {"namespace": "", "time_ms": 1665665271926, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 20, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665665271926, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 20}}
2022-10-13 12:47:54,159 Node[0] Epoch[19] Batch [0-20]	Speed: 29690.21 samples/sec	accuracy=nan
2022-10-13 12:47:56,287 Node[0] Epoch[19] Batch [20-40]	Speed: 30671.33 samples/sec	accuracy=nan
2022-10-13 12:47:58,416 Node[0] Epoch[19] Batch [40-60]	Speed: 30665.28 samples/sec	accuracy=nan
2022-10-13 12:48:00,548 Node[0] Epoch[19] Batch [60-80]	Speed: 30618.46 samples/sec	accuracy=nan
2022-10-13 12:48:02,674 Node[0] Epoch[19] Batch [80-100]	Speed: 30701.64 samples/sec	accuracy=nan
2022-10-13 12:48:04,806 Node[0] Epoch[19] Batch [100-120]	Speed: 30623.44 samples/sec	accuracy=nan
2022-10-13 12:48:06,940 Node[0] Epoch[19] Batch [120-140]	Speed: 30588.05 samples/sec	accuracy=nan
2022-10-13 12:48:09,075 Node[0] Epoch[19] Batch [140-160]	Speed: 30575.79 samples/sec	accuracy=nan
2022-10-13 12:48:11,208 Node[0] Epoch[19] Batch [160-180]	Speed: 30603.93 samples/sec	accuracy=nan
2022-10-13 12:48:13,333 Node[0] Epoch[19] Batch [180-200]	Speed: 30726.75 samples/sec	accuracy=nan
2022-10-13 12:48:15,473 Node[0] Epoch[19] Batch [200-220]	Speed: 30494.65 samples/sec	accuracy=nan
2022-10-13 12:48:17,608 Node[0] Epoch[19] Batch [220-240]	Speed: 30585.17 samples/sec	accuracy=nan
2022-10-13 12:48:19,736 Node[0] Epoch[19] Batch [240-260]	Speed: 30679.83 samples/sec	accuracy=nan
2022-10-13 12:48:21,867 Node[0] Epoch[19] Batch [260-280]	Speed: 30632.68 samples/sec	accuracy=nan
2022-10-13 12:48:23,999 Node[0] Epoch[19] Batch [280-300]	Speed: 30612.82 samples/sec	accuracy=nan
2022-10-13 12:48:26,134 Node[0] Epoch[19] Batch [300-320]	Speed: 30585.28 samples/sec	accuracy=nan
2022-10-13 12:48:28,264 Node[0] Epoch[19] Batch [320-340]	Speed: 30645.39 samples/sec	accuracy=nan
2022-10-13 12:48:30,397 Node[0] Epoch[19] Batch [340-360]	Speed: 30603.91 samples/sec	accuracy=nan
2022-10-13 12:48:32,529 Node[0] Epoch[19] Batch [360-380]	Speed: 30618.96 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665313807, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 20}}
2022-10-13 12:48:33,808 Node[0] Epoch[19] Time cost=41.882
:::MLLOG {"namespace": "", "time_ms": 1665665313808, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30590.122712710272}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 20}}
:::MLLOG {"namespace": "", "time_ms": 1665665313809, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30590.122712710272, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665313809, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 21}}
2022-10-13 12:48:36,055 Node[0] Epoch[20] Batch [0-20]	Speed: 29213.75 samples/sec	accuracy=nan
2022-10-13 12:48:38,185 Node[0] Epoch[20] Batch [20-40]	Speed: 30647.84 samples/sec	accuracy=nan
2022-10-13 12:48:40,313 Node[0] Epoch[20] Batch [40-60]	Speed: 30663.95 samples/sec	accuracy=nan
2022-10-13 12:48:42,447 Node[0] Epoch[20] Batch [60-80]	Speed: 30603.27 samples/sec	accuracy=nan
2022-10-13 12:48:44,580 Node[0] Epoch[20] Batch [80-100]	Speed: 30595.84 samples/sec	accuracy=nan
2022-10-13 12:48:46,713 Node[0] Epoch[20] Batch [100-120]	Speed: 30612.55 samples/sec	accuracy=nan
2022-10-13 12:48:48,844 Node[0] Epoch[20] Batch [120-140]	Speed: 30626.87 samples/sec	accuracy=nan
2022-10-13 12:48:50,974 Node[0] Epoch[20] Batch [140-160]	Speed: 30651.65 samples/sec	accuracy=nan
2022-10-13 12:48:53,103 Node[0] Epoch[20] Batch [160-180]	Speed: 30657.50 samples/sec	accuracy=nan
2022-10-13 12:48:55,232 Node[0] Epoch[20] Batch [180-200]	Speed: 30666.77 samples/sec	accuracy=nan
2022-10-13 12:48:57,359 Node[0] Epoch[20] Batch [200-220]	Speed: 30683.87 samples/sec	accuracy=nan
2022-10-13 12:48:59,486 Node[0] Epoch[20] Batch [220-240]	Speed: 30690.08 samples/sec	accuracy=nan
2022-10-13 12:49:01,615 Node[0] Epoch[20] Batch [240-260]	Speed: 30673.56 samples/sec	accuracy=nan
2022-10-13 12:49:03,744 Node[0] Epoch[20] Batch [260-280]	Speed: 30651.03 samples/sec	accuracy=nan
2022-10-13 12:49:05,780 Node[0] Epoch[20] Batch [280-300]	Speed: 32065.70 samples/sec	accuracy=nan
2022-10-13 12:49:08,007 Node[0] Epoch[20] Batch [300-320]	Speed: 29321.57 samples/sec	accuracy=nan
2022-10-13 12:49:10,139 Node[0] Epoch[20] Batch [320-340]	Speed: 30611.84 samples/sec	accuracy=nan
2022-10-13 12:49:12,267 Node[0] Epoch[20] Batch [340-360]	Speed: 30671.31 samples/sec	accuracy=nan
2022-10-13 12:49:14,400 Node[0] Epoch[20] Batch [360-380]	Speed: 30612.00 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665355680, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 21}}
2022-10-13 12:49:15,680 Node[0] Epoch[20] Time cost=41.871
:::MLLOG {"namespace": "", "time_ms": 1665665355680, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30597.799131595046}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 21}}
:::MLLOG {"namespace": "", "time_ms": 1665665355681, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30597.799131595046, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665355681, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 22}}
2022-10-13 12:49:17,930 Node[0] Epoch[21] Batch [0-20]	Speed: 30621.31 samples/sec	accuracy=nan
2022-10-13 12:49:19,966 Node[0] Epoch[21] Batch [20-40]	Speed: 32048.78 samples/sec	accuracy=nan
2022-10-13 12:49:22,192 Node[0] Epoch[21] Batch [40-60]	Speed: 29327.39 samples/sec	accuracy=nan
2022-10-13 12:49:24,327 Node[0] Epoch[21] Batch [60-80]	Speed: 30579.56 samples/sec	accuracy=nan
2022-10-13 12:49:26,458 Node[0] Epoch[21] Batch [80-100]	Speed: 30641.26 samples/sec	accuracy=nan
2022-10-13 12:49:28,591 Node[0] Epoch[21] Batch [100-120]	Speed: 30593.78 samples/sec	accuracy=nan
2022-10-13 12:49:30,721 Node[0] Epoch[21] Batch [120-140]	Speed: 30649.52 samples/sec	accuracy=nan
2022-10-13 12:49:32,852 Node[0] Epoch[21] Batch [140-160]	Speed: 30635.59 samples/sec	accuracy=nan
2022-10-13 12:49:34,984 Node[0] Epoch[21] Batch [160-180]	Speed: 30623.34 samples/sec	accuracy=nan
2022-10-13 12:49:37,118 Node[0] Epoch[21] Batch [180-200]	Speed: 30587.91 samples/sec	accuracy=nan
2022-10-13 12:49:39,252 Node[0] Epoch[21] Batch [200-220]	Speed: 30589.38 samples/sec	accuracy=nan
2022-10-13 12:49:41,381 Node[0] Epoch[21] Batch [220-240]	Speed: 30662.66 samples/sec	accuracy=nan
2022-10-13 12:49:43,514 Node[0] Epoch[21] Batch [240-260]	Speed: 30609.58 samples/sec	accuracy=nan
2022-10-13 12:49:45,639 Node[0] Epoch[21] Batch [260-280]	Speed: 30710.24 samples/sec	accuracy=nan
2022-10-13 12:49:47,770 Node[0] Epoch[21] Batch [280-300]	Speed: 30638.42 samples/sec	accuracy=nan
2022-10-13 12:49:49,902 Node[0] Epoch[21] Batch [300-320]	Speed: 30612.35 samples/sec	accuracy=nan
2022-10-13 12:49:52,039 Node[0] Epoch[21] Batch [320-340]	Speed: 30547.50 samples/sec	accuracy=nan
2022-10-13 12:49:54,174 Node[0] Epoch[21] Batch [340-360]	Speed: 30586.64 samples/sec	accuracy=nan
2022-10-13 12:49:56,306 Node[0] Epoch[21] Batch [360-380]	Speed: 30612.53 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665397581, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 22}}
2022-10-13 12:49:57,581 Node[0] Epoch[21] Time cost=41.900
:::MLLOG {"namespace": "", "time_ms": 1665665397581, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30577.066621181206}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 22}}
:::MLLOG {"namespace": "", "time_ms": 1665665397582, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30577.066621181206, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665397582, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 23}}
2022-10-13 12:49:59,832 Node[0] Epoch[22] Batch [0-20]	Speed: 30540.45 samples/sec	accuracy=nan
2022-10-13 12:50:01,964 Node[0] Epoch[22] Batch [20-40]	Speed: 30625.29 samples/sec	accuracy=nan
2022-10-13 12:50:04,091 Node[0] Epoch[22] Batch [40-60]	Speed: 30687.33 samples/sec	accuracy=nan
2022-10-13 12:50:06,223 Node[0] Epoch[22] Batch [60-80]	Speed: 30621.37 samples/sec	accuracy=nan
2022-10-13 12:50:08,350 Node[0] Epoch[22] Batch [80-100]	Speed: 30688.91 samples/sec	accuracy=nan
2022-10-13 12:50:10,481 Node[0] Epoch[22] Batch [100-120]	Speed: 30641.02 samples/sec	accuracy=nan
2022-10-13 12:50:12,612 Node[0] Epoch[22] Batch [120-140]	Speed: 30625.75 samples/sec	accuracy=nan
2022-10-13 12:50:14,750 Node[0] Epoch[22] Batch [140-160]	Speed: 30542.00 samples/sec	accuracy=nan
2022-10-13 12:50:16,885 Node[0] Epoch[22] Batch [160-180]	Speed: 30576.97 samples/sec	accuracy=nan
2022-10-13 12:50:19,018 Node[0] Epoch[22] Batch [180-200]	Speed: 30599.39 samples/sec	accuracy=nan
2022-10-13 12:50:21,149 Node[0] Epoch[22] Batch [200-220]	Speed: 30637.25 samples/sec	accuracy=nan
2022-10-13 12:50:23,277 Node[0] Epoch[22] Batch [220-240]	Speed: 30670.25 samples/sec	accuracy=nan
2022-10-13 12:50:25,415 Node[0] Epoch[22] Batch [240-260]	Speed: 30532.05 samples/sec	accuracy=nan
2022-10-13 12:50:27,548 Node[0] Epoch[22] Batch [260-280]	Speed: 30610.12 samples/sec	accuracy=nan
2022-10-13 12:50:29,678 Node[0] Epoch[22] Batch [280-300]	Speed: 30639.83 samples/sec	accuracy=nan
2022-10-13 12:50:31,807 Node[0] Epoch[22] Batch [300-320]	Speed: 30661.62 samples/sec	accuracy=nan
2022-10-13 12:50:33,939 Node[0] Epoch[22] Batch [320-340]	Speed: 30625.82 samples/sec	accuracy=nan
2022-10-13 12:50:36,064 Node[0] Epoch[22] Batch [340-360]	Speed: 30712.17 samples/sec	accuracy=nan
2022-10-13 12:50:38,198 Node[0] Epoch[22] Batch [360-380]	Speed: 30593.91 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665439476, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 23}}
2022-10-13 12:50:39,477 Node[0] Epoch[22] Time cost=41.894
:::MLLOG {"namespace": "", "time_ms": 1665665439477, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30580.85260516568}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 23}}
:::MLLOG {"namespace": "", "time_ms": 1665665439477, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30580.85260516568, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665439578, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 23}}
2022-10-13 12:50:40,380 Node[0] Epoch[22] Validation-accuracy=0.696737
2022-10-13 12:50:40,380 Node[0] Epoch[22] Validation-correct-count=1452.000000
2022-10-13 12:50:40,381 Node[0] Epoch[22] Validation-total-count=2084.000000
:::MLLOG {"namespace": "", "time_ms": 1665665440395, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 23}}
:::MLLOG {"namespace": "", "time_ms": 1665665440395, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.70028, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 23}}
:::MLLOG {"namespace": "", "time_ms": 1665665440396, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 20}}
:::MLLOG {"namespace": "", "time_ms": 1665665440398, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 24, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665665440399, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 24}}
2022-10-13 12:50:42,665 Node[0] Epoch[23] Batch [0-20]	Speed: 29027.35 samples/sec	accuracy=nan
2022-10-13 12:50:44,793 Node[0] Epoch[23] Batch [20-40]	Speed: 30676.52 samples/sec	accuracy=nan
2022-10-13 12:50:46,920 Node[0] Epoch[23] Batch [40-60]	Speed: 30690.00 samples/sec	accuracy=nan
2022-10-13 12:50:49,048 Node[0] Epoch[23] Batch [60-80]	Speed: 30674.55 samples/sec	accuracy=nan
2022-10-13 12:50:51,176 Node[0] Epoch[23] Batch [80-100]	Speed: 30684.55 samples/sec	accuracy=nan
2022-10-13 12:50:53,304 Node[0] Epoch[23] Batch [100-120]	Speed: 30665.03 samples/sec	accuracy=nan
2022-10-13 12:50:55,438 Node[0] Epoch[23] Batch [120-140]	Speed: 30596.24 samples/sec	accuracy=nan
2022-10-13 12:50:57,566 Node[0] Epoch[23] Batch [140-160]	Speed: 30675.64 samples/sec	accuracy=nan
2022-10-13 12:50:59,699 Node[0] Epoch[23] Batch [160-180]	Speed: 30604.31 samples/sec	accuracy=nan
2022-10-13 12:51:01,833 Node[0] Epoch[23] Batch [180-200]	Speed: 30594.64 samples/sec	accuracy=nan
2022-10-13 12:51:03,962 Node[0] Epoch[23] Batch [200-220]	Speed: 30657.80 samples/sec	accuracy=nan
2022-10-13 12:51:06,089 Node[0] Epoch[23] Batch [220-240]	Speed: 30692.83 samples/sec	accuracy=nan
2022-10-13 12:51:08,216 Node[0] Epoch[23] Batch [240-260]	Speed: 30698.76 samples/sec	accuracy=nan
2022-10-13 12:51:10,343 Node[0] Epoch[23] Batch [260-280]	Speed: 30686.14 samples/sec	accuracy=nan
2022-10-13 12:51:12,470 Node[0] Epoch[23] Batch [280-300]	Speed: 30689.44 samples/sec	accuracy=nan
2022-10-13 12:51:14,600 Node[0] Epoch[23] Batch [300-320]	Speed: 30652.68 samples/sec	accuracy=nan
2022-10-13 12:51:16,731 Node[0] Epoch[23] Batch [320-340]	Speed: 30633.71 samples/sec	accuracy=nan
2022-10-13 12:51:18,863 Node[0] Epoch[23] Batch [340-360]	Speed: 30608.00 samples/sec	accuracy=nan
2022-10-13 12:51:20,995 Node[0] Epoch[23] Batch [360-380]	Speed: 30625.47 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665482275, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 24}}
2022-10-13 12:51:22,275 Node[0] Epoch[23] Time cost=41.876
:::MLLOG {"namespace": "", "time_ms": 1665665482275, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30594.26378331766}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 24}}
:::MLLOG {"namespace": "", "time_ms": 1665665482276, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30594.26378331766, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665482276, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 25}}
2022-10-13 12:51:24,519 Node[0] Epoch[24] Batch [0-20]	Speed: 30631.25 samples/sec	accuracy=nan
2022-10-13 12:51:26,651 Node[0] Epoch[24] Batch [20-40]	Speed: 30619.50 samples/sec	accuracy=nan
2022-10-13 12:51:28,778 Node[0] Epoch[24] Batch [40-60]	Speed: 30697.90 samples/sec	accuracy=nan
2022-10-13 12:51:30,911 Node[0] Epoch[24] Batch [60-80]	Speed: 30601.35 samples/sec	accuracy=nan
2022-10-13 12:51:33,039 Node[0] Epoch[24] Batch [80-100]	Speed: 30673.28 samples/sec	accuracy=nan
2022-10-13 12:51:35,168 Node[0] Epoch[24] Batch [100-120]	Speed: 30658.82 samples/sec	accuracy=nan
2022-10-13 12:51:37,297 Node[0] Epoch[24] Batch [120-140]	Speed: 30673.82 samples/sec	accuracy=nan
2022-10-13 12:51:39,428 Node[0] Epoch[24] Batch [140-160]	Speed: 30625.27 samples/sec	accuracy=nan
2022-10-13 12:51:41,555 Node[0] Epoch[24] Batch [160-180]	Speed: 30696.55 samples/sec	accuracy=nan
2022-10-13 12:51:43,683 Node[0] Epoch[24] Batch [180-200]	Speed: 30676.22 samples/sec	accuracy=nan
2022-10-13 12:51:45,815 Node[0] Epoch[24] Batch [200-220]	Speed: 30622.03 samples/sec	accuracy=nan
2022-10-13 12:51:47,942 Node[0] Epoch[24] Batch [220-240]	Speed: 30679.19 samples/sec	accuracy=nan
2022-10-13 12:51:50,069 Node[0] Epoch[24] Batch [240-260]	Speed: 30691.87 samples/sec	accuracy=nan
2022-10-13 12:51:52,199 Node[0] Epoch[24] Batch [260-280]	Speed: 30659.34 samples/sec	accuracy=nan
2022-10-13 12:51:54,326 Node[0] Epoch[24] Batch [280-300]	Speed: 30682.19 samples/sec	accuracy=nan
2022-10-13 12:51:56,453 Node[0] Epoch[24] Batch [300-320]	Speed: 30700.93 samples/sec	accuracy=nan
2022-10-13 12:51:58,583 Node[0] Epoch[24] Batch [320-340]	Speed: 30646.94 samples/sec	accuracy=nan
2022-10-13 12:52:00,717 Node[0] Epoch[24] Batch [340-360]	Speed: 30585.83 samples/sec	accuracy=nan
2022-10-13 12:52:02,847 Node[0] Epoch[24] Batch [360-380]	Speed: 30643.27 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665524122, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 25}}
2022-10-13 12:52:04,122 Node[0] Epoch[24] Time cost=41.846
:::MLLOG {"namespace": "", "time_ms": 1665665524122, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30616.340939261216}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 25}}
:::MLLOG {"namespace": "", "time_ms": 1665665524122, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30616.340939261216, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665524122, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 26}}
2022-10-13 12:52:06,369 Node[0] Epoch[25] Batch [0-20]	Speed: 30617.71 samples/sec	accuracy=nan
2022-10-13 12:52:08,498 Node[0] Epoch[25] Batch [20-40]	Speed: 30664.81 samples/sec	accuracy=nan
2022-10-13 12:52:10,626 Node[0] Epoch[25] Batch [40-60]	Speed: 30671.86 samples/sec	accuracy=nan
2022-10-13 12:52:12,758 Node[0] Epoch[25] Batch [60-80]	Speed: 30621.84 samples/sec	accuracy=nan
2022-10-13 12:52:14,891 Node[0] Epoch[25] Batch [80-100]	Speed: 30604.76 samples/sec	accuracy=nan
2022-10-13 12:52:17,020 Node[0] Epoch[25] Batch [100-120]	Speed: 30662.66 samples/sec	accuracy=nan
2022-10-13 12:52:19,152 Node[0] Epoch[25] Batch [120-140]	Speed: 30622.91 samples/sec	accuracy=nan
2022-10-13 12:52:21,280 Node[0] Epoch[25] Batch [140-160]	Speed: 30677.88 samples/sec	accuracy=nan
2022-10-13 12:52:23,409 Node[0] Epoch[25] Batch [160-180]	Speed: 30665.83 samples/sec	accuracy=nan
2022-10-13 12:52:25,539 Node[0] Epoch[25] Batch [180-200]	Speed: 30635.96 samples/sec	accuracy=nan
2022-10-13 12:52:27,674 Node[0] Epoch[25] Batch [200-220]	Speed: 30586.33 samples/sec	accuracy=nan
2022-10-13 12:52:29,799 Node[0] Epoch[25] Batch [220-240]	Speed: 30715.61 samples/sec	accuracy=nan
2022-10-13 12:52:31,935 Node[0] Epoch[25] Batch [240-260]	Speed: 30569.65 samples/sec	accuracy=nan
2022-10-13 12:52:34,060 Node[0] Epoch[25] Batch [260-280]	Speed: 30711.51 samples/sec	accuracy=nan
2022-10-13 12:52:36,192 Node[0] Epoch[25] Batch [280-300]	Speed: 30626.15 samples/sec	accuracy=nan
2022-10-13 12:52:38,320 Node[0] Epoch[25] Batch [300-320]	Speed: 30673.56 samples/sec	accuracy=nan
2022-10-13 12:52:40,453 Node[0] Epoch[25] Batch [320-340]	Speed: 30607.64 samples/sec	accuracy=nan
2022-10-13 12:52:42,580 Node[0] Epoch[25] Batch [340-360]	Speed: 30686.56 samples/sec	accuracy=nan
2022-10-13 12:52:44,712 Node[0] Epoch[25] Batch [360-380]	Speed: 30612.67 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665565992, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 26}}
2022-10-13 12:52:45,993 Node[0] Epoch[25] Time cost=41.871
:::MLLOG {"namespace": "", "time_ms": 1665665565993, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30598.27652022251}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 26}}
:::MLLOG {"namespace": "", "time_ms": 1665665565993, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30598.27652022251, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665565994, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 27}}
2022-10-13 12:52:48,234 Node[0] Epoch[26] Batch [0-20]	Speed: 30724.70 samples/sec	accuracy=nan
2022-10-13 12:52:50,368 Node[0] Epoch[26] Batch [20-40]	Speed: 30602.66 samples/sec	accuracy=nan
2022-10-13 12:52:52,500 Node[0] Epoch[26] Batch [40-60]	Speed: 30605.59 samples/sec	accuracy=nan
2022-10-13 12:52:54,629 Node[0] Epoch[26] Batch [60-80]	Speed: 30670.89 samples/sec	accuracy=nan
2022-10-13 12:52:56,763 Node[0] Epoch[26] Batch [80-100]	Speed: 30590.44 samples/sec	accuracy=nan
2022-10-13 12:52:58,892 Node[0] Epoch[26] Batch [100-120]	Speed: 30657.33 samples/sec	accuracy=nan
2022-10-13 12:53:01,023 Node[0] Epoch[26] Batch [120-140]	Speed: 30632.50 samples/sec	accuracy=nan
2022-10-13 12:53:03,154 Node[0] Epoch[26] Batch [140-160]	Speed: 30643.15 samples/sec	accuracy=nan
2022-10-13 12:53:05,285 Node[0] Epoch[26] Batch [160-180]	Speed: 30625.85 samples/sec	accuracy=nan
2022-10-13 12:53:07,410 Node[0] Epoch[26] Batch [180-200]	Speed: 30715.95 samples/sec	accuracy=nan
2022-10-13 12:53:09,539 Node[0] Epoch[26] Batch [200-220]	Speed: 30663.92 samples/sec	accuracy=nan
2022-10-13 12:53:11,668 Node[0] Epoch[26] Batch [220-240]	Speed: 30668.25 samples/sec	accuracy=nan
2022-10-13 12:53:13,798 Node[0] Epoch[26] Batch [240-260]	Speed: 30648.89 samples/sec	accuracy=nan
2022-10-13 12:53:15,926 Node[0] Epoch[26] Batch [260-280]	Speed: 30677.73 samples/sec	accuracy=nan
2022-10-13 12:53:18,058 Node[0] Epoch[26] Batch [280-300]	Speed: 30617.03 samples/sec	accuracy=nan
2022-10-13 12:53:20,187 Node[0] Epoch[26] Batch [300-320]	Speed: 30667.95 samples/sec	accuracy=nan
2022-10-13 12:53:22,316 Node[0] Epoch[26] Batch [320-340]	Speed: 30653.25 samples/sec	accuracy=nan
2022-10-13 12:53:24,451 Node[0] Epoch[26] Batch [340-360]	Speed: 30582.32 samples/sec	accuracy=nan
2022-10-13 12:53:26,586 Node[0] Epoch[26] Batch [360-380]	Speed: 30570.31 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665607862, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 27}}
2022-10-13 12:53:27,862 Node[0] Epoch[26] Time cost=41.868
:::MLLOG {"namespace": "", "time_ms": 1665665607862, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30600.053094311115}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 27}}
:::MLLOG {"namespace": "", "time_ms": 1665665607862, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30600.053094311115, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665607962, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 27}}
2022-10-13 12:53:28,737 Node[0] Epoch[26] Validation-accuracy=0.734518
2022-10-13 12:53:28,737 Node[0] Epoch[26] Validation-correct-count=1530.000000
2022-10-13 12:53:28,737 Node[0] Epoch[26] Validation-total-count=2083.000000
:::MLLOG {"namespace": "", "time_ms": 1665665608789, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 27}}
:::MLLOG {"namespace": "", "time_ms": 1665665608789, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.7268, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 27}}
:::MLLOG {"namespace": "", "time_ms": 1665665608790, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 24}}
:::MLLOG {"namespace": "", "time_ms": 1665665608790, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 28, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665665608790, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 28}}
2022-10-13 12:53:31,037 Node[0] Epoch[27] Batch [0-20]	Speed: 29627.18 samples/sec	accuracy=nan
2022-10-13 12:53:33,170 Node[0] Epoch[27] Batch [20-40]	Speed: 30610.20 samples/sec	accuracy=nan
2022-10-13 12:53:35,307 Node[0] Epoch[27] Batch [40-60]	Speed: 30552.37 samples/sec	accuracy=nan
2022-10-13 12:53:37,441 Node[0] Epoch[27] Batch [60-80]	Speed: 30576.18 samples/sec	accuracy=nan
2022-10-13 12:53:39,574 Node[0] Epoch[27] Batch [80-100]	Speed: 30617.33 samples/sec	accuracy=nan
2022-10-13 12:53:41,710 Node[0] Epoch[27] Batch [100-120]	Speed: 30558.79 samples/sec	accuracy=nan
2022-10-13 12:53:43,842 Node[0] Epoch[27] Batch [120-140]	Speed: 30609.96 samples/sec	accuracy=nan
2022-10-13 12:53:45,977 Node[0] Epoch[27] Batch [140-160]	Speed: 30583.61 samples/sec	accuracy=nan
2022-10-13 12:53:48,112 Node[0] Epoch[27] Batch [160-180]	Speed: 30579.54 samples/sec	accuracy=nan
2022-10-13 12:53:50,244 Node[0] Epoch[27] Batch [180-200]	Speed: 30610.63 samples/sec	accuracy=nan
2022-10-13 12:53:52,372 Node[0] Epoch[27] Batch [200-220]	Speed: 30678.49 samples/sec	accuracy=nan
2022-10-13 12:53:54,506 Node[0] Epoch[27] Batch [220-240]	Speed: 30588.68 samples/sec	accuracy=nan
2022-10-13 12:53:56,637 Node[0] Epoch[27] Batch [240-260]	Speed: 30638.00 samples/sec	accuracy=nan
2022-10-13 12:53:58,770 Node[0] Epoch[27] Batch [260-280]	Speed: 30603.19 samples/sec	accuracy=nan
2022-10-13 12:54:00,902 Node[0] Epoch[27] Batch [280-300]	Speed: 30619.49 samples/sec	accuracy=nan
2022-10-13 12:54:03,032 Node[0] Epoch[27] Batch [300-320]	Speed: 30655.10 samples/sec	accuracy=nan
2022-10-13 12:54:05,167 Node[0] Epoch[27] Batch [320-340]	Speed: 30569.89 samples/sec	accuracy=nan
2022-10-13 12:54:07,302 Node[0] Epoch[27] Batch [340-360]	Speed: 30575.36 samples/sec	accuracy=nan
2022-10-13 12:54:09,435 Node[0] Epoch[27] Batch [360-380]	Speed: 30602.66 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665650709, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 28}}
2022-10-13 12:54:10,709 Node[0] Epoch[27] Time cost=41.918
:::MLLOG {"namespace": "", "time_ms": 1665665650709, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30563.374990261258}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 28}}
:::MLLOG {"namespace": "", "time_ms": 1665665650709, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30563.374990261258, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665650709, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 29}}
2022-10-13 12:54:12,958 Node[0] Epoch[28] Batch [0-20]	Speed: 30681.49 samples/sec	accuracy=nan
2022-10-13 12:54:15,092 Node[0] Epoch[28] Batch [20-40]	Speed: 30588.60 samples/sec	accuracy=nan
2022-10-13 12:54:17,225 Node[0] Epoch[28] Batch [40-60]	Speed: 30605.93 samples/sec	accuracy=nan
2022-10-13 12:54:19,355 Node[0] Epoch[28] Batch [60-80]	Speed: 30639.98 samples/sec	accuracy=nan
2022-10-13 12:54:21,485 Node[0] Epoch[28] Batch [80-100]	Speed: 30653.32 samples/sec	accuracy=nan
2022-10-13 12:54:23,618 Node[0] Epoch[28] Batch [100-120]	Speed: 30604.79 samples/sec	accuracy=nan
2022-10-13 12:54:25,747 Node[0] Epoch[28] Batch [120-140]	Speed: 30654.74 samples/sec	accuracy=nan
2022-10-13 12:54:27,878 Node[0] Epoch[28] Batch [140-160]	Speed: 30642.77 samples/sec	accuracy=nan
2022-10-13 12:54:30,008 Node[0] Epoch[28] Batch [160-180]	Speed: 30647.86 samples/sec	accuracy=nan
2022-10-13 12:54:32,139 Node[0] Epoch[28] Batch [180-200]	Speed: 30626.75 samples/sec	accuracy=nan
2022-10-13 12:54:34,270 Node[0] Epoch[28] Batch [200-220]	Speed: 30629.94 samples/sec	accuracy=nan
2022-10-13 12:54:36,401 Node[0] Epoch[28] Batch [220-240]	Speed: 30637.18 samples/sec	accuracy=nan
2022-10-13 12:54:38,536 Node[0] Epoch[28] Batch [240-260]	Speed: 30585.05 samples/sec	accuracy=nan
2022-10-13 12:54:40,669 Node[0] Epoch[28] Batch [260-280]	Speed: 30591.62 samples/sec	accuracy=nan
2022-10-13 12:54:42,801 Node[0] Epoch[28] Batch [280-300]	Speed: 30631.55 samples/sec	accuracy=nan
2022-10-13 12:54:44,934 Node[0] Epoch[28] Batch [300-320]	Speed: 30598.67 samples/sec	accuracy=nan
2022-10-13 12:54:47,070 Node[0] Epoch[28] Batch [320-340]	Speed: 30561.27 samples/sec	accuracy=nan
2022-10-13 12:54:49,198 Node[0] Epoch[28] Batch [340-360]	Speed: 30672.72 samples/sec	accuracy=nan
2022-10-13 12:54:51,329 Node[0] Epoch[28] Batch [360-380]	Speed: 30635.47 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665692610, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 29}}
2022-10-13 12:54:52,610 Node[0] Epoch[28] Time cost=41.901
:::MLLOG {"namespace": "", "time_ms": 1665665692610, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30576.307170716977}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 29}}
:::MLLOG {"namespace": "", "time_ms": 1665665692610, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30576.307170716977, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665692610, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 30}}
2022-10-13 12:54:54,859 Node[0] Epoch[29] Batch [0-20]	Speed: 30605.36 samples/sec	accuracy=nan
2022-10-13 12:54:56,991 Node[0] Epoch[29] Batch [20-40]	Speed: 30623.23 samples/sec	accuracy=nan
2022-10-13 12:54:59,121 Node[0] Epoch[29] Batch [40-60]	Speed: 30650.06 samples/sec	accuracy=nan
2022-10-13 12:55:01,256 Node[0] Epoch[29] Batch [60-80]	Speed: 30574.52 samples/sec	accuracy=nan
2022-10-13 12:55:03,386 Node[0] Epoch[29] Batch [80-100]	Speed: 30637.00 samples/sec	accuracy=nan
2022-10-13 12:55:05,514 Node[0] Epoch[29] Batch [100-120]	Speed: 30687.28 samples/sec	accuracy=nan
2022-10-13 12:55:07,452 Node[0] Epoch[29] Batch [120-140]	Speed: 33674.31 samples/sec	accuracy=nan
2022-10-13 12:55:09,785 Node[0] Epoch[29] Batch [140-160]	Speed: 27983.55 samples/sec	accuracy=nan
2022-10-13 12:55:11,920 Node[0] Epoch[29] Batch [160-180]	Speed: 30575.17 samples/sec	accuracy=nan
2022-10-13 12:55:13,959 Node[0] Epoch[29] Batch [180-200]	Speed: 32011.05 samples/sec	accuracy=nan
2022-10-13 12:55:16,187 Node[0] Epoch[29] Batch [200-220]	Speed: 29310.90 samples/sec	accuracy=nan
2022-10-13 12:55:18,318 Node[0] Epoch[29] Batch [220-240]	Speed: 30621.77 samples/sec	accuracy=nan
2022-10-13 12:55:20,451 Node[0] Epoch[29] Batch [240-260]	Speed: 30604.88 samples/sec	accuracy=nan
2022-10-13 12:55:22,486 Node[0] Epoch[29] Batch [260-280]	Speed: 32080.08 samples/sec	accuracy=nan
2022-10-13 12:55:24,719 Node[0] Epoch[29] Batch [280-300]	Speed: 29242.73 samples/sec	accuracy=nan
2022-10-13 12:55:26,851 Node[0] Epoch[29] Batch [300-320]	Speed: 30619.11 samples/sec	accuracy=nan
2022-10-13 12:55:28,979 Node[0] Epoch[29] Batch [320-340]	Speed: 30675.36 samples/sec	accuracy=nan
2022-10-13 12:55:31,108 Node[0] Epoch[29] Batch [340-360]	Speed: 30657.80 samples/sec	accuracy=nan
2022-10-13 12:55:33,236 Node[0] Epoch[29] Batch [360-380]	Speed: 30679.52 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665734513, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 30}}
2022-10-13 12:55:34,514 Node[0] Epoch[29] Time cost=41.903
:::MLLOG {"namespace": "", "time_ms": 1665665734514, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30574.587976873983}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 30}}
:::MLLOG {"namespace": "", "time_ms": 1665665734514, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30574.587976873983, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665734514, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 31}}
2022-10-13 12:55:36,758 Node[0] Epoch[30] Batch [0-20]	Speed: 30587.32 samples/sec	accuracy=nan
2022-10-13 12:55:38,886 Node[0] Epoch[30] Batch [20-40]	Speed: 30671.80 samples/sec	accuracy=nan
2022-10-13 12:55:41,018 Node[0] Epoch[30] Batch [40-60]	Speed: 30617.69 samples/sec	accuracy=nan
2022-10-13 12:55:43,154 Node[0] Epoch[30] Batch [60-80]	Speed: 30572.93 samples/sec	accuracy=nan
2022-10-13 12:55:45,288 Node[0] Epoch[30] Batch [80-100]	Speed: 30580.15 samples/sec	accuracy=nan
2022-10-13 12:55:47,418 Node[0] Epoch[30] Batch [100-120]	Speed: 30650.69 samples/sec	accuracy=nan
2022-10-13 12:55:49,456 Node[0] Epoch[30] Batch [120-140]	Speed: 32033.97 samples/sec	accuracy=nan
2022-10-13 12:55:51,684 Node[0] Epoch[30] Batch [140-160]	Speed: 29301.51 samples/sec	accuracy=nan
2022-10-13 12:55:53,816 Node[0] Epoch[30] Batch [160-180]	Speed: 30610.39 samples/sec	accuracy=nan
2022-10-13 12:55:55,948 Node[0] Epoch[30] Batch [180-200]	Speed: 30626.43 samples/sec	accuracy=nan
2022-10-13 12:55:58,083 Node[0] Epoch[30] Batch [200-220]	Speed: 30570.79 samples/sec	accuracy=nan
2022-10-13 12:56:00,222 Node[0] Epoch[30] Batch [220-240]	Speed: 30529.76 samples/sec	accuracy=nan
2022-10-13 12:56:02,357 Node[0] Epoch[30] Batch [240-260]	Speed: 30573.74 samples/sec	accuracy=nan
2022-10-13 12:56:04,483 Node[0] Epoch[30] Batch [260-280]	Speed: 30707.14 samples/sec	accuracy=nan
2022-10-13 12:56:06,610 Node[0] Epoch[30] Batch [280-300]	Speed: 30677.90 samples/sec	accuracy=nan
2022-10-13 12:56:08,740 Node[0] Epoch[30] Batch [300-320]	Speed: 30661.18 samples/sec	accuracy=nan
2022-10-13 12:56:10,872 Node[0] Epoch[30] Batch [320-340]	Speed: 30615.59 samples/sec	accuracy=nan
2022-10-13 12:56:13,009 Node[0] Epoch[30] Batch [340-360]	Speed: 30544.73 samples/sec	accuracy=nan
2022-10-13 12:56:15,141 Node[0] Epoch[30] Batch [360-380]	Speed: 30618.09 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665776418, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 31}}
2022-10-13 12:56:16,419 Node[0] Epoch[30] Time cost=41.904
:::MLLOG {"namespace": "", "time_ms": 1665665776419, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30573.52040644182}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 31}}
:::MLLOG {"namespace": "", "time_ms": 1665665776419, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30573.52040644182, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665776520, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 31}}
2022-10-13 12:56:17,371 Node[0] Epoch[30] Validation-accuracy=0.747960
2022-10-13 12:56:17,371 Node[0] Epoch[30] Validation-correct-count=1558.000000
2022-10-13 12:56:17,371 Node[0] Epoch[30] Validation-total-count=2083.000000
:::MLLOG {"namespace": "", "time_ms": 1665665777371, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 31}}
:::MLLOG {"namespace": "", "time_ms": 1665665777372, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.74916, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 31}}
:::MLLOG {"namespace": "", "time_ms": 1665665777372, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 28}}
:::MLLOG {"namespace": "", "time_ms": 1665665777372, "event_type": "INTERVAL_START", "key": "block_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1075, "first_epoch_num": 32, "epoch_count": 4}}
:::MLLOG {"namespace": "", "time_ms": 1665665777372, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 32}}
2022-10-13 12:56:19,650 Node[0] Epoch[31] Batch [0-20]	Speed: 29039.32 samples/sec	accuracy=nan
2022-10-13 12:56:21,780 Node[0] Epoch[31] Batch [20-40]	Speed: 30641.93 samples/sec	accuracy=nan
2022-10-13 12:56:23,912 Node[0] Epoch[31] Batch [40-60]	Speed: 30614.59 samples/sec	accuracy=nan
2022-10-13 12:56:26,038 Node[0] Epoch[31] Batch [60-80]	Speed: 30712.94 samples/sec	accuracy=nan
2022-10-13 12:56:28,165 Node[0] Epoch[31] Batch [80-100]	Speed: 30684.75 samples/sec	accuracy=nan
2022-10-13 12:56:30,295 Node[0] Epoch[31] Batch [100-120]	Speed: 30654.46 samples/sec	accuracy=nan
2022-10-13 12:56:32,423 Node[0] Epoch[31] Batch [120-140]	Speed: 30668.48 samples/sec	accuracy=nan
2022-10-13 12:56:34,556 Node[0] Epoch[31] Batch [140-160]	Speed: 30611.72 samples/sec	accuracy=nan
2022-10-13 12:56:36,688 Node[0] Epoch[31] Batch [160-180]	Speed: 30617.96 samples/sec	accuracy=nan
2022-10-13 12:56:38,821 Node[0] Epoch[31] Batch [180-200]	Speed: 30603.53 samples/sec	accuracy=nan
2022-10-13 12:56:40,953 Node[0] Epoch[31] Batch [200-220]	Speed: 30625.82 samples/sec	accuracy=nan
2022-10-13 12:56:43,081 Node[0] Epoch[31] Batch [220-240]	Speed: 30674.56 samples/sec	accuracy=nan
2022-10-13 12:56:45,206 Node[0] Epoch[31] Batch [240-260]	Speed: 30715.87 samples/sec	accuracy=nan
2022-10-13 12:56:47,332 Node[0] Epoch[31] Batch [260-280]	Speed: 30698.76 samples/sec	accuracy=nan
2022-10-13 12:56:49,462 Node[0] Epoch[31] Batch [280-300]	Speed: 30653.33 samples/sec	accuracy=nan
2022-10-13 12:56:51,593 Node[0] Epoch[31] Batch [300-320]	Speed: 30636.56 samples/sec	accuracy=nan
2022-10-13 12:56:53,727 Node[0] Epoch[31] Batch [320-340]	Speed: 30584.41 samples/sec	accuracy=nan
2022-10-13 12:56:55,852 Node[0] Epoch[31] Batch [340-360]	Speed: 30721.29 samples/sec	accuracy=nan
2022-10-13 12:56:57,981 Node[0] Epoch[31] Batch [360-380]	Speed: 30662.51 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665819257, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 32}}
2022-10-13 12:56:59,257 Node[0] Epoch[31] Time cost=41.885
:::MLLOG {"namespace": "", "time_ms": 1665665819257, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30587.55489604619}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 32}}
:::MLLOG {"namespace": "", "time_ms": 1665665819258, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30587.55489604619, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665819258, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 33}}
2022-10-13 12:57:01,505 Node[0] Epoch[32] Batch [0-20]	Speed: 29204.39 samples/sec	accuracy=nan
2022-10-13 12:57:03,638 Node[0] Epoch[32] Batch [20-40]	Speed: 30614.35 samples/sec	accuracy=nan
2022-10-13 12:57:05,766 Node[0] Epoch[32] Batch [40-60]	Speed: 30675.46 samples/sec	accuracy=nan
2022-10-13 12:57:07,895 Node[0] Epoch[32] Batch [60-80]	Speed: 30654.76 samples/sec	accuracy=nan
2022-10-13 12:57:10,021 Node[0] Epoch[32] Batch [80-100]	Speed: 30707.64 samples/sec	accuracy=nan
2022-10-13 12:57:12,151 Node[0] Epoch[32] Batch [100-120]	Speed: 30653.61 samples/sec	accuracy=nan
2022-10-13 12:57:14,289 Node[0] Epoch[32] Batch [120-140]	Speed: 30538.43 samples/sec	accuracy=nan
2022-10-13 12:57:16,421 Node[0] Epoch[32] Batch [140-160]	Speed: 30610.92 samples/sec	accuracy=nan
2022-10-13 12:57:18,551 Node[0] Epoch[32] Batch [160-180]	Speed: 30652.24 samples/sec	accuracy=nan
2022-10-13 12:57:20,681 Node[0] Epoch[32] Batch [180-200]	Speed: 30639.45 samples/sec	accuracy=nan
2022-10-13 12:57:22,808 Node[0] Epoch[32] Batch [200-220]	Speed: 30689.77 samples/sec	accuracy=nan
2022-10-13 12:57:24,939 Node[0] Epoch[32] Batch [220-240]	Speed: 30631.76 samples/sec	accuracy=nan
2022-10-13 12:57:27,070 Node[0] Epoch[32] Batch [240-260]	Speed: 30638.59 samples/sec	accuracy=nan
2022-10-13 12:57:29,201 Node[0] Epoch[32] Batch [260-280]	Speed: 30640.17 samples/sec	accuracy=nan
2022-10-13 12:57:31,334 Node[0] Epoch[32] Batch [280-300]	Speed: 30594.84 samples/sec	accuracy=nan
2022-10-13 12:57:33,459 Node[0] Epoch[32] Batch [300-320]	Speed: 30723.63 samples/sec	accuracy=nan
2022-10-13 12:57:35,589 Node[0] Epoch[32] Batch [320-340]	Speed: 30644.55 samples/sec	accuracy=nan
2022-10-13 12:57:37,719 Node[0] Epoch[32] Batch [340-360]	Speed: 30649.10 samples/sec	accuracy=nan
2022-10-13 12:57:39,850 Node[0] Epoch[32] Batch [360-380]	Speed: 30634.31 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665861130, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 33}}
2022-10-13 12:57:41,131 Node[0] Epoch[32] Time cost=41.872
:::MLLOG {"namespace": "", "time_ms": 1665665861131, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30596.90659420712}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 33}}
:::MLLOG {"namespace": "", "time_ms": 1665665861131, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30596.90659420712, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665861131, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 34}}
2022-10-13 12:57:43,379 Node[0] Epoch[33] Batch [0-20]	Speed: 30577.27 samples/sec	accuracy=nan
2022-10-13 12:57:45,513 Node[0] Epoch[33] Batch [20-40]	Speed: 30593.56 samples/sec	accuracy=nan
2022-10-13 12:57:47,641 Node[0] Epoch[33] Batch [40-60]	Speed: 30668.13 samples/sec	accuracy=nan
2022-10-13 12:57:49,773 Node[0] Epoch[33] Batch [60-80]	Speed: 30628.29 samples/sec	accuracy=nan
2022-10-13 12:57:51,906 Node[0] Epoch[33] Batch [80-100]	Speed: 30597.52 samples/sec	accuracy=nan
2022-10-13 12:57:54,036 Node[0] Epoch[33] Batch [100-120]	Speed: 30651.07 samples/sec	accuracy=nan
2022-10-13 12:57:56,171 Node[0] Epoch[33] Batch [120-140]	Speed: 30583.79 samples/sec	accuracy=nan
2022-10-13 12:57:58,298 Node[0] Epoch[33] Batch [140-160]	Speed: 30682.38 samples/sec	accuracy=nan
2022-10-13 12:58:00,425 Node[0] Epoch[33] Batch [160-180]	Speed: 30696.64 samples/sec	accuracy=nan
2022-10-13 12:58:02,555 Node[0] Epoch[33] Batch [180-200]	Speed: 30652.03 samples/sec	accuracy=nan
2022-10-13 12:58:04,689 Node[0] Epoch[33] Batch [200-220]	Speed: 30584.42 samples/sec	accuracy=nan
2022-10-13 12:58:06,815 Node[0] Epoch[33] Batch [220-240]	Speed: 30706.20 samples/sec	accuracy=nan
2022-10-13 12:58:08,943 Node[0] Epoch[33] Batch [240-260]	Speed: 30674.36 samples/sec	accuracy=nan
2022-10-13 12:58:11,078 Node[0] Epoch[33] Batch [260-280]	Speed: 30569.53 samples/sec	accuracy=nan
2022-10-13 12:58:13,208 Node[0] Epoch[33] Batch [280-300]	Speed: 30648.98 samples/sec	accuracy=nan
2022-10-13 12:58:15,336 Node[0] Epoch[33] Batch [300-320]	Speed: 30676.30 samples/sec	accuracy=nan
2022-10-13 12:58:17,468 Node[0] Epoch[33] Batch [320-340]	Speed: 30629.24 samples/sec	accuracy=nan
2022-10-13 12:58:19,592 Node[0] Epoch[33] Batch [340-360]	Speed: 30725.12 samples/sec	accuracy=nan
2022-10-13 12:58:21,723 Node[0] Epoch[33] Batch [360-380]	Speed: 30637.55 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665902997, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 34}}
2022-10-13 12:58:22,998 Node[0] Epoch[33] Time cost=41.866
:::MLLOG {"namespace": "", "time_ms": 1665665902998, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30601.48534163371}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 34}}
:::MLLOG {"namespace": "", "time_ms": 1665665902998, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30601.48534163371, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665902998, "event_type": "INTERVAL_START", "key": "epoch_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 915, "epoch_num": 35}}
2022-10-13 12:58:25,241 Node[0] Epoch[34] Batch [0-20]	Speed: 30645.91 samples/sec	accuracy=nan
2022-10-13 12:58:27,276 Node[0] Epoch[34] Batch [20-40]	Speed: 32077.99 samples/sec	accuracy=nan
2022-10-13 12:58:29,499 Node[0] Epoch[34] Batch [40-60]	Speed: 29371.54 samples/sec	accuracy=nan
2022-10-13 12:58:31,628 Node[0] Epoch[34] Batch [60-80]	Speed: 30656.63 samples/sec	accuracy=nan
2022-10-13 12:58:33,756 Node[0] Epoch[34] Batch [80-100]	Speed: 30671.16 samples/sec	accuracy=nan
2022-10-13 12:58:35,880 Node[0] Epoch[34] Batch [100-120]	Speed: 30738.64 samples/sec	accuracy=nan
2022-10-13 12:58:38,020 Node[0] Epoch[34] Batch [120-140]	Speed: 30507.73 samples/sec	accuracy=nan
2022-10-13 12:58:40,154 Node[0] Epoch[34] Batch [140-160]	Speed: 30594.02 samples/sec	accuracy=nan
2022-10-13 12:58:42,285 Node[0] Epoch[34] Batch [160-180]	Speed: 30625.80 samples/sec	accuracy=nan
2022-10-13 12:58:44,416 Node[0] Epoch[34] Batch [180-200]	Speed: 30632.22 samples/sec	accuracy=nan
2022-10-13 12:58:46,544 Node[0] Epoch[34] Batch [200-220]	Speed: 30675.79 samples/sec	accuracy=nan
2022-10-13 12:58:48,673 Node[0] Epoch[34] Batch [220-240]	Speed: 30666.46 samples/sec	accuracy=nan
2022-10-13 12:58:50,809 Node[0] Epoch[34] Batch [240-260]	Speed: 30559.20 samples/sec	accuracy=nan
2022-10-13 12:58:52,940 Node[0] Epoch[34] Batch [260-280]	Speed: 30635.08 samples/sec	accuracy=nan
2022-10-13 12:58:55,069 Node[0] Epoch[34] Batch [280-300]	Speed: 30661.90 samples/sec	accuracy=nan
2022-10-13 12:58:57,199 Node[0] Epoch[34] Batch [300-320]	Speed: 30651.49 samples/sec	accuracy=nan
2022-10-13 12:58:59,333 Node[0] Epoch[34] Batch [320-340]	Speed: 30592.03 samples/sec	accuracy=nan
2022-10-13 12:59:01,463 Node[0] Epoch[34] Batch [340-360]	Speed: 30646.42 samples/sec	accuracy=nan
2022-10-13 12:59:03,601 Node[0] Epoch[34] Batch [360-380]	Speed: 30532.41 samples/sec	accuracy=nan
:::MLLOG {"namespace": "", "time_ms": 1665665944872, "event_type": "INTERVAL_END", "key": "epoch_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 988, "epoch_num": 35}}
2022-10-13 12:59:04,872 Node[0] Epoch[34] Time cost=41.874
:::MLLOG {"namespace": "", "time_ms": 1665665944872, "event_type": "POINT_IN_TIME", "key": "tracked_stats", "value": {"imgs_sec": 30595.654725347318}, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1004, "step": 35}}
:::MLLOG {"namespace": "", "time_ms": 1665665944872, "event_type": "POINT_IN_TIME", "key": "throughput", "value": 30595.654725347318, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1007}}
:::MLLOG {"namespace": "", "time_ms": 1665665944974, "event_type": "INTERVAL_START", "key": "eval_start", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1027, "epoch_num": 35}}
2022-10-13 12:59:05,723 Node[0] Epoch[34] Validation-accuracy=0.757198
2022-10-13 12:59:05,723 Node[0] Epoch[34] Validation-correct-count=1578.000000
2022-10-13 12:59:05,723 Node[0] Epoch[34] Validation-total-count=2084.000000
:::MLLOG {"namespace": "", "time_ms": 1665665945788, "event_type": "INTERVAL_END", "key": "eval_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1050, "epoch_num": 35}}
:::MLLOG {"namespace": "", "time_ms": 1665665945788, "event_type": "POINT_IN_TIME", "key": "eval_accuracy", "value": 0.7609, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1056, "epoch_num": 35}}
:::MLLOG {"namespace": "", "time_ms": 1665665945789, "event_type": "INTERVAL_END", "key": "block_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1059, "first_epoch_num": 32}}
:::MLLOG {"namespace": "", "time_ms": 1665665945789, "event_type": "INTERVAL_END", "key": "run_stop", "value": null, "metadata": {"file": "/workspace/image_classification/common/fit.py", "lineno": 1063, "status": "success"}}
ENDING TIMING RUN AT 2022-10-13 12:59:49 PM
RESULT,IMAGE_CLASSIFICATION,,1599,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:51 PM
RESULT,IMAGE_CLASSIFICATION,,1601,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:52 PM
RESULT,IMAGE_CLASSIFICATION,,1602,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:53 PM
RESULT,IMAGE_CLASSIFICATION,,1603,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:53 PM
RESULT,IMAGE_CLASSIFICATION,,1603,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:53 PM
RESULT,IMAGE_CLASSIFICATION,,1603,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:53 PM
RESULT,IMAGE_CLASSIFICATION,,1603,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:53 PM
RESULT,IMAGE_CLASSIFICATION,,1603,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:53 PM
RESULT,IMAGE_CLASSIFICATION,,1603,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:53 PM
RESULT,IMAGE_CLASSIFICATION,,1603,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:54 PM
RESULT,IMAGE_CLASSIFICATION,,1604,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:54 PM
RESULT,IMAGE_CLASSIFICATION,,1604,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:54 PM
RESULT,IMAGE_CLASSIFICATION,,1604,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:55 PM
RESULT,IMAGE_CLASSIFICATION,,1605,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:56 PM
RESULT,IMAGE_CLASSIFICATION,,1606,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:56 PM
RESULT,IMAGE_CLASSIFICATION,,1606,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:57 PM
RESULT,IMAGE_CLASSIFICATION,,1607,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:57 PM
RESULT,IMAGE_CLASSIFICATION,,1607,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:57 PM
RESULT,IMAGE_CLASSIFICATION,,1607,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:57 PM
RESULT,IMAGE_CLASSIFICATION,,1607,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:57 PM
RESULT,IMAGE_CLASSIFICATION,,1607,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:57 PM
RESULT,IMAGE_CLASSIFICATION,,1607,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:58 PM
RESULT,IMAGE_CLASSIFICATION,,1608,,2022-10-13 12:33:10 PM
ENDING TIMING RUN AT 2022-10-13 12:59:59 PM
RESULT,IMAGE_CLASSIFICATION,,1609,,2022-10-13 12:33:10 PM
